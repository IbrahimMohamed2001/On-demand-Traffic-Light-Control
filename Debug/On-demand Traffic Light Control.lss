
On-demand Traffic Light Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000171a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000171a  000017ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800072  00800072  000017c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019ce  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab2  00000000  00000000  000033ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000133b  00000000  00000000  00003e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000668  00000000  00000000  000051a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087b  00000000  00000000  00005810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018e7  00000000  00000000  0000608b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00007972  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_1>
       8:	0c 94 be 03 	jmp	0x77c	; 0x77c <__vector_2>
       c:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__vector_3>
      10:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_4>
      14:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__vector_7>
      20:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <__vector_8>
      24:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__vector_9>
      28:	0c 94 87 08 	jmp	0x110e	; 0x110e <__vector_10>
      2c:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <main>
      8a:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <stopwacth_INT_fun>:
	}
}


void stopwacth_INT_fun(void){
	sw_n_overflow++;
      92:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <sw_n_overflow>
      96:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <sw_n_overflow+0x1>
      9a:	01 96       	adiw	r24, 0x01	; 1
      9c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <sw_n_overflow+0x1>
      a0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <sw_n_overflow>
	SET_BIT(TIFR_Reg, 0);
      a4:	88 b7       	in	r24, 0x38	; 56
      a6:	81 60       	ori	r24, 0x01	; 1
      a8:	88 bf       	out	0x38, r24	; 56
      aa:	08 95       	ret

000000ac <button_INT_fun>:

	}
}

void button_INT_fun(void){
	if (INT_logical_state == RISING_EDGE) {
      ac:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <INT_logical_state>
      b0:	83 30       	cpi	r24, 0x03	; 3
      b2:	41 f4       	brne	.+16     	; 0xc4 <button_INT_fun+0x18>
		stopwatch_start(& stopwacth_timer);
      b4:	84 e6       	ldi	r24, 0x64	; 100
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	0e 94 94 06 	call	0xd28	; 0xd28 <stopwatch_start>
		INT_logical_state = FALLING_EDGE;
      bc:	82 e0       	ldi	r24, 0x02	; 2
      be:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <INT_logical_state>
      c2:	08 95       	ret
	}else if (INT_logical_state == FALLING_EDGE) {
      c4:	82 30       	cpi	r24, 0x02	; 2
      c6:	f1 f4       	brne	.+60     	; 0x104 <button_INT_fun+0x58>
		stopwatch_stop(& stopwacth_timer, & sw_timer_value);
      c8:	62 e7       	ldi	r22, 0x72	; 114
      ca:	70 e0       	ldi	r23, 0x00	; 0
      cc:	84 e6       	ldi	r24, 0x64	; 100
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <stopwatch_stop>
		if (sw_timer_value > 500); /* Do Nothing */
      d4:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
      d8:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
      dc:	85 3f       	cpi	r24, 0xF5	; 245
      de:	91 40       	sbci	r25, 0x01	; 1
      e0:	70 f4       	brcc	.+28     	; 0xfe <button_INT_fun+0x52>
		else {
			if(mode == PEDESTRIANS_MODE || cars_state == CARS_RED_STATE) return;
      e2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <mode>
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	69 f0       	breq	.+26     	; 0x104 <button_INT_fun+0x58>
      ea:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <cars_state>
      ee:	81 30       	cpi	r24, 0x01	; 1
      f0:	49 f0       	breq	.+18     	; 0x104 <button_INT_fun+0x58>
			timer_flag = FALSE;
      f2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timer_flag>
			mode = PEDESTRIANS_MODE;
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <mode>
			return;
      fc:	08 95       	ret
		}
		INT_logical_state = RISING_EDGE;
      fe:	83 e0       	ldi	r24, 0x03	; 3
     100:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <INT_logical_state>
     104:	08 95       	ret

00000106 <app_init>:
volatile ST_TIMER_t delay_timer = {TIMER1, PRESCALER_1024, NONE, NULLPTR};
volatile ST_TIMER_t stopwacth_timer = {TIMER0, PRESCALER_1024, OVF_MODE, &stopwacth_INT_fun};
volatile ST_EXT_INT_t interrupt = {INTERRUPT0, ANY_LOGICAL_CHANGE, & button_INT_fun};

void app_init() {
	LED_init(CARS, GREEN);
     106:	60 e0       	ldi	r22, 0x00	; 0
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	0e 94 99 01 	call	0x332	; 0x332 <LED_init>
	LED_init(CARS, YELLOW);
     10e:	61 e0       	ldi	r22, 0x01	; 1
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	0e 94 99 01 	call	0x332	; 0x332 <LED_init>
	LED_init(CARS, RED);
     116:	62 e0       	ldi	r22, 0x02	; 2
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	0e 94 99 01 	call	0x332	; 0x332 <LED_init>

	LED_init(PEDESTRIANS, GREEN);
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	0e 94 99 01 	call	0x332	; 0x332 <LED_init>
	LED_init(PEDESTRIANS, YELLOW);
     126:	61 e0       	ldi	r22, 0x01	; 1
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	0e 94 99 01 	call	0x332	; 0x332 <LED_init>
	LED_init(PEDESTRIANS, RED);
     12e:	62 e0       	ldi	r22, 0x02	; 2
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	0e 94 99 01 	call	0x332	; 0x332 <LED_init>

	LED_init(DEBUG_LED_PORT, DEBUG_LED_PIN);
     136:	62 e0       	ldi	r22, 0x02	; 2
     138:	82 e0       	ldi	r24, 0x02	; 2
     13a:	0e 94 99 01 	call	0x332	; 0x332 <LED_init>

	timer_init(& delay_timer);
     13e:	8a e6       	ldi	r24, 0x6A	; 106
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 96 04 	call	0x92c	; 0x92c <timer_init>
	timer_init(& stopwacth_timer);
     146:	84 e6       	ldi	r24, 0x64	; 100
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 96 04 	call	0x92c	; 0x92c <timer_init>

	EXT_INT_init(& interrupt);
     14e:	80 e6       	ldi	r24, 0x60	; 96
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 38 03 	call	0x670	; 0x670 <EXT_INT_init>
     156:	08 95       	ret

00000158 <blinking_leds>:
		}
		INT_logical_state = RISING_EDGE;
	}
}

void blinking_leds() {
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
	for(int i = 0; (i < 10); i++){
     160:	00 e0       	ldi	r16, 0x00	; 0
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	16 c0       	rjmp	.+44     	; 0x192 <blinking_leds+0x3a>
		LED_toggle(CARS, YELLOW);
     166:	61 e0       	ldi	r22, 0x01	; 1
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 c3 01 	call	0x386	; 0x386 <LED_toggle>
		LED_toggle(PEDESTRIANS, YELLOW);
     16e:	61 e0       	ldi	r22, 0x01	; 1
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	0e 94 c3 01 	call	0x386	; 0x386 <LED_toggle>
		delay_start(delay_timer.timerSelect, 500, delay_timer.prescaler);
     176:	ca e6       	ldi	r28, 0x6A	; 106
     178:	d0 e0       	ldi	r29, 0x00	; 0
     17a:	49 81       	ldd	r20, Y+1	; 0x01
     17c:	5a 81       	ldd	r21, Y+2	; 0x02
     17e:	88 81       	ld	r24, Y
     180:	64 ef       	ldi	r22, 0xF4	; 244
     182:	71 e0       	ldi	r23, 0x01	; 1
     184:	0e 94 ca 04 	call	0x994	; 0x994 <delay_start>
		delay_stop(delay_timer.timerSelect);
     188:	88 81       	ld	r24, Y
     18a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <delay_stop>
		INT_logical_state = RISING_EDGE;
	}
}

void blinking_leds() {
	for(int i = 0; (i < 10); i++){
     18e:	0f 5f       	subi	r16, 0xFF	; 255
     190:	1f 4f       	sbci	r17, 0xFF	; 255
     192:	0a 30       	cpi	r16, 0x0A	; 10
     194:	11 05       	cpc	r17, r1
     196:	3c f3       	brlt	.-50     	; 0x166 <blinking_leds+0xe>
		LED_toggle(CARS, YELLOW);
		LED_toggle(PEDESTRIANS, YELLOW);
		delay_start(delay_timer.timerSelect, 500, delay_timer.prescaler);
		delay_stop(delay_timer.timerSelect);
	}
}
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	1f 91       	pop	r17
     19e:	0f 91       	pop	r16
     1a0:	08 95       	ret

000001a2 <app_start>:
	EXT_INT_init(& interrupt);
}

void app_start() {
	while(1) {
		if (mode == CARS_MODE){
     1a2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <mode>
     1a6:	81 11       	cpse	r24, r1
     1a8:	6c c0       	rjmp	.+216    	; 0x282 <app_start+0xe0>
			LED_ON(DEBUG_LED_PORT, DEBUG_LED_PIN);
     1aa:	62 e0       	ldi	r22, 0x02	; 2
     1ac:	82 e0       	ldi	r24, 0x02	; 2
     1ae:	0e 94 a7 01 	call	0x34e	; 0x34e <LED_ON>

			LED_ON(CARS, GREEN);
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	0e 94 a7 01 	call	0x34e	; 0x34e <LED_ON>
			LED_OFF(CARS, YELLOW);
     1ba:	61 e0       	ldi	r22, 0x01	; 1
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
			LED_OFF(CARS, RED);
     1c2:	62 e0       	ldi	r22, 0x02	; 2
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>

			LED_OFF(PEDESTRIANS, GREEN);
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
			LED_OFF(PEDESTRIANS, YELLOW);
     1d2:	61 e0       	ldi	r22, 0x01	; 1
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
			LED_ON(PEDESTRIANS, RED);
     1da:	62 e0       	ldi	r22, 0x02	; 2
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	0e 94 a7 01 	call	0x34e	; 0x34e <LED_ON>

			delay_start(delay_timer.timerSelect, 5000, delay_timer.prescaler);
     1e2:	ca e6       	ldi	r28, 0x6A	; 106
     1e4:	d0 e0       	ldi	r29, 0x00	; 0
     1e6:	49 81       	ldd	r20, Y+1	; 0x01
     1e8:	5a 81       	ldd	r21, Y+2	; 0x02
     1ea:	88 81       	ld	r24, Y
     1ec:	68 e8       	ldi	r22, 0x88	; 136
     1ee:	73 e1       	ldi	r23, 0x13	; 19
     1f0:	0e 94 ca 04 	call	0x994	; 0x994 <delay_start>
			delay_stop(delay_timer.timerSelect);
     1f4:	88 81       	ld	r24, Y
     1f6:	0e 94 63 06 	call	0xcc6	; 0xcc6 <delay_stop>
			
			LED_OFF(CARS, GREEN);
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
			LED_OFF(PEDESTRIANS, RED);
     202:	62 e0       	ldi	r22, 0x02	; 2
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>

			if (mode != CARS_MODE) continue;
     20a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <mode>
     20e:	81 11       	cpse	r24, r1
     210:	c8 cf       	rjmp	.-112    	; 0x1a2 <app_start>

			cars_state = CARS_RED_STATE;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <cars_state>

			blinking_leds();
     218:	0e 94 ac 00 	call	0x158	; 0x158 <blinking_leds>

			LED_OFF(CARS, GREEN);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
			LED_OFF(CARS, YELLOW);
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
			LED_ON(CARS, RED);
     22c:	62 e0       	ldi	r22, 0x02	; 2
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	0e 94 a7 01 	call	0x34e	; 0x34e <LED_ON>

			LED_ON(PEDESTRIANS, GREEN);
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	0e 94 a7 01 	call	0x34e	; 0x34e <LED_ON>
			LED_OFF(PEDESTRIANS, YELLOW);
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
			LED_OFF(PEDESTRIANS, RED);
     244:	62 e0       	ldi	r22, 0x02	; 2
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>

			delay_start(delay_timer.timerSelect, 5000, delay_timer.prescaler);
     24c:	49 81       	ldd	r20, Y+1	; 0x01
     24e:	5a 81       	ldd	r21, Y+2	; 0x02
     250:	88 81       	ld	r24, Y
     252:	68 e8       	ldi	r22, 0x88	; 136
     254:	73 e1       	ldi	r23, 0x13	; 19
     256:	0e 94 ca 04 	call	0x994	; 0x994 <delay_start>
			delay_stop(delay_timer.timerSelect);
     25a:	88 81       	ld	r24, Y
     25c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <delay_stop>
			
			LED_OFF(CARS, RED);
     260:	62 e0       	ldi	r22, 0x02	; 2
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
			LED_OFF(PEDESTRIANS, GREEN);
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
			
			cars_state = CARS_GREEN_STATE;
     270:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <cars_state>

			blinking_leds();
     274:	0e 94 ac 00 	call	0x158	; 0x158 <blinking_leds>
			
			if (mode != CARS_MODE) continue;
     278:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <mode>
     27c:	81 11       	cpse	r24, r1
     27e:	91 cf       	rjmp	.-222    	; 0x1a2 <app_start>
     280:	53 c0       	rjmp	.+166    	; 0x328 <app_start+0x186>
			
		} else {
			if (cars_state == CARS_GREEN_STATE) {
     282:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <cars_state>
     286:	81 11       	cpse	r24, r1
     288:	4f c0       	rjmp	.+158    	; 0x328 <app_start+0x186>
				LED_OFF(DEBUG_LED_PORT, DEBUG_LED_PIN);
     28a:	62 e0       	ldi	r22, 0x02	; 2
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>

				LED_OFF(CARS, GREEN);
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
				LED_OFF(CARS, YELLOW);
     29a:	61 e0       	ldi	r22, 0x01	; 1
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
				LED_OFF(CARS, RED);
     2a2:	62 e0       	ldi	r22, 0x02	; 2
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>

				LED_OFF(PEDESTRIANS, GREEN);
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
				LED_OFF(PEDESTRIANS, YELLOW);
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
				LED_OFF(PEDESTRIANS, RED);
     2ba:	62 e0       	ldi	r22, 0x02	; 2
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>

				blinking_leds();
     2c2:	0e 94 ac 00 	call	0x158	; 0x158 <blinking_leds>

				LED_OFF(CARS, GREEN);
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
				LED_OFF(CARS, YELLOW);
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
				LED_ON(CARS, RED);
     2d6:	62 e0       	ldi	r22, 0x02	; 2
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 a7 01 	call	0x34e	; 0x34e <LED_ON>

				LED_ON(PEDESTRIANS, GREEN);
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	0e 94 a7 01 	call	0x34e	; 0x34e <LED_ON>
				LED_OFF(PEDESTRIANS, YELLOW);
     2e6:	61 e0       	ldi	r22, 0x01	; 1
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
				LED_OFF(PEDESTRIANS, RED);
     2ee:	62 e0       	ldi	r22, 0x02	; 2
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>

				cars_state = CARS_RED_STATE;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <cars_state>

				delay_start(delay_timer.timerSelect, 5000, delay_timer.prescaler);
     2fc:	ca e6       	ldi	r28, 0x6A	; 106
     2fe:	d0 e0       	ldi	r29, 0x00	; 0
     300:	49 81       	ldd	r20, Y+1	; 0x01
     302:	5a 81       	ldd	r21, Y+2	; 0x02
     304:	88 81       	ld	r24, Y
     306:	68 e8       	ldi	r22, 0x88	; 136
     308:	73 e1       	ldi	r23, 0x13	; 19
     30a:	0e 94 ca 04 	call	0x994	; 0x994 <delay_start>
				delay_stop(delay_timer.timerSelect);
     30e:	88 81       	ld	r24, Y
     310:	0e 94 63 06 	call	0xcc6	; 0xcc6 <delay_stop>

				LED_OFF(CARS, RED);
     314:	62 e0       	ldi	r22, 0x02	; 2
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>
				LED_OFF(PEDESTRIANS, GREEN);
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_OFF>

				blinking_leds();
     324:	0e 94 ac 00 	call	0x158	; 0x158 <blinking_leds>
						
			}
		}
		mode = CARS_MODE;
     328:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <mode>
		cars_state = CARS_GREEN_STATE;
     32c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <cars_state>
     330:	38 cf       	rjmp	.-400    	; 0x1a2 <app_start>

00000332 <LED_init>:
#include "led.h"

EN_LED_ERROR LED_init(uint8_t ledPort, uint8_t ledPin){
	EN_DIO_ERROR error;

	error = DIO_init(ledPort, ledPin, OUTPUT);
     332:	41 e0       	ldi	r20, 0x01	; 1
     334:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_init>

	switch (error) {
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	19 f0       	breq	.+6      	; 0x342 <LED_init+0x10>
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	29 f0       	breq	.+10     	; 0x34a <LED_init+0x18>
     340:	02 c0       	rjmp	.+4      	; 0x346 <LED_init+0x14>
		case INVALID_PORT: return INVALID_LED_PORT;
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	08 95       	ret
		case INVALID_PIN: return INVALID_LED_PIN;
		default: return LED_OK;
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	08 95       	ret

	error = DIO_init(ledPort, ledPin, OUTPUT);

	switch (error) {
		case INVALID_PORT: return INVALID_LED_PORT;
		case INVALID_PIN: return INVALID_LED_PIN;
     34a:	82 e0       	ldi	r24, 0x02	; 2
		default: return LED_OK;
	}
}
     34c:	08 95       	ret

0000034e <LED_ON>:

EN_LED_ERROR LED_ON(uint8_t ledPort, uint8_t ledPin){
	EN_DIO_ERROR error;

	error = DIO_write(ledPort, ledPin, HIGH);
     34e:	41 e0       	ldi	r20, 0x01	; 1
     350:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_write>

	switch (error) {
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	19 f0       	breq	.+6      	; 0x35e <LED_ON+0x10>
     358:	82 30       	cpi	r24, 0x02	; 2
     35a:	29 f0       	breq	.+10     	; 0x366 <LED_ON+0x18>
     35c:	02 c0       	rjmp	.+4      	; 0x362 <LED_ON+0x14>
		case INVALID_PORT: return INVALID_LED_PORT;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	08 95       	ret
		case INVALID_PIN: return INVALID_LED_PIN;
		default: return LED_OK;
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	08 95       	ret

	error = DIO_write(ledPort, ledPin, HIGH);

	switch (error) {
		case INVALID_PORT: return INVALID_LED_PORT;
		case INVALID_PIN: return INVALID_LED_PIN;
     366:	82 e0       	ldi	r24, 0x02	; 2
		default: return LED_OK;
	}
}
     368:	08 95       	ret

0000036a <LED_OFF>:

EN_LED_ERROR LED_OFF(uint8_t ledPort, uint8_t ledPin){
	EN_DIO_ERROR error;

	error = DIO_write(ledPort, ledPin, LOW);
     36a:	40 e0       	ldi	r20, 0x00	; 0
     36c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <DIO_write>

	switch (error) {
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	19 f0       	breq	.+6      	; 0x37a <LED_OFF+0x10>
     374:	82 30       	cpi	r24, 0x02	; 2
     376:	29 f0       	breq	.+10     	; 0x382 <LED_OFF+0x18>
     378:	02 c0       	rjmp	.+4      	; 0x37e <LED_OFF+0x14>
		case INVALID_PORT: return INVALID_LED_PORT;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	08 95       	ret
		case INVALID_PIN: return INVALID_LED_PIN;
		default: return LED_OK;
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	08 95       	ret

	error = DIO_write(ledPort, ledPin, LOW);

	switch (error) {
		case INVALID_PORT: return INVALID_LED_PORT;
		case INVALID_PIN: return INVALID_LED_PIN;
     382:	82 e0       	ldi	r24, 0x02	; 2
		default: return LED_OK;
	}
}
     384:	08 95       	ret

00000386 <LED_toggle>:

EN_LED_ERROR LED_toggle(uint8_t ledPort, uint8_t ledPin){
	EN_DIO_ERROR error;

	error = DIO_toggle(ledPort, ledPin);
     386:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DIO_toggle>

	switch (error) {
     38a:	81 30       	cpi	r24, 0x01	; 1
     38c:	19 f0       	breq	.+6      	; 0x394 <LED_toggle+0xe>
     38e:	82 30       	cpi	r24, 0x02	; 2
     390:	29 f0       	breq	.+10     	; 0x39c <LED_toggle+0x16>
     392:	02 c0       	rjmp	.+4      	; 0x398 <LED_toggle+0x12>
		case INVALID_PORT: return INVALID_LED_PORT;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	08 95       	ret
		case INVALID_PIN: return INVALID_LED_PIN;
		default: return LED_OK;
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	08 95       	ret

	error = DIO_toggle(ledPort, ledPin);

	switch (error) {
		case INVALID_PORT: return INVALID_LED_PORT;
		case INVALID_PIN: return INVALID_LED_PIN;
     39c:	82 e0       	ldi	r24, 0x02	; 2
		default: return LED_OK;
	}
     39e:	08 95       	ret

000003a0 <main>:
#include "./Application/app.h"

int main(void) {
	
    /* Replace with your application code */
	app_init();
     3a0:	0e 94 83 00 	call	0x106	; 0x106 <app_init>
	app_start();
     3a4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <app_start>
  
}
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	08 95       	ret

000003ae <DIO_init>:

#include "DIO.h"

EN_DIO_ERROR DIO_init(uint8_t port, uint8_t pin, uint8_t direction){
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7) {
     3ae:	68 30       	cpi	r22, 0x08	; 8
     3b0:	08 f0       	brcs	.+2      	; 0x3b4 <DIO_init+0x6>
     3b2:	78 c0       	rjmp	.+240    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
		if (direction == OUTPUT) {
     3b4:	41 30       	cpi	r20, 0x01	; 1
     3b6:	c1 f5       	brne	.+112    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			/* Check on the Required PORT Number */
			switch (port) {
     3b8:	81 30       	cpi	r24, 0x01	; 1
     3ba:	91 f0       	breq	.+36     	; 0x3e0 <DIO_init+0x32>
     3bc:	28 f0       	brcs	.+10     	; 0x3c8 <DIO_init+0x1a>
     3be:	82 30       	cpi	r24, 0x02	; 2
     3c0:	d9 f0       	breq	.+54     	; 0x3f8 <DIO_init+0x4a>
     3c2:	83 30       	cpi	r24, 0x03	; 3
     3c4:	29 f1       	breq	.+74     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     3c6:	70 c0       	rjmp	.+224    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
				case PORTA: SET_BIT(DDRA_Reg, pin); break;
     3c8:	2a b3       	in	r18, 0x1a	; 26
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_init+0x26>
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	6a 95       	dec	r22
     3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_init+0x22>
     3d8:	82 2b       	or	r24, r18
     3da:	8a bb       	out	0x1a, r24	; 26
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     3dc:	80 e0       	ldi	r24, 0x00	; 0
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7) {
		if (direction == OUTPUT) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(DDRA_Reg, pin); break;
     3de:	08 95       	ret
				case PORTB: SET_BIT(DDRB_Reg, pin); break;
     3e0:	27 b3       	in	r18, 0x17	; 23
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_init+0x3e>
     3e8:	88 0f       	add	r24, r24
     3ea:	99 1f       	adc	r25, r25
     3ec:	6a 95       	dec	r22
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_init+0x3a>
     3f0:	82 2b       	or	r24, r18
     3f2:	87 bb       	out	0x17, r24	; 23
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     3f4:	80 e0       	ldi	r24, 0x00	; 0
	if (pin <= PIN7) {
		if (direction == OUTPUT) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(DDRA_Reg, pin); break;
				case PORTB: SET_BIT(DDRB_Reg, pin); break;
     3f6:	08 95       	ret
				case PORTC: SET_BIT(DDRC_Reg, pin); break;
     3f8:	24 b3       	in	r18, 0x14	; 20
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     400:	88 0f       	add	r24, r24
     402:	99 1f       	adc	r25, r25
     404:	6a 95       	dec	r22
     406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
     408:	82 2b       	or	r24, r18
     40a:	84 bb       	out	0x14, r24	; 20
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     40c:	80 e0       	ldi	r24, 0x00	; 0
		if (direction == OUTPUT) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(DDRA_Reg, pin); break;
				case PORTB: SET_BIT(DDRB_Reg, pin); break;
				case PORTC: SET_BIT(DDRC_Reg, pin); break;
     40e:	08 95       	ret
				case PORTD: SET_BIT(DDRD_Reg, pin); break;
     410:	21 b3       	in	r18, 0x11	; 17
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	6a 95       	dec	r22
     41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     420:	82 2b       	or	r24, r18
     422:	81 bb       	out	0x11, r24	; 17
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     424:	80 e0       	ldi	r24, 0x00	; 0
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(DDRA_Reg, pin); break;
				case PORTB: SET_BIT(DDRB_Reg, pin); break;
				case PORTC: SET_BIT(DDRC_Reg, pin); break;
				case PORTD: SET_BIT(DDRD_Reg, pin); break;
     426:	08 95       	ret
				default: return INVALID_PORT;
			}
		} else if (direction == INPUT) {
     428:	41 11       	cpse	r20, r1
     42a:	40 c0       	rjmp	.+128    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
			/* Check on the Required PORT Number */
			switch (port) {
     42c:	81 30       	cpi	r24, 0x01	; 1
     42e:	99 f0       	breq	.+38     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     430:	28 f0       	brcs	.+10     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     432:	82 30       	cpi	r24, 0x02	; 2
     434:	e9 f0       	breq	.+58     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     436:	83 30       	cpi	r24, 0x03	; 3
     438:	41 f1       	breq	.+80     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     43a:	3a c0       	rjmp	.+116    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
				case PORTA: CLR_BIT(DDRA_Reg, pin); break;
     43c:	2a b3       	in	r18, 0x1a	; 26
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     444:	88 0f       	add	r24, r24
     446:	99 1f       	adc	r25, r25
     448:	6a 95       	dec	r22
     44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     44c:	80 95       	com	r24
     44e:	82 23       	and	r24, r18
     450:	8a bb       	out	0x1a, r24	; 26
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     452:	80 e0       	ldi	r24, 0x00	; 0
				default: return INVALID_PORT;
			}
		} else if (direction == INPUT) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(DDRA_Reg, pin); break;
     454:	08 95       	ret
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
     456:	27 b3       	in	r18, 0x17	; 23
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	6a 95       	dec	r22
     464:	e2 f7       	brpl	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     466:	80 95       	com	r24
     468:	82 23       	and	r24, r18
     46a:	87 bb       	out	0x17, r24	; 23
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     46c:	80 e0       	ldi	r24, 0x00	; 0
			}
		} else if (direction == INPUT) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(DDRA_Reg, pin); break;
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
     46e:	08 95       	ret
				case PORTC: CLR_BIT(DDRC_Reg, pin); break;
     470:	24 b3       	in	r18, 0x14	; 20
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	02 c0       	rjmp	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	6a 95       	dec	r22
     47e:	e2 f7       	brpl	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     480:	80 95       	com	r24
     482:	82 23       	and	r24, r18
     484:	84 bb       	out	0x14, r24	; 20
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     486:	80 e0       	ldi	r24, 0x00	; 0
		} else if (direction == INPUT) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(DDRA_Reg, pin); break;
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
				case PORTC: CLR_BIT(DDRC_Reg, pin); break;
     488:	08 95       	ret
				case PORTD: CLR_BIT(DDRD_Reg, pin); break;
     48a:	21 b3       	in	r18, 0x11	; 17
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	02 c0       	rjmp	.+4      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	6a 95       	dec	r22
     498:	e2 f7       	brpl	.-8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     49a:	80 95       	com	r24
     49c:	82 23       	and	r24, r18
     49e:	81 bb       	out	0x11, r24	; 17
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     4a0:	80 e0       	ldi	r24, 0x00	; 0
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(DDRA_Reg, pin); break;
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
				case PORTC: CLR_BIT(DDRC_Reg, pin); break;
				case PORTD: CLR_BIT(DDRD_Reg, pin); break;
     4a2:	08 95       	ret
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	08 95       	ret
			switch (port) {
				case PORTA: SET_BIT(DDRA_Reg, pin); break;
				case PORTB: SET_BIT(DDRB_Reg, pin); break;
				case PORTC: SET_BIT(DDRC_Reg, pin); break;
				case PORTD: SET_BIT(DDRD_Reg, pin); break;
				default: return INVALID_PORT;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	08 95       	ret
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
				case PORTC: CLR_BIT(DDRC_Reg, pin); break;
				case PORTD: CLR_BIT(DDRD_Reg, pin); break;
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	08 95       	ret
			switch (port) {
				case PORTA: CLR_BIT(DDRA_Reg, pin); break;
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
				case PORTC: CLR_BIT(DDRC_Reg, pin); break;
				case PORTD: CLR_BIT(DDRD_Reg, pin); break;
				default: return INVALID_PORT;
     4b0:	81 e0       	ldi	r24, 0x01	; 1
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
}
     4b2:	08 95       	ret

000004b4 <DIO_write>:

EN_DIO_ERROR DIO_write(uint8_t port, uint8_t pin, uint8_t value){
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7) {
     4b4:	68 30       	cpi	r22, 0x08	; 8
     4b6:	08 f0       	brcs	.+2      	; 0x4ba <DIO_write+0x6>
     4b8:	78 c0       	rjmp	.+240    	; 0x5aa <DIO_write+0xf6>
		if (value == HIGH) {
     4ba:	41 30       	cpi	r20, 0x01	; 1
     4bc:	c1 f5       	brne	.+112    	; 0x52e <DIO_write+0x7a>
			/* Check on the Required PORT Number */
			switch (port) {
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	91 f0       	breq	.+36     	; 0x4e6 <DIO_write+0x32>
     4c2:	28 f0       	brcs	.+10     	; 0x4ce <DIO_write+0x1a>
     4c4:	82 30       	cpi	r24, 0x02	; 2
     4c6:	d9 f0       	breq	.+54     	; 0x4fe <DIO_write+0x4a>
     4c8:	83 30       	cpi	r24, 0x03	; 3
     4ca:	29 f1       	breq	.+74     	; 0x516 <DIO_write+0x62>
     4cc:	70 c0       	rjmp	.+224    	; 0x5ae <DIO_write+0xfa>
				case PORTA: SET_BIT(PORTA_Reg, pin); break;
     4ce:	2b b3       	in	r18, 0x1b	; 27
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_write+0x26>
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	6a 95       	dec	r22
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_write+0x22>
     4de:	82 2b       	or	r24, r18
     4e0:	8b bb       	out	0x1b, r24	; 27
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     4e2:	80 e0       	ldi	r24, 0x00	; 0
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7) {
		if (value == HIGH) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(PORTA_Reg, pin); break;
     4e4:	08 95       	ret
				case PORTB: SET_BIT(PORTB_Reg, pin); break;
     4e6:	28 b3       	in	r18, 0x18	; 24
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_write+0x3e>
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	6a 95       	dec	r22
     4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_write+0x3a>
     4f6:	82 2b       	or	r24, r18
     4f8:	88 bb       	out	0x18, r24	; 24
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     4fa:	80 e0       	ldi	r24, 0x00	; 0
	if (pin <= PIN7) {
		if (value == HIGH) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(PORTA_Reg, pin); break;
				case PORTB: SET_BIT(PORTB_Reg, pin); break;
     4fc:	08 95       	ret
				case PORTC: SET_BIT(PORTC_Reg, pin); break;
     4fe:	25 b3       	in	r18, 0x15	; 21
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_write+0x56>
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	6a 95       	dec	r22
     50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_write+0x52>
     50e:	82 2b       	or	r24, r18
     510:	85 bb       	out	0x15, r24	; 21
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     512:	80 e0       	ldi	r24, 0x00	; 0
		if (value == HIGH) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(PORTA_Reg, pin); break;
				case PORTB: SET_BIT(PORTB_Reg, pin); break;
				case PORTC: SET_BIT(PORTC_Reg, pin); break;
     514:	08 95       	ret
				case PORTD: SET_BIT(PORTD_Reg, pin); break;
     516:	22 b3       	in	r18, 0x12	; 18
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_write+0x6e>
     51e:	88 0f       	add	r24, r24
     520:	99 1f       	adc	r25, r25
     522:	6a 95       	dec	r22
     524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_write+0x6a>
     526:	82 2b       	or	r24, r18
     528:	82 bb       	out	0x12, r24	; 18
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     52a:	80 e0       	ldi	r24, 0x00	; 0
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(PORTA_Reg, pin); break;
				case PORTB: SET_BIT(PORTB_Reg, pin); break;
				case PORTC: SET_BIT(PORTC_Reg, pin); break;
				case PORTD: SET_BIT(PORTD_Reg, pin); break;
     52c:	08 95       	ret
				default: return INVALID_PORT;

			}	
		} else if (value == LOW) {
     52e:	41 11       	cpse	r20, r1
     530:	40 c0       	rjmp	.+128    	; 0x5b2 <DIO_write+0xfe>
			/* Check on the Required PORT Number */
			switch (port) {
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	99 f0       	breq	.+38     	; 0x55c <DIO_write+0xa8>
     536:	28 f0       	brcs	.+10     	; 0x542 <DIO_write+0x8e>
     538:	82 30       	cpi	r24, 0x02	; 2
     53a:	e9 f0       	breq	.+58     	; 0x576 <DIO_write+0xc2>
     53c:	83 30       	cpi	r24, 0x03	; 3
     53e:	41 f1       	breq	.+80     	; 0x590 <DIO_write+0xdc>
     540:	3a c0       	rjmp	.+116    	; 0x5b6 <DIO_write+0x102>
				case PORTA: CLR_BIT(PORTA_Reg, pin); break;
     542:	2b b3       	in	r18, 0x1b	; 27
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_write+0x9a>
     54a:	88 0f       	add	r24, r24
     54c:	99 1f       	adc	r25, r25
     54e:	6a 95       	dec	r22
     550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_write+0x96>
     552:	80 95       	com	r24
     554:	82 23       	and	r24, r18
     556:	8b bb       	out	0x1b, r24	; 27
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     558:	80 e0       	ldi	r24, 0x00	; 0

			}	
		} else if (value == LOW) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(PORTA_Reg, pin); break;
     55a:	08 95       	ret
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
     55c:	28 b3       	in	r18, 0x18	; 24
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_write+0xb4>
     564:	88 0f       	add	r24, r24
     566:	99 1f       	adc	r25, r25
     568:	6a 95       	dec	r22
     56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_write+0xb0>
     56c:	80 95       	com	r24
     56e:	82 23       	and	r24, r18
     570:	88 bb       	out	0x18, r24	; 24
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     572:	80 e0       	ldi	r24, 0x00	; 0
			}	
		} else if (value == LOW) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(PORTA_Reg, pin); break;
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
     574:	08 95       	ret
				case PORTC: CLR_BIT(PORTC_Reg, pin); break;
     576:	25 b3       	in	r18, 0x15	; 21
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_write+0xce>
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	6a 95       	dec	r22
     584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_write+0xca>
     586:	80 95       	com	r24
     588:	82 23       	and	r24, r18
     58a:	85 bb       	out	0x15, r24	; 21
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     58c:	80 e0       	ldi	r24, 0x00	; 0
		} else if (value == LOW) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(PORTA_Reg, pin); break;
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
				case PORTC: CLR_BIT(PORTC_Reg, pin); break;
     58e:	08 95       	ret
				case PORTD: CLR_BIT(PORTD_Reg, pin); break;
     590:	22 b3       	in	r18, 0x12	; 18
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_write+0xe8>
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	6a 95       	dec	r22
     59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_write+0xe4>
     5a0:	80 95       	com	r24
     5a2:	82 23       	and	r24, r18
     5a4:	82 bb       	out	0x12, r24	; 18
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(PORTA_Reg, pin); break;
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
				case PORTC: CLR_BIT(PORTC_Reg, pin); break;
				case PORTD: CLR_BIT(PORTD_Reg, pin); break;
     5a8:	08 95       	ret
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	08 95       	ret
			switch (port) {
				case PORTA: SET_BIT(PORTA_Reg, pin); break;
				case PORTB: SET_BIT(PORTB_Reg, pin); break;
				case PORTC: SET_BIT(PORTC_Reg, pin); break;
				case PORTD: SET_BIT(PORTD_Reg, pin); break;
				default: return INVALID_PORT;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	08 95       	ret
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
				case PORTC: CLR_BIT(PORTC_Reg, pin); break;
				case PORTD: CLR_BIT(PORTD_Reg, pin); break;
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
     5b2:	84 e0       	ldi	r24, 0x04	; 4
     5b4:	08 95       	ret
			switch (port) {
				case PORTA: CLR_BIT(PORTA_Reg, pin); break;
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
				case PORTC: CLR_BIT(PORTC_Reg, pin); break;
				case PORTD: CLR_BIT(PORTD_Reg, pin); break;
				default: return INVALID_PORT;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
}
     5b8:	08 95       	ret

000005ba <DIO_toggle>:

EN_DIO_ERROR DIO_toggle(uint8_t port, uint8_t pin){
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7){
     5ba:	68 30       	cpi	r22, 0x08	; 8
     5bc:	c0 f5       	brcc	.+112    	; 0x62e <DIO_toggle+0x74>
		/* Check on the Required PORT Number */
		switch(port){
     5be:	81 30       	cpi	r24, 0x01	; 1
     5c0:	91 f0       	breq	.+36     	; 0x5e6 <DIO_toggle+0x2c>
     5c2:	28 f0       	brcs	.+10     	; 0x5ce <DIO_toggle+0x14>
     5c4:	82 30       	cpi	r24, 0x02	; 2
     5c6:	d9 f0       	breq	.+54     	; 0x5fe <DIO_toggle+0x44>
     5c8:	83 30       	cpi	r24, 0x03	; 3
     5ca:	29 f1       	breq	.+74     	; 0x616 <DIO_toggle+0x5c>
     5cc:	32 c0       	rjmp	.+100    	; 0x632 <DIO_toggle+0x78>
			case PORTA: TOG_BIT(PORTA_Reg, pin); break;
     5ce:	2b b3       	in	r18, 0x1b	; 27
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_toggle+0x20>
     5d6:	88 0f       	add	r24, r24
     5d8:	99 1f       	adc	r25, r25
     5da:	6a 95       	dec	r22
     5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_toggle+0x1c>
     5de:	82 27       	eor	r24, r18
     5e0:	8b bb       	out	0x1b, r24	; 27
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
			default: return INVALID_PORT;
		}
	} else return INVALID_PIN;

	return DIO_OK;
     5e2:	80 e0       	ldi	r24, 0x00	; 0
EN_DIO_ERROR DIO_toggle(uint8_t port, uint8_t pin){
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7){
		/* Check on the Required PORT Number */
		switch(port){
			case PORTA: TOG_BIT(PORTA_Reg, pin); break;
     5e4:	08 95       	ret
			case PORTB: TOG_BIT(PORTB_Reg, pin); break;
     5e6:	28 b3       	in	r18, 0x18	; 24
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_toggle+0x38>
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	6a 95       	dec	r22
     5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_toggle+0x34>
     5f6:	82 27       	eor	r24, r18
     5f8:	88 bb       	out	0x18, r24	; 24
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
			default: return INVALID_PORT;
		}
	} else return INVALID_PIN;

	return DIO_OK;
     5fa:	80 e0       	ldi	r24, 0x00	; 0
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7){
		/* Check on the Required PORT Number */
		switch(port){
			case PORTA: TOG_BIT(PORTA_Reg, pin); break;
			case PORTB: TOG_BIT(PORTB_Reg, pin); break;
     5fc:	08 95       	ret
			case PORTC: TOG_BIT(PORTC_Reg, pin); break;
     5fe:	25 b3       	in	r18, 0x15	; 21
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_toggle+0x50>
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	6a 95       	dec	r22
     60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_toggle+0x4c>
     60e:	82 27       	eor	r24, r18
     610:	85 bb       	out	0x15, r24	; 21
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
			default: return INVALID_PORT;
		}
	} else return INVALID_PIN;

	return DIO_OK;
     612:	80 e0       	ldi	r24, 0x00	; 0
	if (pin <= PIN7){
		/* Check on the Required PORT Number */
		switch(port){
			case PORTA: TOG_BIT(PORTA_Reg, pin); break;
			case PORTB: TOG_BIT(PORTB_Reg, pin); break;
			case PORTC: TOG_BIT(PORTC_Reg, pin); break;
     614:	08 95       	ret
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
     616:	22 b3       	in	r18, 0x12	; 18
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_toggle+0x68>
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	6a 95       	dec	r22
     624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_toggle+0x64>
     626:	82 27       	eor	r24, r18
     628:	82 bb       	out	0x12, r24	; 18
			default: return INVALID_PORT;
		}
	} else return INVALID_PIN;

	return DIO_OK;
     62a:	80 e0       	ldi	r24, 0x00	; 0
		/* Check on the Required PORT Number */
		switch(port){
			case PORTA: TOG_BIT(PORTA_Reg, pin); break;
			case PORTB: TOG_BIT(PORTB_Reg, pin); break;
			case PORTC: TOG_BIT(PORTC_Reg, pin); break;
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
     62c:	08 95       	ret
			default: return INVALID_PORT;
		}
	} else return INVALID_PIN;
     62e:	82 e0       	ldi	r24, 0x02	; 2
     630:	08 95       	ret
		switch(port){
			case PORTA: TOG_BIT(PORTA_Reg, pin); break;
			case PORTB: TOG_BIT(PORTB_Reg, pin); break;
			case PORTC: TOG_BIT(PORTC_Reg, pin); break;
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
			default: return INVALID_PORT;
     632:	81 e0       	ldi	r24, 0x01	; 1
		}
	} else return INVALID_PIN;

	return DIO_OK;
}
     634:	08 95       	ret

00000636 <set_INT_FUN>:
static void (* EXT_INT1_PTR_TO_FUN) (void) = NULLPTR;
static void (* EXT_INT2_PTR_TO_FUN) (void) = NULLPTR;

//////////////////////////// private function ////////////////////////////

void set_INT_FUN(ST_EXT_INT_t * interrupt){
     636:	fc 01       	movw	r30, r24
	switch (interrupt->interruptPinSelect) {
     638:	90 81       	ld	r25, Z
     63a:	91 30       	cpi	r25, 0x01	; 1
     63c:	59 f0       	breq	.+22     	; 0x654 <set_INT_FUN+0x1e>
     63e:	18 f0       	brcs	.+6      	; 0x646 <set_INT_FUN+0x10>
     640:	92 30       	cpi	r25, 0x02	; 2
     642:	79 f0       	breq	.+30     	; 0x662 <set_INT_FUN+0x2c>
     644:	08 95       	ret
		case INTERRUPT0:
		EXT_INT0_PTR_TO_FUN = interrupt->callbackFunction;
     646:	82 81       	ldd	r24, Z+2	; 0x02
     648:	93 81       	ldd	r25, Z+3	; 0x03
     64a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <EXT_INT0_PTR_TO_FUN+0x1>
     64e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <EXT_INT0_PTR_TO_FUN>
		break;
     652:	08 95       	ret
		case INTERRUPT1:
		EXT_INT1_PTR_TO_FUN = interrupt->callbackFunction;
     654:	82 81       	ldd	r24, Z+2	; 0x02
     656:	93 81       	ldd	r25, Z+3	; 0x03
     658:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <EXT_INT1_PTR_TO_FUN+0x1>
     65c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <EXT_INT1_PTR_TO_FUN>
		break;
     660:	08 95       	ret
		case INTERRUPT2:
		EXT_INT2_PTR_TO_FUN = interrupt->callbackFunction;
     662:	82 81       	ldd	r24, Z+2	; 0x02
     664:	93 81       	ldd	r25, Z+3	; 0x03
     666:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <EXT_INT2_PTR_TO_FUN+0x1>
     66a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <EXT_INT2_PTR_TO_FUN>
     66e:	08 95       	ret

00000670 <EXT_INT_init>:
//////////////////////////// public functions ////////////////////////////

EN_INTERRUPT_ERROR EXT_INT_init(ST_EXT_INT_t * interrupt){

    /* setting the global interrupt flag */
    sei();
     670:	78 94       	sei

    /* Make sure that the interrupt is in the valid range */
    switch (interrupt->interruptPinSelect) {
     672:	fc 01       	movw	r30, r24
     674:	20 81       	ld	r18, Z
     676:	21 30       	cpi	r18, 0x01	; 1
     678:	09 f1       	breq	.+66     	; 0x6bc <EXT_INT_init+0x4c>
     67a:	18 f0       	brcs	.+6      	; 0x682 <EXT_INT_init+0x12>
     67c:	22 30       	cpi	r18, 0x02	; 2
     67e:	d9 f1       	breq	.+118    	; 0x6f6 <EXT_INT_init+0x86>
     680:	4e c0       	rjmp	.+156    	; 0x71e <EXT_INT_init+0xae>
        case INTERRUPT0:
            SET_BIT(GICR_Reg, 6); // activating interrupt 0
     682:	2b b7       	in	r18, 0x3b	; 59
     684:	20 64       	ori	r18, 0x40	; 64
     686:	2b bf       	out	0x3b, r18	; 59
            switch (interrupt->senseControl) {
     688:	fc 01       	movw	r30, r24
     68a:	21 81       	ldd	r18, Z+1	; 0x01
     68c:	21 30       	cpi	r18, 0x01	; 1
     68e:	51 f0       	breq	.+20     	; 0x6a4 <EXT_INT_init+0x34>
     690:	28 f0       	brcs	.+10     	; 0x69c <EXT_INT_init+0x2c>
     692:	22 30       	cpi	r18, 0x02	; 2
     694:	59 f0       	breq	.+22     	; 0x6ac <EXT_INT_init+0x3c>
     696:	23 30       	cpi	r18, 0x03	; 3
     698:	69 f0       	breq	.+26     	; 0x6b4 <EXT_INT_init+0x44>
     69a:	43 c0       	rjmp	.+134    	; 0x722 <EXT_INT_init+0xb2>
                case LOW_LEVEL: MCUCR_Reg &= 0xFC; break;
     69c:	25 b7       	in	r18, 0x35	; 53
     69e:	2c 7f       	andi	r18, 0xFC	; 252
     6a0:	25 bf       	out	0x35, r18	; 53
     6a2:	39 c0       	rjmp	.+114    	; 0x716 <EXT_INT_init+0xa6>
                case ANY_LOGICAL_CHANGE: SET_BIT(MCUCR_Reg, 0); break;
     6a4:	25 b7       	in	r18, 0x35	; 53
     6a6:	21 60       	ori	r18, 0x01	; 1
     6a8:	25 bf       	out	0x35, r18	; 53
     6aa:	35 c0       	rjmp	.+106    	; 0x716 <EXT_INT_init+0xa6>
                case FALLING_EDGE: SET_BIT(MCUCR_Reg, 1); break;
     6ac:	25 b7       	in	r18, 0x35	; 53
     6ae:	22 60       	ori	r18, 0x02	; 2
     6b0:	25 bf       	out	0x35, r18	; 53
     6b2:	31 c0       	rjmp	.+98     	; 0x716 <EXT_INT_init+0xa6>
                case RISING_EDGE: MCUCR_Reg |= 0x03; break;
     6b4:	25 b7       	in	r18, 0x35	; 53
     6b6:	23 60       	ori	r18, 0x03	; 3
     6b8:	25 bf       	out	0x35, r18	; 53
     6ba:	2d c0       	rjmp	.+90     	; 0x716 <EXT_INT_init+0xa6>
                default: return INVALID_SENSE_CONTROL;
            }
            break;
        case INTERRUPT1:
            SET_BIT(GICR_Reg, 7); // activating interrupt 1
     6bc:	2b b7       	in	r18, 0x3b	; 59
     6be:	20 68       	ori	r18, 0x80	; 128
     6c0:	2b bf       	out	0x3b, r18	; 59
            switch (interrupt->senseControl) {
     6c2:	fc 01       	movw	r30, r24
     6c4:	21 81       	ldd	r18, Z+1	; 0x01
     6c6:	21 30       	cpi	r18, 0x01	; 1
     6c8:	51 f0       	breq	.+20     	; 0x6de <EXT_INT_init+0x6e>
     6ca:	28 f0       	brcs	.+10     	; 0x6d6 <EXT_INT_init+0x66>
     6cc:	22 30       	cpi	r18, 0x02	; 2
     6ce:	59 f0       	breq	.+22     	; 0x6e6 <EXT_INT_init+0x76>
     6d0:	23 30       	cpi	r18, 0x03	; 3
     6d2:	69 f0       	breq	.+26     	; 0x6ee <EXT_INT_init+0x7e>
     6d4:	28 c0       	rjmp	.+80     	; 0x726 <EXT_INT_init+0xb6>
                case LOW_LEVEL: MCUCR_Reg &= 0xF3; break;
     6d6:	25 b7       	in	r18, 0x35	; 53
     6d8:	23 7f       	andi	r18, 0xF3	; 243
     6da:	25 bf       	out	0x35, r18	; 53
     6dc:	1c c0       	rjmp	.+56     	; 0x716 <EXT_INT_init+0xa6>
                case ANY_LOGICAL_CHANGE: SET_BIT(MCUCR_Reg, 2); break;
     6de:	25 b7       	in	r18, 0x35	; 53
     6e0:	24 60       	ori	r18, 0x04	; 4
     6e2:	25 bf       	out	0x35, r18	; 53
     6e4:	18 c0       	rjmp	.+48     	; 0x716 <EXT_INT_init+0xa6>
                case FALLING_EDGE: SET_BIT(MCUCR_Reg, 3); break;
     6e6:	25 b7       	in	r18, 0x35	; 53
     6e8:	28 60       	ori	r18, 0x08	; 8
     6ea:	25 bf       	out	0x35, r18	; 53
     6ec:	14 c0       	rjmp	.+40     	; 0x716 <EXT_INT_init+0xa6>
                case RISING_EDGE: MCUCR_Reg |= 0x0C; break;
     6ee:	25 b7       	in	r18, 0x35	; 53
     6f0:	2c 60       	ori	r18, 0x0C	; 12
     6f2:	25 bf       	out	0x35, r18	; 53
     6f4:	10 c0       	rjmp	.+32     	; 0x716 <EXT_INT_init+0xa6>
                default: return INVALID_SENSE_CONTROL;
            }
            break;
        case INTERRUPT2:
            SET_BIT(GICR_Reg, 5); // activating interrupt 2
     6f6:	2b b7       	in	r18, 0x3b	; 59
     6f8:	20 62       	ori	r18, 0x20	; 32
     6fa:	2b bf       	out	0x3b, r18	; 59
            switch (interrupt->senseControl) {
     6fc:	fc 01       	movw	r30, r24
     6fe:	21 81       	ldd	r18, Z+1	; 0x01
     700:	22 30       	cpi	r18, 0x02	; 2
     702:	31 f0       	breq	.+12     	; 0x710 <EXT_INT_init+0xa0>
     704:	23 30       	cpi	r18, 0x03	; 3
     706:	89 f4       	brne	.+34     	; 0x72a <EXT_INT_init+0xba>
                case RISING_EDGE: SET_BIT(MCUCSR_Reg, 6); break;
     708:	24 b7       	in	r18, 0x34	; 52
     70a:	20 64       	ori	r18, 0x40	; 64
     70c:	24 bf       	out	0x34, r18	; 52
     70e:	03 c0       	rjmp	.+6      	; 0x716 <EXT_INT_init+0xa6>
                case FALLING_EDGE: CLR_BIT(MCUCSR_Reg, 6); break;
     710:	24 b7       	in	r18, 0x34	; 52
     712:	2f 7b       	andi	r18, 0xBF	; 191
     714:	24 bf       	out	0x34, r18	; 52
                default: return INVALID_SENSE_CONTROL;
            }
            break;
        default: return INVALID_INTERRUPT_SELECT;
    }
    set_INT_FUN(interrupt);
     716:	0e 94 1b 03 	call	0x636	; 0x636 <set_INT_FUN>
    return INTERRUPT_OK;
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	08 95       	ret
                case RISING_EDGE: SET_BIT(MCUCSR_Reg, 6); break;
                case FALLING_EDGE: CLR_BIT(MCUCSR_Reg, 6); break;
                default: return INVALID_SENSE_CONTROL;
            }
            break;
        default: return INVALID_INTERRUPT_SELECT;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	08 95       	ret
            switch (interrupt->senseControl) {
                case LOW_LEVEL: MCUCR_Reg &= 0xFC; break;
                case ANY_LOGICAL_CHANGE: SET_BIT(MCUCR_Reg, 0); break;
                case FALLING_EDGE: SET_BIT(MCUCR_Reg, 1); break;
                case RISING_EDGE: MCUCR_Reg |= 0x03; break;
                default: return INVALID_SENSE_CONTROL;
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	08 95       	ret
            switch (interrupt->senseControl) {
                case LOW_LEVEL: MCUCR_Reg &= 0xF3; break;
                case ANY_LOGICAL_CHANGE: SET_BIT(MCUCR_Reg, 2); break;
                case FALLING_EDGE: SET_BIT(MCUCR_Reg, 3); break;
                case RISING_EDGE: MCUCR_Reg |= 0x0C; break;
                default: return INVALID_SENSE_CONTROL;
     726:	82 e0       	ldi	r24, 0x02	; 2
     728:	08 95       	ret
        case INTERRUPT2:
            SET_BIT(GICR_Reg, 5); // activating interrupt 2
            switch (interrupt->senseControl) {
                case RISING_EDGE: SET_BIT(MCUCSR_Reg, 6); break;
                case FALLING_EDGE: CLR_BIT(MCUCSR_Reg, 6); break;
                default: return INVALID_SENSE_CONTROL;
     72a:	82 e0       	ldi	r24, 0x02	; 2
            break;
        default: return INVALID_INTERRUPT_SELECT;
    }
    set_INT_FUN(interrupt);
    return INTERRUPT_OK;
}
     72c:	08 95       	ret

0000072e <__vector_1>:
//////////////////////////////////////////////////////////////////////////

///////////////////////////// ISR functions //////////////////////////////


ISR(INT0_vect) {
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	2f 93       	push	r18
     73a:	3f 93       	push	r19
     73c:	4f 93       	push	r20
     73e:	5f 93       	push	r21
     740:	6f 93       	push	r22
     742:	7f 93       	push	r23
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	af 93       	push	r26
     74a:	bf 93       	push	r27
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
    EXT_INT0_PTR_TO_FUN();
     750:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <EXT_INT0_PTR_TO_FUN>
     754:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <EXT_INT0_PTR_TO_FUN+0x1>
     758:	09 95       	icall
}
     75a:	ff 91       	pop	r31
     75c:	ef 91       	pop	r30
     75e:	bf 91       	pop	r27
     760:	af 91       	pop	r26
     762:	9f 91       	pop	r25
     764:	8f 91       	pop	r24
     766:	7f 91       	pop	r23
     768:	6f 91       	pop	r22
     76a:	5f 91       	pop	r21
     76c:	4f 91       	pop	r20
     76e:	3f 91       	pop	r19
     770:	2f 91       	pop	r18
     772:	0f 90       	pop	r0
     774:	0f be       	out	0x3f, r0	; 63
     776:	0f 90       	pop	r0
     778:	1f 90       	pop	r1
     77a:	18 95       	reti

0000077c <__vector_2>:

ISR(INT1_vect) {
     77c:	1f 92       	push	r1
     77e:	0f 92       	push	r0
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	0f 92       	push	r0
     784:	11 24       	eor	r1, r1
     786:	2f 93       	push	r18
     788:	3f 93       	push	r19
     78a:	4f 93       	push	r20
     78c:	5f 93       	push	r21
     78e:	6f 93       	push	r22
     790:	7f 93       	push	r23
     792:	8f 93       	push	r24
     794:	9f 93       	push	r25
     796:	af 93       	push	r26
     798:	bf 93       	push	r27
     79a:	ef 93       	push	r30
     79c:	ff 93       	push	r31
    EXT_INT1_PTR_TO_FUN();
     79e:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <EXT_INT1_PTR_TO_FUN>
     7a2:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <EXT_INT1_PTR_TO_FUN+0x1>
     7a6:	09 95       	icall
}
     7a8:	ff 91       	pop	r31
     7aa:	ef 91       	pop	r30
     7ac:	bf 91       	pop	r27
     7ae:	af 91       	pop	r26
     7b0:	9f 91       	pop	r25
     7b2:	8f 91       	pop	r24
     7b4:	7f 91       	pop	r23
     7b6:	6f 91       	pop	r22
     7b8:	5f 91       	pop	r21
     7ba:	4f 91       	pop	r20
     7bc:	3f 91       	pop	r19
     7be:	2f 91       	pop	r18
     7c0:	0f 90       	pop	r0
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	0f 90       	pop	r0
     7c6:	1f 90       	pop	r1
     7c8:	18 95       	reti

000007ca <__vector_3>:

ISR(INT2_vect) {
     7ca:	1f 92       	push	r1
     7cc:	0f 92       	push	r0
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	0f 92       	push	r0
     7d2:	11 24       	eor	r1, r1
     7d4:	2f 93       	push	r18
     7d6:	3f 93       	push	r19
     7d8:	4f 93       	push	r20
     7da:	5f 93       	push	r21
     7dc:	6f 93       	push	r22
     7de:	7f 93       	push	r23
     7e0:	8f 93       	push	r24
     7e2:	9f 93       	push	r25
     7e4:	af 93       	push	r26
     7e6:	bf 93       	push	r27
     7e8:	ef 93       	push	r30
     7ea:	ff 93       	push	r31
    EXT_INT2_PTR_TO_FUN();
     7ec:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <EXT_INT2_PTR_TO_FUN>
     7f0:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <EXT_INT2_PTR_TO_FUN+0x1>
     7f4:	09 95       	icall
     7f6:	ff 91       	pop	r31
     7f8:	ef 91       	pop	r30
     7fa:	bf 91       	pop	r27
     7fc:	af 91       	pop	r26
     7fe:	9f 91       	pop	r25
     800:	8f 91       	pop	r24
     802:	7f 91       	pop	r23
     804:	6f 91       	pop	r22
     806:	5f 91       	pop	r21
     808:	4f 91       	pop	r20
     80a:	3f 91       	pop	r19
     80c:	2f 91       	pop	r18
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <set_TIMER_OVF_INT_fun>:
static void (* T1_CMPB_PTR_TO_FUN) (void) = NULLPTR;
static void (* T2_CMP_PTR_TO_FUN) (void) = NULLPTR;

//////////////////////////// private functions ///////////////////////////

void set_TIMER_OVF_INT_fun(ST_TIMER_t * timer){
     818:	fc 01       	movw	r30, r24
	switch (timer->timerSelect) {
     81a:	90 81       	ld	r25, Z
     81c:	91 30       	cpi	r25, 0x01	; 1
     81e:	59 f0       	breq	.+22     	; 0x836 <set_TIMER_OVF_INT_fun+0x1e>
     820:	18 f0       	brcs	.+6      	; 0x828 <set_TIMER_OVF_INT_fun+0x10>
     822:	92 30       	cpi	r25, 0x02	; 2
     824:	79 f0       	breq	.+30     	; 0x844 <set_TIMER_OVF_INT_fun+0x2c>
     826:	08 95       	ret
		case TIMER0:
			T0_OVF_PTR_TO_FUN = timer->callbackFunction;
     828:	84 81       	ldd	r24, Z+4	; 0x04
     82a:	95 81       	ldd	r25, Z+5	; 0x05
     82c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <T0_OVF_PTR_TO_FUN+0x1>
     830:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <T0_OVF_PTR_TO_FUN>
			break;
     834:	08 95       	ret
		case TIMER1:
			T1_OVF_PTR_TO_FUN = timer->callbackFunction;
     836:	84 81       	ldd	r24, Z+4	; 0x04
     838:	95 81       	ldd	r25, Z+5	; 0x05
     83a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <T1_OVF_PTR_TO_FUN+0x1>
     83e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <T1_OVF_PTR_TO_FUN>
			break;
     842:	08 95       	ret
		case TIMER2:
			T2_OVF_PTR_TO_FUN = timer->callbackFunction;
     844:	84 81       	ldd	r24, Z+4	; 0x04
     846:	95 81       	ldd	r25, Z+5	; 0x05
     848:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <T2_OVF_PTR_TO_FUN+0x1>
     84c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <T2_OVF_PTR_TO_FUN>
     850:	08 95       	ret

00000852 <set_TIMER_CMP_INT_fun>:
			break;
	}
}

void set_TIMER_CMP_INT_fun(ST_TIMER_t * timer){
     852:	fc 01       	movw	r30, r24
	switch (timer->timerSelect) {
     854:	90 81       	ld	r25, Z
     856:	91 30       	cpi	r25, 0x01	; 1
     858:	59 f0       	breq	.+22     	; 0x870 <__stack+0x11>
     85a:	18 f0       	brcs	.+6      	; 0x862 <__stack+0x3>
     85c:	92 30       	cpi	r25, 0x02	; 2
     85e:	99 f0       	breq	.+38     	; 0x886 <__stack+0x27>
     860:	08 95       	ret
		case TIMER0:
			T0_CMP_PTR_TO_FUN = timer->callbackFunction;
     862:	84 81       	ldd	r24, Z+4	; 0x04
     864:	95 81       	ldd	r25, Z+5	; 0x05
     866:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <T0_CMP_PTR_TO_FUN+0x1>
     86a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <T0_CMP_PTR_TO_FUN>
			break;
     86e:	08 95       	ret
		case TIMER1:
			T1_CMPA_PTR_TO_FUN = timer->callbackFunction;
     870:	84 81       	ldd	r24, Z+4	; 0x04
     872:	95 81       	ldd	r25, Z+5	; 0x05
     874:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <T1_CMPA_PTR_TO_FUN+0x1>
     878:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <T1_CMPA_PTR_TO_FUN>
			T1_CMPB_PTR_TO_FUN = timer->callbackFunction;
     87c:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <T1_CMPB_PTR_TO_FUN+0x1>
     880:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <T1_CMPB_PTR_TO_FUN>
			break;
     884:	08 95       	ret
		case TIMER2:
			T2_CMP_PTR_TO_FUN = timer->callbackFunction;
     886:	84 81       	ldd	r24, Z+4	; 0x04
     888:	95 81       	ldd	r25, Z+5	; 0x05
     88a:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <T2_CMP_PTR_TO_FUN+0x1>
     88e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <T2_CMP_PTR_TO_FUN>
     892:	08 95       	ret

00000894 <set_timer_init_value>:
}

void set_timer_init_value(uint8_t timer, uint16_t value) {
	
	/* Make sure that the timer is in the valid range */
	switch (timer) {
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	31 f0       	breq	.+12     	; 0x8a4 <set_timer_init_value+0x10>
     898:	18 f0       	brcs	.+6      	; 0x8a0 <set_timer_init_value+0xc>
     89a:	82 30       	cpi	r24, 0x02	; 2
     89c:	31 f0       	breq	.+12     	; 0x8aa <set_timer_init_value+0x16>
     89e:	08 95       	ret
		case TIMER0:
		TCNT0_Reg = (uint8_t) value;
     8a0:	62 bf       	out	0x32, r22	; 50
		break;
     8a2:	08 95       	ret
		case TIMER1:
		TCNT1H_Reg = (uint8_t) (value >> 8);
     8a4:	7d bd       	out	0x2d, r23	; 45
		TCNT1L_Reg = (uint8_t) value;
     8a6:	6c bd       	out	0x2c, r22	; 44
		break;
     8a8:	08 95       	ret
		case TIMER2:
		TCNT2_Reg = (uint8_t) value;
     8aa:	64 bd       	out	0x24, r22	; 36
     8ac:	08 95       	ret

000008ae <T0_TIMSK_init>:
		break;
	}
}

void T0_TIMSK_init(uint8_t interrupt_mode){
	if (interrupt_mode == OVF_MODE) SET_BIT(TIMSK_Reg, 0);
     8ae:	81 11       	cpse	r24, r1
     8b0:	04 c0       	rjmp	.+8      	; 0x8ba <T0_TIMSK_init+0xc>
     8b2:	89 b7       	in	r24, 0x39	; 57
     8b4:	81 60       	ori	r24, 0x01	; 1
     8b6:	89 bf       	out	0x39, r24	; 57
     8b8:	08 95       	ret
	else if (interrupt_mode == CMP_MODE) SET_BIT(TIMSK_Reg, 1);
     8ba:	81 30       	cpi	r24, 0x01	; 1
     8bc:	21 f4       	brne	.+8      	; 0x8c6 <T0_TIMSK_init+0x18>
     8be:	89 b7       	in	r24, 0x39	; 57
     8c0:	82 60       	ori	r24, 0x02	; 2
     8c2:	89 bf       	out	0x39, r24	; 57
     8c4:	08 95       	ret
	else {
		CLR_BIT(TIMSK_Reg, 0);
     8c6:	89 b7       	in	r24, 0x39	; 57
     8c8:	8e 7f       	andi	r24, 0xFE	; 254
     8ca:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK_Reg, 1);
     8cc:	89 b7       	in	r24, 0x39	; 57
     8ce:	8d 7f       	andi	r24, 0xFD	; 253
     8d0:	89 bf       	out	0x39, r24	; 57
     8d2:	08 95       	ret

000008d4 <T1_TIMSK_init>:
	}
}

void T1_TIMSK_init(uint8_t interrupt_mode){
	if (interrupt_mode == OVF_MODE) {
     8d4:	81 11       	cpse	r24, r1
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <T1_TIMSK_init+0xc>
		SET_BIT(TIMSK_Reg, 2);
     8d8:	89 b7       	in	r24, 0x39	; 57
     8da:	84 60       	ori	r24, 0x04	; 4
     8dc:	89 bf       	out	0x39, r24	; 57
     8de:	08 95       	ret
	}else if (interrupt_mode == CMP_MODE) {
     8e0:	81 30       	cpi	r24, 0x01	; 1
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <T1_TIMSK_init+0x1e>
		SET_BIT(TIMSK_Reg, 3);
     8e4:	89 b7       	in	r24, 0x39	; 57
     8e6:	88 60       	ori	r24, 0x08	; 8
     8e8:	89 bf       	out	0x39, r24	; 57
		SET_BIT(TIMSK_Reg, 4);
     8ea:	89 b7       	in	r24, 0x39	; 57
     8ec:	80 61       	ori	r24, 0x10	; 16
     8ee:	89 bf       	out	0x39, r24	; 57
     8f0:	08 95       	ret
	}else {
		CLR_BIT(TIMSK_Reg, 2);
     8f2:	89 b7       	in	r24, 0x39	; 57
     8f4:	8b 7f       	andi	r24, 0xFB	; 251
     8f6:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK_Reg, 3);
     8f8:	89 b7       	in	r24, 0x39	; 57
     8fa:	87 7f       	andi	r24, 0xF7	; 247
     8fc:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK_Reg, 4);
     8fe:	89 b7       	in	r24, 0x39	; 57
     900:	8f 7e       	andi	r24, 0xEF	; 239
     902:	89 bf       	out	0x39, r24	; 57
     904:	08 95       	ret

00000906 <T2_TIMSK_init>:
	}
}

void T2_TIMSK_init(uint8_t interrupt_mode){
	if (interrupt_mode == OVF_MODE) {
     906:	81 11       	cpse	r24, r1
     908:	04 c0       	rjmp	.+8      	; 0x912 <T2_TIMSK_init+0xc>
		SET_BIT(TIMSK_Reg, 6);
     90a:	89 b7       	in	r24, 0x39	; 57
     90c:	80 64       	ori	r24, 0x40	; 64
     90e:	89 bf       	out	0x39, r24	; 57
     910:	08 95       	ret
	}else if (interrupt_mode == CMP_MODE) {
     912:	81 30       	cpi	r24, 0x01	; 1
     914:	21 f4       	brne	.+8      	; 0x91e <T2_TIMSK_init+0x18>
		SET_BIT(TIMSK_Reg, 7);
     916:	89 b7       	in	r24, 0x39	; 57
     918:	80 68       	ori	r24, 0x80	; 128
     91a:	89 bf       	out	0x39, r24	; 57
     91c:	08 95       	ret
	}else {
		CLR_BIT(TIMSK_Reg, 6);
     91e:	89 b7       	in	r24, 0x39	; 57
     920:	8f 7b       	andi	r24, 0xBF	; 191
     922:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK_Reg, 7);
     924:	89 b7       	in	r24, 0x39	; 57
     926:	8f 77       	andi	r24, 0x7F	; 127
     928:	89 bf       	out	0x39, r24	; 57
     92a:	08 95       	ret

0000092c <timer_init>:

//////////////////////////////////////////////////////////////////////////

//////////////////////////// public functions ////////////////////////////

EN_TIMER_ERROR timer_init(ST_TIMER_t * timer) {
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	ec 01       	movw	r28, r24

	if (timer->interrupt_mode == OVF_MODE) {
     932:	8b 81       	ldd	r24, Y+3	; 0x03
     934:	81 11       	cpse	r24, r1
     936:	05 c0       	rjmp	.+10     	; 0x942 <timer_init+0x16>
		sei();
     938:	78 94       	sei
		set_TIMER_OVF_INT_fun(timer);
     93a:	ce 01       	movw	r24, r28
     93c:	0e 94 0c 04 	call	0x818	; 0x818 <set_TIMER_OVF_INT_fun>
     940:	09 c0       	rjmp	.+18     	; 0x954 <timer_init+0x28>
	}else if(timer->interrupt_mode == CMP_MODE) {
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	29 f4       	brne	.+10     	; 0x950 <timer_init+0x24>
		sei();
     946:	78 94       	sei
		set_TIMER_CMP_INT_fun(timer);
     948:	ce 01       	movw	r24, r28
     94a:	0e 94 29 04 	call	0x852	; 0x852 <set_TIMER_CMP_INT_fun>
     94e:	02 c0       	rjmp	.+4      	; 0x954 <timer_init+0x28>
	}else if (timer->interrupt_mode != NONE) return INVALID_INTERRUPT_MODE;
     950:	82 30       	cpi	r24, 0x02	; 2
     952:	d1 f4       	brne	.+52     	; 0x988 <timer_init+0x5c>

	/* Activating normal mode */
	switch (timer->timerSelect) {
     954:	88 81       	ld	r24, Y
     956:	81 30       	cpi	r24, 0x01	; 1
     958:	51 f0       	breq	.+20     	; 0x96e <timer_init+0x42>
     95a:	18 f0       	brcs	.+6      	; 0x962 <timer_init+0x36>
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	71 f0       	breq	.+28     	; 0x97c <timer_init+0x50>
     960:	15 c0       	rjmp	.+42     	; 0x98c <timer_init+0x60>
		case TIMER0: 
			TCCR0_Reg = 0x00;
     962:	13 be       	out	0x33, r1	; 51
			T0_TIMSK_init(timer->interrupt_mode);
     964:	8b 81       	ldd	r24, Y+3	; 0x03
     966:	0e 94 57 04 	call	0x8ae	; 0x8ae <T0_TIMSK_init>
			T2_TIMSK_init(timer->interrupt_mode);
			break;
		default: return INVALID_TIMER_SELECT;
	}

	return TIMER_OK;
     96a:	80 e0       	ldi	r24, 0x00	; 0
	/* Activating normal mode */
	switch (timer->timerSelect) {
		case TIMER0: 
			TCCR0_Reg = 0x00;
			T0_TIMSK_init(timer->interrupt_mode);
			break;
     96c:	10 c0       	rjmp	.+32     	; 0x98e <timer_init+0x62>
		case TIMER1: 
			TCCR1A_Reg = 0x00;
     96e:	1f bc       	out	0x2f, r1	; 47
			TCCR1B_Reg = 0x00;
     970:	1e bc       	out	0x2e, r1	; 46
			T1_TIMSK_init(timer->interrupt_mode);
     972:	8b 81       	ldd	r24, Y+3	; 0x03
     974:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <T1_TIMSK_init>
			T2_TIMSK_init(timer->interrupt_mode);
			break;
		default: return INVALID_TIMER_SELECT;
	}

	return TIMER_OK;
     978:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case TIMER1: 
			TCCR1A_Reg = 0x00;
			TCCR1B_Reg = 0x00;
			T1_TIMSK_init(timer->interrupt_mode);
			break;
     97a:	09 c0       	rjmp	.+18     	; 0x98e <timer_init+0x62>
		case TIMER2: 
			TCCR2_Reg = 0x00;
     97c:	15 bc       	out	0x25, r1	; 37
			T2_TIMSK_init(timer->interrupt_mode);
     97e:	8b 81       	ldd	r24, Y+3	; 0x03
     980:	0e 94 83 04 	call	0x906	; 0x906 <T2_TIMSK_init>
			break;
		default: return INVALID_TIMER_SELECT;
	}

	return TIMER_OK;
     984:	80 e0       	ldi	r24, 0x00	; 0
			T1_TIMSK_init(timer->interrupt_mode);
			break;
		case TIMER2: 
			TCCR2_Reg = 0x00;
			T2_TIMSK_init(timer->interrupt_mode);
			break;
     986:	03 c0       	rjmp	.+6      	; 0x98e <timer_init+0x62>
		sei();
		set_TIMER_OVF_INT_fun(timer);
	}else if(timer->interrupt_mode == CMP_MODE) {
		sei();
		set_TIMER_CMP_INT_fun(timer);
	}else if (timer->interrupt_mode != NONE) return INVALID_INTERRUPT_MODE;
     988:	83 e0       	ldi	r24, 0x03	; 3
     98a:	01 c0       	rjmp	.+2      	; 0x98e <timer_init+0x62>
			break;
		case TIMER2: 
			TCCR2_Reg = 0x00;
			T2_TIMSK_init(timer->interrupt_mode);
			break;
		default: return INVALID_TIMER_SELECT;
     98c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return TIMER_OK;
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <delay_start>:

EN_TIMER_ERROR delay_start(uint8_t timer, uint16_t delay_ms, uint16_t prescaler) {
     994:	3f 92       	push	r3
     996:	4f 92       	push	r4
     998:	5f 92       	push	r5
     99a:	6f 92       	push	r6
     99c:	7f 92       	push	r7
     99e:	8f 92       	push	r8
     9a0:	9f 92       	push	r9
     9a2:	af 92       	push	r10
     9a4:	bf 92       	push	r11
     9a6:	cf 92       	push	r12
     9a8:	df 92       	push	r13
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
	/* Make sure that the prescaler is in the valid range */
	switch (prescaler) {
     9b6:	40 34       	cpi	r20, 0x40	; 64
     9b8:	51 05       	cpc	r21, r1
     9ba:	91 f0       	breq	.+36     	; 0x9e0 <delay_start+0x4c>
     9bc:	40 f4       	brcc	.+16     	; 0x9ce <delay_start+0x3a>
     9be:	41 30       	cpi	r20, 0x01	; 1
     9c0:	51 05       	cpc	r21, r1
     9c2:	71 f0       	breq	.+28     	; 0x9e0 <delay_start+0x4c>
     9c4:	48 30       	cpi	r20, 0x08	; 8
     9c6:	51 05       	cpc	r21, r1
     9c8:	09 f0       	breq	.+2      	; 0x9cc <delay_start+0x38>
     9ca:	66 c1       	rjmp	.+716    	; 0xc98 <delay_start+0x304>
     9cc:	09 c0       	rjmp	.+18     	; 0x9e0 <delay_start+0x4c>
     9ce:	41 15       	cp	r20, r1
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	59 07       	cpc	r21, r25
     9d4:	29 f0       	breq	.+10     	; 0x9e0 <delay_start+0x4c>
     9d6:	41 15       	cp	r20, r1
     9d8:	94 e0       	ldi	r25, 0x04	; 4
     9da:	59 07       	cpc	r21, r25
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <delay_start+0x4c>
     9de:	5c c1       	rjmp	.+696    	; 0xc98 <delay_start+0x304>
     9e0:	8a 01       	movw	r16, r20
     9e2:	eb 01       	movw	r28, r22
     9e4:	38 2e       	mov	r3, r24
		case PRESCALER_1024: break;
		default: return INVALID_PRESCALER; // wrong prescaler
	}

	 /* getting the number of overflows */
	double t_max_delay = 0.0, t_tick = (1000.0 * prescaler) / F_CPU; // t_tick [ in milli seconds ]
     9e6:	ba 01       	movw	r22, r20
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	4a e7       	ldi	r20, 0x7A	; 122
     9f6:	54 e4       	ldi	r21, 0x44	; 68
     9f8:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	34 e2       	ldi	r19, 0x24	; 36
     a00:	44 e7       	ldi	r20, 0x74	; 116
     a02:	59 e4       	ldi	r21, 0x49	; 73
     a04:	0e 94 a7 09 	call	0x134e	; 0x134e <__divsf3>
     a08:	6b 01       	movw	r12, r22
     a0a:	7c 01       	movw	r14, r24
	uint16_t n_overflows = 0, t_initial = 0;
	timer_flag = TRUE;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <timer_flag>

	/* Make sure that the timer is in the valid range */
	switch (timer) {
     a12:	38 16       	cp	r3, r24
     a14:	c1 f1       	breq	.+112    	; 0xa86 <delay_start+0xf2>
     a16:	38 16       	cp	r3, r24
     a18:	18 f0       	brcs	.+6      	; 0xa20 <delay_start+0x8c>
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	38 12       	cpse	r3, r24
     a1e:	3e c1       	rjmp	.+636    	; 0xc9c <delay_start+0x308>
		case TIMER0:
		case TIMER2: 
			t_max_delay = 256.0 * t_tick; // 2^8 = 256
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e8       	ldi	r20, 0x80	; 128
     a26:	53 e4       	ldi	r21, 0x43	; 67
     a28:	c7 01       	movw	r24, r14
     a2a:	b6 01       	movw	r22, r12
     a2c:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     a30:	2b 01       	movw	r4, r22
     a32:	3c 01       	movw	r6, r24
			n_overflows = ceil(delay_ms / t_max_delay);
     a34:	be 01       	movw	r22, r28
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     a3e:	4b 01       	movw	r8, r22
     a40:	5c 01       	movw	r10, r24
     a42:	a3 01       	movw	r20, r6
     a44:	92 01       	movw	r18, r4
     a46:	0e 94 a7 09 	call	0x134e	; 0x134e <__divsf3>
     a4a:	0e 94 90 09 	call	0x1320	; 0x1320 <ceil>
     a4e:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     a52:	eb 01       	movw	r28, r22
			t_initial = (int) (256.0 - delay_ms / (t_tick * n_overflows));// 2^8 = 256
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     a5c:	a7 01       	movw	r20, r14
     a5e:	96 01       	movw	r18, r12
     a60:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     a64:	9b 01       	movw	r18, r22
     a66:	ac 01       	movw	r20, r24
     a68:	c5 01       	movw	r24, r10
     a6a:	b4 01       	movw	r22, r8
     a6c:	0e 94 a7 09 	call	0x134e	; 0x134e <__divsf3>
     a70:	9b 01       	movw	r18, r22
     a72:	ac 01       	movw	r20, r24
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	80 e8       	ldi	r24, 0x80	; 128
     a7a:	93 e4       	ldi	r25, 0x43	; 67
     a7c:	0e 94 23 09 	call	0x1246	; 0x1246 <__subsf3>
     a80:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fixsfsi>
			break;
     a84:	32 c0       	rjmp	.+100    	; 0xaea <delay_start+0x156>
		case TIMER1:
			t_max_delay = 65536.0 * t_tick; // 2^16 = 65536
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 e8       	ldi	r20, 0x80	; 128
     a8c:	57 e4       	ldi	r21, 0x47	; 71
     a8e:	c7 01       	movw	r24, r14
     a90:	b6 01       	movw	r22, r12
     a92:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     a96:	2b 01       	movw	r4, r22
     a98:	3c 01       	movw	r6, r24
			n_overflows = ceil(delay_ms / t_max_delay);
     a9a:	be 01       	movw	r22, r28
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     aa4:	4b 01       	movw	r8, r22
     aa6:	5c 01       	movw	r10, r24
     aa8:	a3 01       	movw	r20, r6
     aaa:	92 01       	movw	r18, r4
     aac:	0e 94 a7 09 	call	0x134e	; 0x134e <__divsf3>
     ab0:	0e 94 90 09 	call	0x1320	; 0x1320 <ceil>
     ab4:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     ab8:	eb 01       	movw	r28, r22
			t_initial = (int) (65536.0 - delay_ms / (t_tick * n_overflows)); // 2^16 = 65536
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     ac2:	a7 01       	movw	r20, r14
     ac4:	96 01       	movw	r18, r12
     ac6:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     aca:	9b 01       	movw	r18, r22
     acc:	ac 01       	movw	r20, r24
     ace:	c5 01       	movw	r24, r10
     ad0:	b4 01       	movw	r22, r8
     ad2:	0e 94 a7 09 	call	0x134e	; 0x134e <__divsf3>
     ad6:	9b 01       	movw	r18, r22
     ad8:	ac 01       	movw	r20, r24
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	80 e8       	ldi	r24, 0x80	; 128
     ae0:	97 e4       	ldi	r25, 0x47	; 71
     ae2:	0e 94 23 09 	call	0x1246	; 0x1246 <__subsf3>
     ae6:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fixsfsi>
			break;
		default: return INVALID_TIMER_SELECT; /* ERROR invalid input (timer) */ 
	}
	
	/* setting the initial value */
	set_timer_init_value(timer, t_initial);
     aea:	83 2d       	mov	r24, r3
     aec:	0e 94 4a 04 	call	0x894	; 0x894 <set_timer_init_value>
	
	switch (timer) {
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	39 16       	cp	r3, r25
     af4:	09 f4       	brne	.+2      	; 0xaf8 <delay_start+0x164>
     af6:	4a c0       	rjmp	.+148    	; 0xb8c <delay_start+0x1f8>
     af8:	39 16       	cp	r3, r25
     afa:	28 f0       	brcs	.+10     	; 0xb06 <delay_start+0x172>
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	38 16       	cp	r3, r24
     b00:	09 f4       	brne	.+2      	; 0xb04 <delay_start+0x170>
     b02:	87 c0       	rjmp	.+270    	; 0xc12 <delay_start+0x27e>
     b04:	cd c0       	rjmp	.+410    	; 0xca0 <delay_start+0x30c>
		case TIMER0:
			switch (prescaler) {
     b06:	00 34       	cpi	r16, 0x40	; 64
     b08:	11 05       	cpc	r17, r1
     b0a:	d1 f0       	breq	.+52     	; 0xb40 <delay_start+0x1ac>
     b0c:	38 f4       	brcc	.+14     	; 0xb1c <delay_start+0x188>
     b0e:	01 30       	cpi	r16, 0x01	; 1
     b10:	11 05       	cpc	r17, r1
     b12:	61 f0       	breq	.+24     	; 0xb2c <delay_start+0x198>
     b14:	08 30       	cpi	r16, 0x08	; 8
     b16:	11 05       	cpc	r17, r1
     b18:	69 f0       	breq	.+26     	; 0xb34 <delay_start+0x1a0>
     b1a:	0f c0       	rjmp	.+30     	; 0xb3a <delay_start+0x1a6>
     b1c:	01 15       	cp	r16, r1
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	19 07       	cpc	r17, r25
     b22:	a9 f0       	breq	.+42     	; 0xb4e <delay_start+0x1ba>
     b24:	01 15       	cp	r16, r1
     b26:	14 40       	sbci	r17, 0x04	; 4
     b28:	b1 f0       	breq	.+44     	; 0xb56 <delay_start+0x1c2>
     b2a:	07 c0       	rjmp	.+14     	; 0xb3a <delay_start+0x1a6>
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
     b2c:	83 b7       	in	r24, 0x33	; 51
     b2e:	81 60       	ori	r24, 0x01	; 1
     b30:	83 bf       	out	0x33, r24	; 51
     b32:	03 c0       	rjmp	.+6      	; 0xb3a <delay_start+0x1a6>
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
     b34:	83 b7       	in	r24, 0x33	; 51
     b36:	82 60       	ori	r24, 0x02	; 2
     b38:	83 bf       	out	0x33, r24	; 51
	}

	return TIMER_OK;
}

EN_TIMER_ERROR delay_start(uint8_t timer, uint16_t delay_ms, uint16_t prescaler) {
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	21 c0       	rjmp	.+66     	; 0xb82 <delay_start+0x1ee>
	switch (timer) {
		case TIMER0:
			switch (prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 1); break;
     b40:	83 b7       	in	r24, 0x33	; 51
     b42:	81 60       	ori	r24, 0x01	; 1
     b44:	83 bf       	out	0x33, r24	; 51
     b46:	83 b7       	in	r24, 0x33	; 51
     b48:	82 60       	ori	r24, 0x02	; 2
     b4a:	83 bf       	out	0x33, r24	; 51
     b4c:	f6 cf       	rjmp	.-20     	; 0xb3a <delay_start+0x1a6>
				case PRESCALER_256: SET_BIT(TCCR0_Reg, 2); break;
     b4e:	83 b7       	in	r24, 0x33	; 51
     b50:	84 60       	ori	r24, 0x04	; 4
     b52:	83 bf       	out	0x33, r24	; 51
     b54:	f2 cf       	rjmp	.-28     	; 0xb3a <delay_start+0x1a6>
				case PRESCALER_1024: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 2); break;
     b56:	83 b7       	in	r24, 0x33	; 51
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	83 bf       	out	0x33, r24	; 51
     b5c:	83 b7       	in	r24, 0x33	; 51
     b5e:	84 60       	ori	r24, 0x04	; 4
     b60:	83 bf       	out	0x33, r24	; 51
     b62:	eb cf       	rjmp	.-42     	; 0xb3a <delay_start+0x1a6>
			}
			for (uint16_t i = 0; (i < n_overflows); i++) {
				while((READ_BIT(TIFR_Reg, 0) == 0) && timer_flag); 
     b64:	08 b6       	in	r0, 0x38	; 56
     b66:	00 fc       	sbrc	r0, 0
     b68:	04 c0       	rjmp	.+8      	; 0xb72 <delay_start+0x1de>
     b6a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timer_flag>
     b6e:	81 11       	cpse	r24, r1
     b70:	f9 cf       	rjmp	.-14     	; 0xb64 <delay_start+0x1d0>
				SET_BIT(TIFR_Reg, 0);
     b72:	88 b7       	in	r24, 0x38	; 56
     b74:	81 60       	ori	r24, 0x01	; 1
     b76:	88 bf       	out	0x38, r24	; 56
				timer_flag = TRUE;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <timer_flag>
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR0_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 2); break;
			}
			for (uint16_t i = 0; (i < n_overflows); i++) {
     b7e:	2f 5f       	subi	r18, 0xFF	; 255
     b80:	3f 4f       	sbci	r19, 0xFF	; 255
     b82:	2c 17       	cp	r18, r28
     b84:	3d 07       	cpc	r19, r29
     b86:	70 f3       	brcs	.-36     	; 0xb64 <delay_start+0x1d0>
				timer_flag = TRUE;
			}
			break;
		default: return INVALID_TIMER_SELECT; /* ERROR invalid input (timer) */
	}
	return TIMER_OK;
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	8b c0       	rjmp	.+278    	; 0xca2 <delay_start+0x30e>
				SET_BIT(TIFR_Reg, 0);
				timer_flag = TRUE;
			}
			break;
		case TIMER1:
			switch (prescaler) {
     b8c:	00 34       	cpi	r16, 0x40	; 64
     b8e:	11 05       	cpc	r17, r1
     b90:	d1 f0       	breq	.+52     	; 0xbc6 <delay_start+0x232>
     b92:	38 f4       	brcc	.+14     	; 0xba2 <delay_start+0x20e>
     b94:	01 30       	cpi	r16, 0x01	; 1
     b96:	11 05       	cpc	r17, r1
     b98:	61 f0       	breq	.+24     	; 0xbb2 <delay_start+0x21e>
     b9a:	08 30       	cpi	r16, 0x08	; 8
     b9c:	11 05       	cpc	r17, r1
     b9e:	69 f0       	breq	.+26     	; 0xbba <delay_start+0x226>
     ba0:	0f c0       	rjmp	.+30     	; 0xbc0 <delay_start+0x22c>
     ba2:	01 15       	cp	r16, r1
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	19 07       	cpc	r17, r25
     ba8:	a9 f0       	breq	.+42     	; 0xbd4 <delay_start+0x240>
     baa:	01 15       	cp	r16, r1
     bac:	14 40       	sbci	r17, 0x04	; 4
     bae:	b1 f0       	breq	.+44     	; 0xbdc <delay_start+0x248>
     bb0:	07 c0       	rjmp	.+14     	; 0xbc0 <delay_start+0x22c>
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
     bb2:	8e b5       	in	r24, 0x2e	; 46
     bb4:	81 60       	ori	r24, 0x01	; 1
     bb6:	8e bd       	out	0x2e, r24	; 46
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <delay_start+0x22c>
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
     bba:	8e b5       	in	r24, 0x2e	; 46
     bbc:	82 60       	ori	r24, 0x02	; 2
     bbe:	8e bd       	out	0x2e, r24	; 46
	}

	return TIMER_OK;
}

EN_TIMER_ERROR delay_start(uint8_t timer, uint16_t delay_ms, uint16_t prescaler) {
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	21 c0       	rjmp	.+66     	; 0xc08 <delay_start+0x274>
			break;
		case TIMER1:
			switch (prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 1); break;
     bc6:	8e b5       	in	r24, 0x2e	; 46
     bc8:	81 60       	ori	r24, 0x01	; 1
     bca:	8e bd       	out	0x2e, r24	; 46
     bcc:	8e b5       	in	r24, 0x2e	; 46
     bce:	82 60       	ori	r24, 0x02	; 2
     bd0:	8e bd       	out	0x2e, r24	; 46
     bd2:	f6 cf       	rjmp	.-20     	; 0xbc0 <delay_start+0x22c>
				case PRESCALER_256: SET_BIT(TCCR1B_Reg, 2); break;
     bd4:	8e b5       	in	r24, 0x2e	; 46
     bd6:	84 60       	ori	r24, 0x04	; 4
     bd8:	8e bd       	out	0x2e, r24	; 46
     bda:	f2 cf       	rjmp	.-28     	; 0xbc0 <delay_start+0x22c>
				case PRESCALER_1024: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 2); break;
     bdc:	8e b5       	in	r24, 0x2e	; 46
     bde:	81 60       	ori	r24, 0x01	; 1
     be0:	8e bd       	out	0x2e, r24	; 46
     be2:	8e b5       	in	r24, 0x2e	; 46
     be4:	84 60       	ori	r24, 0x04	; 4
     be6:	8e bd       	out	0x2e, r24	; 46
     be8:	eb cf       	rjmp	.-42     	; 0xbc0 <delay_start+0x22c>
			}
			for (uint16_t i = 0; (i < n_overflows); i++) {
				while((READ_BIT(TIFR_Reg, 2) == 0) && timer_flag); 
     bea:	08 b6       	in	r0, 0x38	; 56
     bec:	02 fc       	sbrc	r0, 2
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <delay_start+0x264>
     bf0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timer_flag>
     bf4:	81 11       	cpse	r24, r1
     bf6:	f9 cf       	rjmp	.-14     	; 0xbea <delay_start+0x256>
				SET_BIT(TIFR_Reg, 2);
     bf8:	88 b7       	in	r24, 0x38	; 56
     bfa:	84 60       	ori	r24, 0x04	; 4
     bfc:	88 bf       	out	0x38, r24	; 56
				timer_flag = TRUE;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <timer_flag>
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR1B_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 2); break;
			}
			for (uint16_t i = 0; (i < n_overflows); i++) {
     c04:	2f 5f       	subi	r18, 0xFF	; 255
     c06:	3f 4f       	sbci	r19, 0xFF	; 255
     c08:	2c 17       	cp	r18, r28
     c0a:	3d 07       	cpc	r19, r29
     c0c:	70 f3       	brcs	.-36     	; 0xbea <delay_start+0x256>
				timer_flag = TRUE;
			}
			break;
		default: return INVALID_TIMER_SELECT; /* ERROR invalid input (timer) */
	}
	return TIMER_OK;
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	48 c0       	rjmp	.+144    	; 0xca2 <delay_start+0x30e>
				SET_BIT(TIFR_Reg, 2);
				timer_flag = TRUE;
			}
			break;
		case TIMER2:
			switch (prescaler) {
     c12:	00 34       	cpi	r16, 0x40	; 64
     c14:	11 05       	cpc	r17, r1
     c16:	d1 f0       	breq	.+52     	; 0xc4c <delay_start+0x2b8>
     c18:	38 f4       	brcc	.+14     	; 0xc28 <delay_start+0x294>
     c1a:	01 30       	cpi	r16, 0x01	; 1
     c1c:	11 05       	cpc	r17, r1
     c1e:	61 f0       	breq	.+24     	; 0xc38 <delay_start+0x2a4>
     c20:	08 30       	cpi	r16, 0x08	; 8
     c22:	11 05       	cpc	r17, r1
     c24:	69 f0       	breq	.+26     	; 0xc40 <delay_start+0x2ac>
     c26:	0f c0       	rjmp	.+30     	; 0xc46 <delay_start+0x2b2>
     c28:	01 15       	cp	r16, r1
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	19 07       	cpc	r17, r25
     c2e:	a9 f0       	breq	.+42     	; 0xc5a <delay_start+0x2c6>
     c30:	01 15       	cp	r16, r1
     c32:	14 40       	sbci	r17, 0x04	; 4
     c34:	b1 f0       	breq	.+44     	; 0xc62 <delay_start+0x2ce>
     c36:	07 c0       	rjmp	.+14     	; 0xc46 <delay_start+0x2b2>
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
     c38:	85 b5       	in	r24, 0x25	; 37
     c3a:	81 60       	ori	r24, 0x01	; 1
     c3c:	85 bd       	out	0x25, r24	; 37
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <delay_start+0x2b2>
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
     c40:	85 b5       	in	r24, 0x25	; 37
     c42:	82 60       	ori	r24, 0x02	; 2
     c44:	85 bd       	out	0x25, r24	; 37
	}

	return TIMER_OK;
}

EN_TIMER_ERROR delay_start(uint8_t timer, uint16_t delay_ms, uint16_t prescaler) {
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	21 c0       	rjmp	.+66     	; 0xc8e <delay_start+0x2fa>
			break;
		case TIMER2:
			switch (prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 1); break;
     c4c:	85 b5       	in	r24, 0x25	; 37
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	85 bd       	out	0x25, r24	; 37
     c52:	85 b5       	in	r24, 0x25	; 37
     c54:	82 60       	ori	r24, 0x02	; 2
     c56:	85 bd       	out	0x25, r24	; 37
     c58:	f6 cf       	rjmp	.-20     	; 0xc46 <delay_start+0x2b2>
				case PRESCALER_256: SET_BIT(TCCR2_Reg, 2); break;
     c5a:	85 b5       	in	r24, 0x25	; 37
     c5c:	84 60       	ori	r24, 0x04	; 4
     c5e:	85 bd       	out	0x25, r24	; 37
     c60:	f2 cf       	rjmp	.-28     	; 0xc46 <delay_start+0x2b2>
				case PRESCALER_1024: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 2); break;
     c62:	85 b5       	in	r24, 0x25	; 37
     c64:	81 60       	ori	r24, 0x01	; 1
     c66:	85 bd       	out	0x25, r24	; 37
     c68:	85 b5       	in	r24, 0x25	; 37
     c6a:	84 60       	ori	r24, 0x04	; 4
     c6c:	85 bd       	out	0x25, r24	; 37
     c6e:	eb cf       	rjmp	.-42     	; 0xc46 <delay_start+0x2b2>
			}
			for (uint16_t i = 0; (i < n_overflows); i++) {
				while((READ_BIT(TIFR_Reg, 6) == 0) && timer_flag); 
     c70:	08 b6       	in	r0, 0x38	; 56
     c72:	06 fc       	sbrc	r0, 6
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <delay_start+0x2ea>
     c76:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timer_flag>
     c7a:	81 11       	cpse	r24, r1
     c7c:	f9 cf       	rjmp	.-14     	; 0xc70 <delay_start+0x2dc>
				SET_BIT(TIFR_Reg, 6);
     c7e:	88 b7       	in	r24, 0x38	; 56
     c80:	80 64       	ori	r24, 0x40	; 64
     c82:	88 bf       	out	0x38, r24	; 56
				timer_flag = TRUE;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <timer_flag>
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR2_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 2); break;
			}
			for (uint16_t i = 0; (i < n_overflows); i++) {
     c8a:	2f 5f       	subi	r18, 0xFF	; 255
     c8c:	3f 4f       	sbci	r19, 0xFF	; 255
     c8e:	2c 17       	cp	r18, r28
     c90:	3d 07       	cpc	r19, r29
     c92:	70 f3       	brcs	.-36     	; 0xc70 <delay_start+0x2dc>
				timer_flag = TRUE;
			}
			break;
		default: return INVALID_TIMER_SELECT; /* ERROR invalid input (timer) */
	}
	return TIMER_OK;
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	05 c0       	rjmp	.+10     	; 0xca2 <delay_start+0x30e>
		case NO_PRESCALER: break;
		case PRESCALER_8: break;
		case PRESCALER_64: break;
		case PRESCALER_256: break;
		case PRESCALER_1024: break;
		default: return INVALID_PRESCALER; // wrong prescaler
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	03 c0       	rjmp	.+6      	; 0xca2 <delay_start+0x30e>
		case TIMER1:
			t_max_delay = 65536.0 * t_tick; // 2^16 = 65536
			n_overflows = ceil(delay_ms / t_max_delay);
			t_initial = (int) (65536.0 - delay_ms / (t_tick * n_overflows)); // 2^16 = 65536
			break;
		default: return INVALID_TIMER_SELECT; /* ERROR invalid input (timer) */ 
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <delay_start+0x30e>
				while((READ_BIT(TIFR_Reg, 6) == 0) && timer_flag); 
				SET_BIT(TIFR_Reg, 6);
				timer_flag = TRUE;
			}
			break;
		default: return INVALID_TIMER_SELECT; /* ERROR invalid input (timer) */
     ca0:	81 e0       	ldi	r24, 0x01	; 1
	}
	return TIMER_OK;
}
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	ff 90       	pop	r15
     cac:	ef 90       	pop	r14
     cae:	df 90       	pop	r13
     cb0:	cf 90       	pop	r12
     cb2:	bf 90       	pop	r11
     cb4:	af 90       	pop	r10
     cb6:	9f 90       	pop	r9
     cb8:	8f 90       	pop	r8
     cba:	7f 90       	pop	r7
     cbc:	6f 90       	pop	r6
     cbe:	5f 90       	pop	r5
     cc0:	4f 90       	pop	r4
     cc2:	3f 90       	pop	r3
     cc4:	08 95       	ret

00000cc6 <delay_stop>:

EN_TIMER_ERROR delay_stop(uint8_t timer) {

		/* Reseting to normal mode */
		switch (timer) {
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	41 f0       	breq	.+16     	; 0xcda <delay_stop+0x14>
     cca:	18 f0       	brcs	.+6      	; 0xcd2 <delay_stop+0xc>
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	59 f0       	breq	.+22     	; 0xce6 <delay_stop+0x20>
     cd0:	0e c0       	rjmp	.+28     	; 0xcee <delay_stop+0x28>
			case TIMER0: 
				TCCR0_Reg = 0x00; 
     cd2:	13 be       	out	0x33, r1	; 51
				TCNT0_Reg = 0x00;
     cd4:	12 be       	out	0x32, r1	; 50
				TCCR2_Reg = 0x00; 
				TCNT2_Reg = 0x00;
				break;
			default: return INVALID_TIMER_SELECT;
		}
		return TIMER_OK;
     cd6:	80 e0       	ldi	r24, 0x00	; 0
		/* Reseting to normal mode */
		switch (timer) {
			case TIMER0: 
				TCCR0_Reg = 0x00; 
				TCNT0_Reg = 0x00;
				break;
     cd8:	08 95       	ret
			case TIMER1: 
				TCCR1A_Reg = 0x00; 
     cda:	1f bc       	out	0x2f, r1	; 47
				TCCR1B_Reg = 0x00; 
     cdc:	1e bc       	out	0x2e, r1	; 46
				TCNT1H_Reg = 0x00;
     cde:	1d bc       	out	0x2d, r1	; 45
				TCNT1L_Reg = 0x00;
     ce0:	1c bc       	out	0x2c, r1	; 44
				TCCR2_Reg = 0x00; 
				TCNT2_Reg = 0x00;
				break;
			default: return INVALID_TIMER_SELECT;
		}
		return TIMER_OK;
     ce2:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER1: 
				TCCR1A_Reg = 0x00; 
				TCCR1B_Reg = 0x00; 
				TCNT1H_Reg = 0x00;
				TCNT1L_Reg = 0x00;
				break;
     ce4:	08 95       	ret
			case TIMER2: 
				TCCR2_Reg = 0x00; 
     ce6:	15 bc       	out	0x25, r1	; 37
				TCNT2_Reg = 0x00;
     ce8:	14 bc       	out	0x24, r1	; 36
				break;
			default: return INVALID_TIMER_SELECT;
		}
		return TIMER_OK;
     cea:	80 e0       	ldi	r24, 0x00	; 0
				TCNT1L_Reg = 0x00;
				break;
			case TIMER2: 
				TCCR2_Reg = 0x00; 
				TCNT2_Reg = 0x00;
				break;
     cec:	08 95       	ret
			default: return INVALID_TIMER_SELECT;
     cee:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TIMER_OK;
}
     cf0:	08 95       	ret

00000cf2 <get_timer_value>:
uint16_t get_timer_value(uint8_t timer) {
	
	uint16_t result = 0, M = 0, L = 0;
	
	/* Make sure that the timer is in the valid range */
	if (timer <= TIMER2) {
     cf2:	83 30       	cpi	r24, 0x03	; 3
     cf4:	98 f4       	brcc	.+38     	; 0xd1c <get_timer_value+0x2a>
		switch (timer) {
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	39 f0       	breq	.+14     	; 0xd08 <get_timer_value+0x16>
     cfa:	18 f0       	brcs	.+6      	; 0xd02 <get_timer_value+0x10>
     cfc:	82 30       	cpi	r24, 0x02	; 2
     cfe:	59 f0       	breq	.+22     	; 0xd16 <get_timer_value+0x24>
     d00:	10 c0       	rjmp	.+32     	; 0xd22 <get_timer_value+0x30>
			/* getting the value */
			case TIMER0: result = (uint16_t) TCNT0_Reg & 0x00FF; break;
     d02:	82 b7       	in	r24, 0x32	; 50
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	08 95       	ret
			case TIMER1: 
				M = TCNT1H_Reg & 0x00FF;
     d08:	8d b5       	in	r24, 0x2d	; 45
     d0a:	90 e0       	ldi	r25, 0x00	; 0
				L = TCNT1L_Reg & 0x00FF;
     d0c:	2c b5       	in	r18, 0x2c	; 44
				result = (M << 8) | L;
     d0e:	98 2f       	mov	r25, r24
     d10:	88 27       	eor	r24, r24
     d12:	82 2b       	or	r24, r18
				break;
     d14:	08 95       	ret
			case TIMER2: result = (uint16_t) TCNT2_Reg & 0x00FF; break;
     d16:	84 b5       	in	r24, 0x24	; 36
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	08 95       	ret
		return TIMER_OK;
}

uint16_t get_timer_value(uint8_t timer) {
	
	uint16_t result = 0, M = 0, L = 0;
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	08 95       	ret
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
				break;
			case TIMER2: result = (uint16_t) TCNT2_Reg & 0x00FF; break;
		}
	} else { /* ERROR invalid input (timer) */ }
	return result;
}
     d26:	08 95       	ret

00000d28 <stopwatch_start>:

EN_TIMER_ERROR stopwatch_start(ST_TIMER_t * timer){
     d28:	fc 01       	movw	r30, r24
	switch (timer->timerSelect) {
     d2a:	90 81       	ld	r25, Z
     d2c:	91 30       	cpi	r25, 0x01	; 1
     d2e:	c1 f1       	breq	.+112    	; 0xda0 <stopwatch_start+0x78>
     d30:	20 f0       	brcs	.+8      	; 0xd3a <stopwatch_start+0x12>
     d32:	92 30       	cpi	r25, 0x02	; 2
     d34:	09 f4       	brne	.+2      	; 0xd38 <stopwatch_start+0x10>
     d36:	67 c0       	rjmp	.+206    	; 0xe06 <stopwatch_start+0xde>
     d38:	99 c0       	rjmp	.+306    	; 0xe6c <stopwatch_start+0x144>
		case TIMER0:
			switch (timer->prescaler) {
     d3a:	81 81       	ldd	r24, Z+1	; 0x01
     d3c:	92 81       	ldd	r25, Z+2	; 0x02
     d3e:	80 34       	cpi	r24, 0x40	; 64
     d40:	91 05       	cpc	r25, r1
     d42:	c9 f0       	breq	.+50     	; 0xd76 <stopwatch_start+0x4e>
     d44:	30 f4       	brcc	.+12     	; 0xd52 <stopwatch_start+0x2a>
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	91 05       	cpc	r25, r1
     d4a:	59 f0       	breq	.+22     	; 0xd62 <stopwatch_start+0x3a>
     d4c:	08 97       	sbiw	r24, 0x08	; 8
     d4e:	71 f0       	breq	.+28     	; 0xd6c <stopwatch_start+0x44>
     d50:	8f c0       	rjmp	.+286    	; 0xe70 <stopwatch_start+0x148>
     d52:	81 15       	cp	r24, r1
     d54:	21 e0       	ldi	r18, 0x01	; 1
     d56:	92 07       	cpc	r25, r18
     d58:	b1 f0       	breq	.+44     	; 0xd86 <stopwatch_start+0x5e>
     d5a:	81 15       	cp	r24, r1
     d5c:	94 40       	sbci	r25, 0x04	; 4
     d5e:	c1 f0       	breq	.+48     	; 0xd90 <stopwatch_start+0x68>
     d60:	87 c0       	rjmp	.+270    	; 0xe70 <stopwatch_start+0x148>
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
     d62:	83 b7       	in	r24, 0x33	; 51
     d64:	81 60       	ori	r24, 0x01	; 1
     d66:	83 bf       	out	0x33, r24	; 51
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     d68:	80 e0       	ldi	r24, 0x00	; 0

EN_TIMER_ERROR stopwatch_start(ST_TIMER_t * timer){
	switch (timer->timerSelect) {
		case TIMER0:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
     d6a:	08 95       	ret
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
     d6c:	83 b7       	in	r24, 0x33	; 51
     d6e:	82 60       	ori	r24, 0x02	; 2
     d70:	83 bf       	out	0x33, r24	; 51
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     d72:	80 e0       	ldi	r24, 0x00	; 0
EN_TIMER_ERROR stopwatch_start(ST_TIMER_t * timer){
	switch (timer->timerSelect) {
		case TIMER0:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
     d74:	08 95       	ret
				case PRESCALER_64: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 1); break;
     d76:	83 b7       	in	r24, 0x33	; 51
     d78:	81 60       	ori	r24, 0x01	; 1
     d7a:	83 bf       	out	0x33, r24	; 51
     d7c:	83 b7       	in	r24, 0x33	; 51
     d7e:	82 60       	ori	r24, 0x02	; 2
     d80:	83 bf       	out	0x33, r24	; 51
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     d82:	80 e0       	ldi	r24, 0x00	; 0
	switch (timer->timerSelect) {
		case TIMER0:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 1); break;
     d84:	08 95       	ret
				case PRESCALER_256: SET_BIT(TCCR0_Reg, 2); break;
     d86:	83 b7       	in	r24, 0x33	; 51
     d88:	84 60       	ori	r24, 0x04	; 4
     d8a:	83 bf       	out	0x33, r24	; 51
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     d8c:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER0:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR0_Reg, 2); break;
     d8e:	08 95       	ret
				case PRESCALER_1024: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 2); break;
     d90:	83 b7       	in	r24, 0x33	; 51
     d92:	81 60       	ori	r24, 0x01	; 1
     d94:	83 bf       	out	0x33, r24	; 51
     d96:	83 b7       	in	r24, 0x33	; 51
     d98:	84 60       	ori	r24, 0x04	; 4
     d9a:	83 bf       	out	0x33, r24	; 51
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     d9c:	80 e0       	ldi	r24, 0x00	; 0
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR0_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 2); break;
     d9e:	08 95       	ret
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		case TIMER1:
			switch (timer->prescaler) {
     da0:	81 81       	ldd	r24, Z+1	; 0x01
     da2:	92 81       	ldd	r25, Z+2	; 0x02
     da4:	80 34       	cpi	r24, 0x40	; 64
     da6:	91 05       	cpc	r25, r1
     da8:	c9 f0       	breq	.+50     	; 0xddc <stopwatch_start+0xb4>
     daa:	30 f4       	brcc	.+12     	; 0xdb8 <stopwatch_start+0x90>
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	91 05       	cpc	r25, r1
     db0:	59 f0       	breq	.+22     	; 0xdc8 <stopwatch_start+0xa0>
     db2:	08 97       	sbiw	r24, 0x08	; 8
     db4:	71 f0       	breq	.+28     	; 0xdd2 <stopwatch_start+0xaa>
     db6:	5e c0       	rjmp	.+188    	; 0xe74 <stopwatch_start+0x14c>
     db8:	81 15       	cp	r24, r1
     dba:	21 e0       	ldi	r18, 0x01	; 1
     dbc:	92 07       	cpc	r25, r18
     dbe:	b1 f0       	breq	.+44     	; 0xdec <stopwatch_start+0xc4>
     dc0:	81 15       	cp	r24, r1
     dc2:	94 40       	sbci	r25, 0x04	; 4
     dc4:	c1 f0       	breq	.+48     	; 0xdf6 <stopwatch_start+0xce>
     dc6:	56 c0       	rjmp	.+172    	; 0xe74 <stopwatch_start+0x14c>
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
     dc8:	8e b5       	in	r24, 0x2e	; 46
     dca:	81 60       	ori	r24, 0x01	; 1
     dcc:	8e bd       	out	0x2e, r24	; 46
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     dce:	80 e0       	ldi	r24, 0x00	; 0
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		case TIMER1:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
     dd0:	08 95       	ret
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
     dd2:	8e b5       	in	r24, 0x2e	; 46
     dd4:	82 60       	ori	r24, 0x02	; 2
     dd6:	8e bd       	out	0x2e, r24	; 46
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     dd8:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
		case TIMER1:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
     dda:	08 95       	ret
				case PRESCALER_64: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 1); break;
     ddc:	8e b5       	in	r24, 0x2e	; 46
     dde:	81 60       	ori	r24, 0x01	; 1
     de0:	8e bd       	out	0x2e, r24	; 46
     de2:	8e b5       	in	r24, 0x2e	; 46
     de4:	82 60       	ori	r24, 0x02	; 2
     de6:	8e bd       	out	0x2e, r24	; 46
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     de8:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case TIMER1:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 1); break;
     dea:	08 95       	ret
				case PRESCALER_256: SET_BIT(TCCR1B_Reg, 2); break;
     dec:	8e b5       	in	r24, 0x2e	; 46
     dee:	84 60       	ori	r24, 0x04	; 4
     df0:	8e bd       	out	0x2e, r24	; 46
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     df2:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER1:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR1B_Reg, 2); break;
     df4:	08 95       	ret
				case PRESCALER_1024: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 2); break;
     df6:	8e b5       	in	r24, 0x2e	; 46
     df8:	81 60       	ori	r24, 0x01	; 1
     dfa:	8e bd       	out	0x2e, r24	; 46
     dfc:	8e b5       	in	r24, 0x2e	; 46
     dfe:	84 60       	ori	r24, 0x04	; 4
     e00:	8e bd       	out	0x2e, r24	; 46
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     e02:	80 e0       	ldi	r24, 0x00	; 0
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR1B_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 2); break;
     e04:	08 95       	ret
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		case TIMER2:
			switch (timer->prescaler) {
     e06:	81 81       	ldd	r24, Z+1	; 0x01
     e08:	92 81       	ldd	r25, Z+2	; 0x02
     e0a:	80 34       	cpi	r24, 0x40	; 64
     e0c:	91 05       	cpc	r25, r1
     e0e:	c9 f0       	breq	.+50     	; 0xe42 <stopwatch_start+0x11a>
     e10:	30 f4       	brcc	.+12     	; 0xe1e <stopwatch_start+0xf6>
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	91 05       	cpc	r25, r1
     e16:	59 f0       	breq	.+22     	; 0xe2e <stopwatch_start+0x106>
     e18:	08 97       	sbiw	r24, 0x08	; 8
     e1a:	71 f0       	breq	.+28     	; 0xe38 <stopwatch_start+0x110>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <stopwatch_start+0x150>
     e1e:	81 15       	cp	r24, r1
     e20:	21 e0       	ldi	r18, 0x01	; 1
     e22:	92 07       	cpc	r25, r18
     e24:	b1 f0       	breq	.+44     	; 0xe52 <stopwatch_start+0x12a>
     e26:	81 15       	cp	r24, r1
     e28:	94 40       	sbci	r25, 0x04	; 4
     e2a:	c1 f0       	breq	.+48     	; 0xe5c <stopwatch_start+0x134>
     e2c:	25 c0       	rjmp	.+74     	; 0xe78 <stopwatch_start+0x150>
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
     e2e:	85 b5       	in	r24, 0x25	; 37
     e30:	81 60       	ori	r24, 0x01	; 1
     e32:	85 bd       	out	0x25, r24	; 37
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     e34:	80 e0       	ldi	r24, 0x00	; 0
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		case TIMER2:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
     e36:	08 95       	ret
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
     e38:	85 b5       	in	r24, 0x25	; 37
     e3a:	82 60       	ori	r24, 0x02	; 2
     e3c:	85 bd       	out	0x25, r24	; 37
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     e3e:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
		case TIMER2:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
     e40:	08 95       	ret
				case PRESCALER_64: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 1); break;
     e42:	85 b5       	in	r24, 0x25	; 37
     e44:	81 60       	ori	r24, 0x01	; 1
     e46:	85 bd       	out	0x25, r24	; 37
     e48:	85 b5       	in	r24, 0x25	; 37
     e4a:	82 60       	ori	r24, 0x02	; 2
     e4c:	85 bd       	out	0x25, r24	; 37
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     e4e:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case TIMER2:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 1); break;
     e50:	08 95       	ret
				case PRESCALER_256: SET_BIT(TCCR2_Reg, 2); break;
     e52:	85 b5       	in	r24, 0x25	; 37
     e54:	84 60       	ori	r24, 0x04	; 4
     e56:	85 bd       	out	0x25, r24	; 37
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     e58:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER2:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR2_Reg, 2); break;
     e5a:	08 95       	ret
				case PRESCALER_1024: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 2); break;
     e5c:	85 b5       	in	r24, 0x25	; 37
     e5e:	81 60       	ori	r24, 0x01	; 1
     e60:	85 bd       	out	0x25, r24	; 37
     e62:	85 b5       	in	r24, 0x25	; 37
     e64:	84 60       	ori	r24, 0x04	; 4
     e66:	85 bd       	out	0x25, r24	; 37
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     e68:	80 e0       	ldi	r24, 0x00	; 0
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR2_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 2); break;
     e6a:	08 95       	ret
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	08 95       	ret
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR0_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 2); break;
				default: return INVALID_PRESCALER; // wrong prescaler
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	08 95       	ret
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR1B_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 2); break;
				default: return INVALID_PRESCALER; // wrong prescaler
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	08 95       	ret
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR2_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 2); break;
				default: return INVALID_PRESCALER; // wrong prescaler
     e78:	82 e0       	ldi	r24, 0x02	; 2
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
}
     e7a:	08 95       	ret

00000e7c <stopwatch_stop>:

EN_TIMER_ERROR stopwatch_stop(ST_TIMER_t * timer, uint16_t * valueRead){
     e7c:	4f 92       	push	r4
     e7e:	5f 92       	push	r5
     e80:	6f 92       	push	r6
     e82:	7f 92       	push	r7
     e84:	8f 92       	push	r8
     e86:	9f 92       	push	r9
     e88:	af 92       	push	r10
     e8a:	bf 92       	push	r11
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	ec 01       	movw	r28, r24
     e9a:	7b 01       	movw	r14, r22

	uint16_t timer_value = get_timer_value(timer->timerSelect);
     e9c:	88 81       	ld	r24, Y
     e9e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <get_timer_value>
     ea2:	8c 01       	movw	r16, r24
	double t_max_delay = 0.0, t_tick = (1000.0 * (timer->prescaler)) / F_CPU; // t_tick [ in milli seconds ]
     ea4:	69 81       	ldd	r22, Y+1	; 0x01
     ea6:	7a 81       	ldd	r23, Y+2	; 0x02
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	4a e7       	ldi	r20, 0x7A	; 122
     eb6:	54 e4       	ldi	r21, 0x44	; 68
     eb8:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	34 e2       	ldi	r19, 0x24	; 36
     ec0:	44 e7       	ldi	r20, 0x74	; 116
     ec2:	59 e4       	ldi	r21, 0x49	; 73
     ec4:	0e 94 a7 09 	call	0x134e	; 0x134e <__divsf3>
     ec8:	4b 01       	movw	r8, r22
     eca:	5c 01       	movw	r10, r24

	switch (timer->timerSelect) {
     ecc:	88 81       	ld	r24, Y
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	a1 f1       	breq	.+104    	; 0xf3a <stopwatch_stop+0xbe>
     ed2:	20 f0       	brcs	.+8      	; 0xedc <stopwatch_stop+0x60>
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	09 f4       	brne	.+2      	; 0xeda <stopwatch_stop+0x5e>
     ed8:	61 c0       	rjmp	.+194    	; 0xf9c <stopwatch_stop+0x120>
     eda:	94 c0       	rjmp	.+296    	; 0x1004 <stopwatch_stop+0x188>
		case TIMER0: 
			TCCR0_Reg = 0x00; 
     edc:	13 be       	out	0x33, r1	; 51
			TCNT0_Reg = 0x00;
     ede:	12 be       	out	0x32, r1	; 50
			t_max_delay = 256.0 * t_tick; // 2^8 = 256
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e8       	ldi	r20, 0x80	; 128
     ee6:	53 e4       	ldi	r21, 0x43	; 67
     ee8:	c5 01       	movw	r24, r10
     eea:	b4 01       	movw	r22, r8
     eec:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     ef0:	2b 01       	movw	r4, r22
     ef2:	3c 01       	movw	r6, r24
			* valueRead = (uint16_t) (sw_n_overflow * t_max_delay + t_tick * timer_value);
     ef4:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <sw_n_overflow>
     ef8:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <sw_n_overflow+0x1>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     f04:	a3 01       	movw	r20, r6
     f06:	92 01       	movw	r18, r4
     f08:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     f0c:	2b 01       	movw	r4, r22
     f0e:	3c 01       	movw	r6, r24
     f10:	b8 01       	movw	r22, r16
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     f1a:	a5 01       	movw	r20, r10
     f1c:	94 01       	movw	r18, r8
     f1e:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     f22:	9b 01       	movw	r18, r22
     f24:	ac 01       	movw	r20, r24
     f26:	c3 01       	movw	r24, r6
     f28:	b2 01       	movw	r22, r4
     f2a:	0e 94 24 09 	call	0x1248	; 0x1248 <__addsf3>
     f2e:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     f32:	f7 01       	movw	r30, r14
     f34:	71 83       	std	Z+1, r23	; 0x01
     f36:	60 83       	st	Z, r22
			break;
     f38:	5f c0       	rjmp	.+190    	; 0xff8 <stopwatch_stop+0x17c>
		case TIMER1: 
			TCCR1A_Reg = 0x00; 
     f3a:	1f bc       	out	0x2f, r1	; 47
			TCCR1B_Reg = 0x00; 
     f3c:	1e bc       	out	0x2e, r1	; 46
			TCNT1H_Reg = 0x00;
     f3e:	1d bc       	out	0x2d, r1	; 45
			TCNT1L_Reg = 0x00;
     f40:	1c bc       	out	0x2c, r1	; 44
			t_max_delay = 65536.0 * t_tick; // 2^16 = 65536
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e8       	ldi	r20, 0x80	; 128
     f48:	57 e4       	ldi	r21, 0x47	; 71
     f4a:	c5 01       	movw	r24, r10
     f4c:	b4 01       	movw	r22, r8
     f4e:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     f52:	2b 01       	movw	r4, r22
     f54:	3c 01       	movw	r6, r24
			* valueRead = (uint16_t) (sw_n_overflow * t_max_delay + t_tick * timer_value);
     f56:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <sw_n_overflow>
     f5a:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <sw_n_overflow+0x1>
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     f66:	a3 01       	movw	r20, r6
     f68:	92 01       	movw	r18, r4
     f6a:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     f6e:	2b 01       	movw	r4, r22
     f70:	3c 01       	movw	r6, r24
     f72:	b8 01       	movw	r22, r16
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     f7c:	a5 01       	movw	r20, r10
     f7e:	94 01       	movw	r18, r8
     f80:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     f84:	9b 01       	movw	r18, r22
     f86:	ac 01       	movw	r20, r24
     f88:	c3 01       	movw	r24, r6
     f8a:	b2 01       	movw	r22, r4
     f8c:	0e 94 24 09 	call	0x1248	; 0x1248 <__addsf3>
     f90:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     f94:	f7 01       	movw	r30, r14
     f96:	71 83       	std	Z+1, r23	; 0x01
     f98:	60 83       	st	Z, r22
			break;
     f9a:	2e c0       	rjmp	.+92     	; 0xff8 <stopwatch_stop+0x17c>
		case TIMER2: 
			TCCR2_Reg = 0x00; 
     f9c:	15 bc       	out	0x25, r1	; 37
			TCNT2_Reg = 0x00;
     f9e:	14 bc       	out	0x24, r1	; 36
			t_max_delay = 256.0 * t_tick; // 2^8 = 256
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e8       	ldi	r20, 0x80	; 128
     fa6:	53 e4       	ldi	r21, 0x43	; 67
     fa8:	c5 01       	movw	r24, r10
     faa:	b4 01       	movw	r22, r8
     fac:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     fb0:	2b 01       	movw	r4, r22
     fb2:	3c 01       	movw	r6, r24
			* valueRead = (uint16_t) (sw_n_overflow * t_max_delay + t_tick * timer_value);
     fb4:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <sw_n_overflow>
     fb8:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <sw_n_overflow+0x1>
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     fc4:	a3 01       	movw	r20, r6
     fc6:	92 01       	movw	r18, r4
     fc8:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     fcc:	2b 01       	movw	r4, r22
     fce:	3c 01       	movw	r6, r24
     fd0:	b8 01       	movw	r22, r16
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     fda:	a5 01       	movw	r20, r10
     fdc:	94 01       	movw	r18, r8
     fde:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c3 01       	movw	r24, r6
     fe8:	b2 01       	movw	r22, r4
     fea:	0e 94 24 09 	call	0x1248	; 0x1248 <__addsf3>
     fee:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     ff2:	f7 01       	movw	r30, r14
     ff4:	71 83       	std	Z+1, r23	; 0x01
     ff6:	60 83       	st	Z, r22
			break;
		default: return INVALID_TIMER_SELECT;  /* ERROR invalid input (timer) */
	}
	sw_n_overflow = 0;
     ff8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <sw_n_overflow+0x1>
     ffc:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <sw_n_overflow>
	return TIMER_OK;
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <stopwatch_stop+0x18a>
			TCCR2_Reg = 0x00; 
			TCNT2_Reg = 0x00;
			t_max_delay = 256.0 * t_tick; // 2^8 = 256
			* valueRead = (uint16_t) (sw_n_overflow * t_max_delay + t_tick * timer_value);
			break;
		default: return INVALID_TIMER_SELECT;  /* ERROR invalid input (timer) */
    1004:	81 e0       	ldi	r24, 0x01	; 1
	}
	sw_n_overflow = 0;
	return TIMER_OK;
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	ff 90       	pop	r15
    1010:	ef 90       	pop	r14
    1012:	bf 90       	pop	r11
    1014:	af 90       	pop	r10
    1016:	9f 90       	pop	r9
    1018:	8f 90       	pop	r8
    101a:	7f 90       	pop	r7
    101c:	6f 90       	pop	r6
    101e:	5f 90       	pop	r5
    1020:	4f 90       	pop	r4
    1022:	08 95       	ret

00001024 <__vector_11>:

//////////////////////////////////////////////////////////////////////////

/////////////////////////// ISR OVF functions ////////////////////////////

ISR(TIMER0_OVF_vect) {
    1024:	1f 92       	push	r1
    1026:	0f 92       	push	r0
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	0f 92       	push	r0
    102c:	11 24       	eor	r1, r1
    102e:	2f 93       	push	r18
    1030:	3f 93       	push	r19
    1032:	4f 93       	push	r20
    1034:	5f 93       	push	r21
    1036:	6f 93       	push	r22
    1038:	7f 93       	push	r23
    103a:	8f 93       	push	r24
    103c:	9f 93       	push	r25
    103e:	af 93       	push	r26
    1040:	bf 93       	push	r27
    1042:	ef 93       	push	r30
    1044:	ff 93       	push	r31
    T0_OVF_PTR_TO_FUN();
    1046:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <T0_OVF_PTR_TO_FUN>
    104a:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <T0_OVF_PTR_TO_FUN+0x1>
    104e:	09 95       	icall
}
    1050:	ff 91       	pop	r31
    1052:	ef 91       	pop	r30
    1054:	bf 91       	pop	r27
    1056:	af 91       	pop	r26
    1058:	9f 91       	pop	r25
    105a:	8f 91       	pop	r24
    105c:	7f 91       	pop	r23
    105e:	6f 91       	pop	r22
    1060:	5f 91       	pop	r21
    1062:	4f 91       	pop	r20
    1064:	3f 91       	pop	r19
    1066:	2f 91       	pop	r18
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	0f 90       	pop	r0
    106e:	1f 90       	pop	r1
    1070:	18 95       	reti

00001072 <__vector_9>:

ISR(TIMER1_OVF_vect) {
    1072:	1f 92       	push	r1
    1074:	0f 92       	push	r0
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	0f 92       	push	r0
    107a:	11 24       	eor	r1, r1
    107c:	2f 93       	push	r18
    107e:	3f 93       	push	r19
    1080:	4f 93       	push	r20
    1082:	5f 93       	push	r21
    1084:	6f 93       	push	r22
    1086:	7f 93       	push	r23
    1088:	8f 93       	push	r24
    108a:	9f 93       	push	r25
    108c:	af 93       	push	r26
    108e:	bf 93       	push	r27
    1090:	ef 93       	push	r30
    1092:	ff 93       	push	r31
    T1_OVF_PTR_TO_FUN();
    1094:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <T1_OVF_PTR_TO_FUN>
    1098:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <T1_OVF_PTR_TO_FUN+0x1>
    109c:	09 95       	icall
}
    109e:	ff 91       	pop	r31
    10a0:	ef 91       	pop	r30
    10a2:	bf 91       	pop	r27
    10a4:	af 91       	pop	r26
    10a6:	9f 91       	pop	r25
    10a8:	8f 91       	pop	r24
    10aa:	7f 91       	pop	r23
    10ac:	6f 91       	pop	r22
    10ae:	5f 91       	pop	r21
    10b0:	4f 91       	pop	r20
    10b2:	3f 91       	pop	r19
    10b4:	2f 91       	pop	r18
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f 90       	pop	r0
    10bc:	1f 90       	pop	r1
    10be:	18 95       	reti

000010c0 <__vector_5>:

ISR(TIMER2_OVF_vect) {
    10c0:	1f 92       	push	r1
    10c2:	0f 92       	push	r0
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	0f 92       	push	r0
    10c8:	11 24       	eor	r1, r1
    10ca:	2f 93       	push	r18
    10cc:	3f 93       	push	r19
    10ce:	4f 93       	push	r20
    10d0:	5f 93       	push	r21
    10d2:	6f 93       	push	r22
    10d4:	7f 93       	push	r23
    10d6:	8f 93       	push	r24
    10d8:	9f 93       	push	r25
    10da:	af 93       	push	r26
    10dc:	bf 93       	push	r27
    10de:	ef 93       	push	r30
    10e0:	ff 93       	push	r31
    T2_OVF_PTR_TO_FUN();
    10e2:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <T2_OVF_PTR_TO_FUN>
    10e6:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <T2_OVF_PTR_TO_FUN+0x1>
    10ea:	09 95       	icall
}
    10ec:	ff 91       	pop	r31
    10ee:	ef 91       	pop	r30
    10f0:	bf 91       	pop	r27
    10f2:	af 91       	pop	r26
    10f4:	9f 91       	pop	r25
    10f6:	8f 91       	pop	r24
    10f8:	7f 91       	pop	r23
    10fa:	6f 91       	pop	r22
    10fc:	5f 91       	pop	r21
    10fe:	4f 91       	pop	r20
    1100:	3f 91       	pop	r19
    1102:	2f 91       	pop	r18
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <__vector_10>:

/////////////////////////// ISR CMP functions ////////////////////////////

ISR(TIMER0_COMP_vect) {
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	2f 93       	push	r18
    111a:	3f 93       	push	r19
    111c:	4f 93       	push	r20
    111e:	5f 93       	push	r21
    1120:	6f 93       	push	r22
    1122:	7f 93       	push	r23
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	af 93       	push	r26
    112a:	bf 93       	push	r27
    112c:	ef 93       	push	r30
    112e:	ff 93       	push	r31
    T0_CMP_PTR_TO_FUN();
    1130:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <T0_CMP_PTR_TO_FUN>
    1134:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <T0_CMP_PTR_TO_FUN+0x1>
    1138:	09 95       	icall
}
    113a:	ff 91       	pop	r31
    113c:	ef 91       	pop	r30
    113e:	bf 91       	pop	r27
    1140:	af 91       	pop	r26
    1142:	9f 91       	pop	r25
    1144:	8f 91       	pop	r24
    1146:	7f 91       	pop	r23
    1148:	6f 91       	pop	r22
    114a:	5f 91       	pop	r21
    114c:	4f 91       	pop	r20
    114e:	3f 91       	pop	r19
    1150:	2f 91       	pop	r18
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    115c:	1f 92       	push	r1
    115e:	0f 92       	push	r0
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	0f 92       	push	r0
    1164:	11 24       	eor	r1, r1
    1166:	2f 93       	push	r18
    1168:	3f 93       	push	r19
    116a:	4f 93       	push	r20
    116c:	5f 93       	push	r21
    116e:	6f 93       	push	r22
    1170:	7f 93       	push	r23
    1172:	8f 93       	push	r24
    1174:	9f 93       	push	r25
    1176:	af 93       	push	r26
    1178:	bf 93       	push	r27
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
    T1_CMPA_PTR_TO_FUN();
    117e:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <T1_CMPA_PTR_TO_FUN>
    1182:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <T1_CMPA_PTR_TO_FUN+0x1>
    1186:	09 95       	icall
}
    1188:	ff 91       	pop	r31
    118a:	ef 91       	pop	r30
    118c:	bf 91       	pop	r27
    118e:	af 91       	pop	r26
    1190:	9f 91       	pop	r25
    1192:	8f 91       	pop	r24
    1194:	7f 91       	pop	r23
    1196:	6f 91       	pop	r22
    1198:	5f 91       	pop	r21
    119a:	4f 91       	pop	r20
    119c:	3f 91       	pop	r19
    119e:	2f 91       	pop	r18
    11a0:	0f 90       	pop	r0
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	0f 90       	pop	r0
    11a6:	1f 90       	pop	r1
    11a8:	18 95       	reti

000011aa <__vector_8>:

ISR(TIMER1_COMPB_vect) {
    11aa:	1f 92       	push	r1
    11ac:	0f 92       	push	r0
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	0f 92       	push	r0
    11b2:	11 24       	eor	r1, r1
    11b4:	2f 93       	push	r18
    11b6:	3f 93       	push	r19
    11b8:	4f 93       	push	r20
    11ba:	5f 93       	push	r21
    11bc:	6f 93       	push	r22
    11be:	7f 93       	push	r23
    11c0:	8f 93       	push	r24
    11c2:	9f 93       	push	r25
    11c4:	af 93       	push	r26
    11c6:	bf 93       	push	r27
    11c8:	ef 93       	push	r30
    11ca:	ff 93       	push	r31
    T1_CMPB_PTR_TO_FUN();
    11cc:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <T1_CMPB_PTR_TO_FUN>
    11d0:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <T1_CMPB_PTR_TO_FUN+0x1>
    11d4:	09 95       	icall
}
    11d6:	ff 91       	pop	r31
    11d8:	ef 91       	pop	r30
    11da:	bf 91       	pop	r27
    11dc:	af 91       	pop	r26
    11de:	9f 91       	pop	r25
    11e0:	8f 91       	pop	r24
    11e2:	7f 91       	pop	r23
    11e4:	6f 91       	pop	r22
    11e6:	5f 91       	pop	r21
    11e8:	4f 91       	pop	r20
    11ea:	3f 91       	pop	r19
    11ec:	2f 91       	pop	r18
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	0f 90       	pop	r0
    11f4:	1f 90       	pop	r1
    11f6:	18 95       	reti

000011f8 <__vector_4>:

ISR(TIMER2_COMP_vect) {
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	6f 93       	push	r22
    120c:	7f 93       	push	r23
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25
    1212:	af 93       	push	r26
    1214:	bf 93       	push	r27
    1216:	ef 93       	push	r30
    1218:	ff 93       	push	r31
    T2_CMP_PTR_TO_FUN();
    121a:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <T2_CMP_PTR_TO_FUN>
    121e:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <T2_CMP_PTR_TO_FUN+0x1>
    1222:	09 95       	icall
    1224:	ff 91       	pop	r31
    1226:	ef 91       	pop	r30
    1228:	bf 91       	pop	r27
    122a:	af 91       	pop	r26
    122c:	9f 91       	pop	r25
    122e:	8f 91       	pop	r24
    1230:	7f 91       	pop	r23
    1232:	6f 91       	pop	r22
    1234:	5f 91       	pop	r21
    1236:	4f 91       	pop	r20
    1238:	3f 91       	pop	r19
    123a:	2f 91       	pop	r18
    123c:	0f 90       	pop	r0
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	0f 90       	pop	r0
    1242:	1f 90       	pop	r1
    1244:	18 95       	reti

00001246 <__subsf3>:
    1246:	50 58       	subi	r21, 0x80	; 128

00001248 <__addsf3>:
    1248:	bb 27       	eor	r27, r27
    124a:	aa 27       	eor	r26, r26
    124c:	0e 94 3b 09 	call	0x1276	; 0x1276 <__addsf3x>
    1250:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__fp_round>
    1254:	0e 94 be 0a 	call	0x157c	; 0x157c <__fp_pscA>
    1258:	38 f0       	brcs	.+14     	; 0x1268 <__addsf3+0x20>
    125a:	0e 94 c5 0a 	call	0x158a	; 0x158a <__fp_pscB>
    125e:	20 f0       	brcs	.+8      	; 0x1268 <__addsf3+0x20>
    1260:	39 f4       	brne	.+14     	; 0x1270 <__addsf3+0x28>
    1262:	9f 3f       	cpi	r25, 0xFF	; 255
    1264:	19 f4       	brne	.+6      	; 0x126c <__addsf3+0x24>
    1266:	26 f4       	brtc	.+8      	; 0x1270 <__addsf3+0x28>
    1268:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_nan>
    126c:	0e f4       	brtc	.+2      	; 0x1270 <__addsf3+0x28>
    126e:	e0 95       	com	r30
    1270:	e7 fb       	bst	r30, 7
    1272:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_inf>

00001276 <__addsf3x>:
    1276:	e9 2f       	mov	r30, r25
    1278:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__fp_split3>
    127c:	58 f3       	brcs	.-42     	; 0x1254 <__addsf3+0xc>
    127e:	ba 17       	cp	r27, r26
    1280:	62 07       	cpc	r22, r18
    1282:	73 07       	cpc	r23, r19
    1284:	84 07       	cpc	r24, r20
    1286:	95 07       	cpc	r25, r21
    1288:	20 f0       	brcs	.+8      	; 0x1292 <__addsf3x+0x1c>
    128a:	79 f4       	brne	.+30     	; 0x12aa <__addsf3x+0x34>
    128c:	a6 f5       	brtc	.+104    	; 0x12f6 <__addsf3x+0x80>
    128e:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__fp_zero>
    1292:	0e f4       	brtc	.+2      	; 0x1296 <__addsf3x+0x20>
    1294:	e0 95       	com	r30
    1296:	0b 2e       	mov	r0, r27
    1298:	ba 2f       	mov	r27, r26
    129a:	a0 2d       	mov	r26, r0
    129c:	0b 01       	movw	r0, r22
    129e:	b9 01       	movw	r22, r18
    12a0:	90 01       	movw	r18, r0
    12a2:	0c 01       	movw	r0, r24
    12a4:	ca 01       	movw	r24, r20
    12a6:	a0 01       	movw	r20, r0
    12a8:	11 24       	eor	r1, r1
    12aa:	ff 27       	eor	r31, r31
    12ac:	59 1b       	sub	r21, r25
    12ae:	99 f0       	breq	.+38     	; 0x12d6 <__addsf3x+0x60>
    12b0:	59 3f       	cpi	r21, 0xF9	; 249
    12b2:	50 f4       	brcc	.+20     	; 0x12c8 <__addsf3x+0x52>
    12b4:	50 3e       	cpi	r21, 0xE0	; 224
    12b6:	68 f1       	brcs	.+90     	; 0x1312 <__addsf3x+0x9c>
    12b8:	1a 16       	cp	r1, r26
    12ba:	f0 40       	sbci	r31, 0x00	; 0
    12bc:	a2 2f       	mov	r26, r18
    12be:	23 2f       	mov	r18, r19
    12c0:	34 2f       	mov	r19, r20
    12c2:	44 27       	eor	r20, r20
    12c4:	58 5f       	subi	r21, 0xF8	; 248
    12c6:	f3 cf       	rjmp	.-26     	; 0x12ae <__addsf3x+0x38>
    12c8:	46 95       	lsr	r20
    12ca:	37 95       	ror	r19
    12cc:	27 95       	ror	r18
    12ce:	a7 95       	ror	r26
    12d0:	f0 40       	sbci	r31, 0x00	; 0
    12d2:	53 95       	inc	r21
    12d4:	c9 f7       	brne	.-14     	; 0x12c8 <__addsf3x+0x52>
    12d6:	7e f4       	brtc	.+30     	; 0x12f6 <__addsf3x+0x80>
    12d8:	1f 16       	cp	r1, r31
    12da:	ba 0b       	sbc	r27, r26
    12dc:	62 0b       	sbc	r22, r18
    12de:	73 0b       	sbc	r23, r19
    12e0:	84 0b       	sbc	r24, r20
    12e2:	ba f0       	brmi	.+46     	; 0x1312 <__addsf3x+0x9c>
    12e4:	91 50       	subi	r25, 0x01	; 1
    12e6:	a1 f0       	breq	.+40     	; 0x1310 <__addsf3x+0x9a>
    12e8:	ff 0f       	add	r31, r31
    12ea:	bb 1f       	adc	r27, r27
    12ec:	66 1f       	adc	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	c2 f7       	brpl	.-16     	; 0x12e4 <__addsf3x+0x6e>
    12f4:	0e c0       	rjmp	.+28     	; 0x1312 <__addsf3x+0x9c>
    12f6:	ba 0f       	add	r27, r26
    12f8:	62 1f       	adc	r22, r18
    12fa:	73 1f       	adc	r23, r19
    12fc:	84 1f       	adc	r24, r20
    12fe:	48 f4       	brcc	.+18     	; 0x1312 <__addsf3x+0x9c>
    1300:	87 95       	ror	r24
    1302:	77 95       	ror	r23
    1304:	67 95       	ror	r22
    1306:	b7 95       	ror	r27
    1308:	f7 95       	ror	r31
    130a:	9e 3f       	cpi	r25, 0xFE	; 254
    130c:	08 f0       	brcs	.+2      	; 0x1310 <__addsf3x+0x9a>
    130e:	b0 cf       	rjmp	.-160    	; 0x1270 <__addsf3+0x28>
    1310:	93 95       	inc	r25
    1312:	88 0f       	add	r24, r24
    1314:	08 f0       	brcs	.+2      	; 0x1318 <__addsf3x+0xa2>
    1316:	99 27       	eor	r25, r25
    1318:	ee 0f       	add	r30, r30
    131a:	97 95       	ror	r25
    131c:	87 95       	ror	r24
    131e:	08 95       	ret

00001320 <ceil>:
    1320:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__fp_trunc>
    1324:	90 f0       	brcs	.+36     	; 0x134a <ceil+0x2a>
    1326:	9f 37       	cpi	r25, 0x7F	; 127
    1328:	48 f4       	brcc	.+18     	; 0x133c <ceil+0x1c>
    132a:	91 11       	cpse	r25, r1
    132c:	16 f4       	brtc	.+4      	; 0x1332 <ceil+0x12>
    132e:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__fp_szero>
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	80 e8       	ldi	r24, 0x80	; 128
    1338:	9f e3       	ldi	r25, 0x3F	; 63
    133a:	08 95       	ret
    133c:	26 f0       	brts	.+8      	; 0x1346 <ceil+0x26>
    133e:	1b 16       	cp	r1, r27
    1340:	61 1d       	adc	r22, r1
    1342:	71 1d       	adc	r23, r1
    1344:	81 1d       	adc	r24, r1
    1346:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__fp_mintl>
    134a:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <__fp_mpack>

0000134e <__divsf3>:
    134e:	0e 94 bb 09 	call	0x1376	; 0x1376 <__divsf3x>
    1352:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__fp_round>
    1356:	0e 94 c5 0a 	call	0x158a	; 0x158a <__fp_pscB>
    135a:	58 f0       	brcs	.+22     	; 0x1372 <__divsf3+0x24>
    135c:	0e 94 be 0a 	call	0x157c	; 0x157c <__fp_pscA>
    1360:	40 f0       	brcs	.+16     	; 0x1372 <__divsf3+0x24>
    1362:	29 f4       	brne	.+10     	; 0x136e <__divsf3+0x20>
    1364:	5f 3f       	cpi	r21, 0xFF	; 255
    1366:	29 f0       	breq	.+10     	; 0x1372 <__divsf3+0x24>
    1368:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_inf>
    136c:	51 11       	cpse	r21, r1
    136e:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__fp_szero>
    1372:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_nan>

00001376 <__divsf3x>:
    1376:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__fp_split3>
    137a:	68 f3       	brcs	.-38     	; 0x1356 <__divsf3+0x8>

0000137c <__divsf3_pse>:
    137c:	99 23       	and	r25, r25
    137e:	b1 f3       	breq	.-20     	; 0x136c <__divsf3+0x1e>
    1380:	55 23       	and	r21, r21
    1382:	91 f3       	breq	.-28     	; 0x1368 <__divsf3+0x1a>
    1384:	95 1b       	sub	r25, r21
    1386:	55 0b       	sbc	r21, r21
    1388:	bb 27       	eor	r27, r27
    138a:	aa 27       	eor	r26, r26
    138c:	62 17       	cp	r22, r18
    138e:	73 07       	cpc	r23, r19
    1390:	84 07       	cpc	r24, r20
    1392:	38 f0       	brcs	.+14     	; 0x13a2 <__divsf3_pse+0x26>
    1394:	9f 5f       	subi	r25, 0xFF	; 255
    1396:	5f 4f       	sbci	r21, 0xFF	; 255
    1398:	22 0f       	add	r18, r18
    139a:	33 1f       	adc	r19, r19
    139c:	44 1f       	adc	r20, r20
    139e:	aa 1f       	adc	r26, r26
    13a0:	a9 f3       	breq	.-22     	; 0x138c <__divsf3_pse+0x10>
    13a2:	35 d0       	rcall	.+106    	; 0x140e <__divsf3_pse+0x92>
    13a4:	0e 2e       	mov	r0, r30
    13a6:	3a f0       	brmi	.+14     	; 0x13b6 <__divsf3_pse+0x3a>
    13a8:	e0 e8       	ldi	r30, 0x80	; 128
    13aa:	32 d0       	rcall	.+100    	; 0x1410 <__divsf3_pse+0x94>
    13ac:	91 50       	subi	r25, 0x01	; 1
    13ae:	50 40       	sbci	r21, 0x00	; 0
    13b0:	e6 95       	lsr	r30
    13b2:	00 1c       	adc	r0, r0
    13b4:	ca f7       	brpl	.-14     	; 0x13a8 <__divsf3_pse+0x2c>
    13b6:	2b d0       	rcall	.+86     	; 0x140e <__divsf3_pse+0x92>
    13b8:	fe 2f       	mov	r31, r30
    13ba:	29 d0       	rcall	.+82     	; 0x140e <__divsf3_pse+0x92>
    13bc:	66 0f       	add	r22, r22
    13be:	77 1f       	adc	r23, r23
    13c0:	88 1f       	adc	r24, r24
    13c2:	bb 1f       	adc	r27, r27
    13c4:	26 17       	cp	r18, r22
    13c6:	37 07       	cpc	r19, r23
    13c8:	48 07       	cpc	r20, r24
    13ca:	ab 07       	cpc	r26, r27
    13cc:	b0 e8       	ldi	r27, 0x80	; 128
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <__divsf3_pse+0x56>
    13d0:	bb 0b       	sbc	r27, r27
    13d2:	80 2d       	mov	r24, r0
    13d4:	bf 01       	movw	r22, r30
    13d6:	ff 27       	eor	r31, r31
    13d8:	93 58       	subi	r25, 0x83	; 131
    13da:	5f 4f       	sbci	r21, 0xFF	; 255
    13dc:	3a f0       	brmi	.+14     	; 0x13ec <__divsf3_pse+0x70>
    13de:	9e 3f       	cpi	r25, 0xFE	; 254
    13e0:	51 05       	cpc	r21, r1
    13e2:	78 f0       	brcs	.+30     	; 0x1402 <__divsf3_pse+0x86>
    13e4:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_inf>
    13e8:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__fp_szero>
    13ec:	5f 3f       	cpi	r21, 0xFF	; 255
    13ee:	e4 f3       	brlt	.-8      	; 0x13e8 <__divsf3_pse+0x6c>
    13f0:	98 3e       	cpi	r25, 0xE8	; 232
    13f2:	d4 f3       	brlt	.-12     	; 0x13e8 <__divsf3_pse+0x6c>
    13f4:	86 95       	lsr	r24
    13f6:	77 95       	ror	r23
    13f8:	67 95       	ror	r22
    13fa:	b7 95       	ror	r27
    13fc:	f7 95       	ror	r31
    13fe:	9f 5f       	subi	r25, 0xFF	; 255
    1400:	c9 f7       	brne	.-14     	; 0x13f4 <__divsf3_pse+0x78>
    1402:	88 0f       	add	r24, r24
    1404:	91 1d       	adc	r25, r1
    1406:	96 95       	lsr	r25
    1408:	87 95       	ror	r24
    140a:	97 f9       	bld	r25, 7
    140c:	08 95       	ret
    140e:	e1 e0       	ldi	r30, 0x01	; 1
    1410:	66 0f       	add	r22, r22
    1412:	77 1f       	adc	r23, r23
    1414:	88 1f       	adc	r24, r24
    1416:	bb 1f       	adc	r27, r27
    1418:	62 17       	cp	r22, r18
    141a:	73 07       	cpc	r23, r19
    141c:	84 07       	cpc	r24, r20
    141e:	ba 07       	cpc	r27, r26
    1420:	20 f0       	brcs	.+8      	; 0x142a <__divsf3_pse+0xae>
    1422:	62 1b       	sub	r22, r18
    1424:	73 0b       	sbc	r23, r19
    1426:	84 0b       	sbc	r24, r20
    1428:	ba 0b       	sbc	r27, r26
    142a:	ee 1f       	adc	r30, r30
    142c:	88 f7       	brcc	.-30     	; 0x1410 <__divsf3_pse+0x94>
    142e:	e0 95       	com	r30
    1430:	08 95       	ret

00001432 <__fixsfsi>:
    1432:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
    1436:	68 94       	set
    1438:	b1 11       	cpse	r27, r1
    143a:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__fp_szero>
    143e:	08 95       	ret

00001440 <__fixunssfsi>:
    1440:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__fp_splitA>
    1444:	88 f0       	brcs	.+34     	; 0x1468 <__fixunssfsi+0x28>
    1446:	9f 57       	subi	r25, 0x7F	; 127
    1448:	98 f0       	brcs	.+38     	; 0x1470 <__fixunssfsi+0x30>
    144a:	b9 2f       	mov	r27, r25
    144c:	99 27       	eor	r25, r25
    144e:	b7 51       	subi	r27, 0x17	; 23
    1450:	b0 f0       	brcs	.+44     	; 0x147e <__fixunssfsi+0x3e>
    1452:	e1 f0       	breq	.+56     	; 0x148c <__fixunssfsi+0x4c>
    1454:	66 0f       	add	r22, r22
    1456:	77 1f       	adc	r23, r23
    1458:	88 1f       	adc	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	1a f0       	brmi	.+6      	; 0x1464 <__fixunssfsi+0x24>
    145e:	ba 95       	dec	r27
    1460:	c9 f7       	brne	.-14     	; 0x1454 <__fixunssfsi+0x14>
    1462:	14 c0       	rjmp	.+40     	; 0x148c <__fixunssfsi+0x4c>
    1464:	b1 30       	cpi	r27, 0x01	; 1
    1466:	91 f0       	breq	.+36     	; 0x148c <__fixunssfsi+0x4c>
    1468:	0e 94 17 0b 	call	0x162e	; 0x162e <__fp_zero>
    146c:	b1 e0       	ldi	r27, 0x01	; 1
    146e:	08 95       	ret
    1470:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__fp_zero>
    1474:	67 2f       	mov	r22, r23
    1476:	78 2f       	mov	r23, r24
    1478:	88 27       	eor	r24, r24
    147a:	b8 5f       	subi	r27, 0xF8	; 248
    147c:	39 f0       	breq	.+14     	; 0x148c <__fixunssfsi+0x4c>
    147e:	b9 3f       	cpi	r27, 0xF9	; 249
    1480:	cc f3       	brlt	.-14     	; 0x1474 <__fixunssfsi+0x34>
    1482:	86 95       	lsr	r24
    1484:	77 95       	ror	r23
    1486:	67 95       	ror	r22
    1488:	b3 95       	inc	r27
    148a:	d9 f7       	brne	.-10     	; 0x1482 <__fixunssfsi+0x42>
    148c:	3e f4       	brtc	.+14     	; 0x149c <__fixunssfsi+0x5c>
    148e:	90 95       	com	r25
    1490:	80 95       	com	r24
    1492:	70 95       	com	r23
    1494:	61 95       	neg	r22
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	8f 4f       	sbci	r24, 0xFF	; 255
    149a:	9f 4f       	sbci	r25, 0xFF	; 255
    149c:	08 95       	ret

0000149e <__floatunsisf>:
    149e:	e8 94       	clt
    14a0:	09 c0       	rjmp	.+18     	; 0x14b4 <__floatsisf+0x12>

000014a2 <__floatsisf>:
    14a2:	97 fb       	bst	r25, 7
    14a4:	3e f4       	brtc	.+14     	; 0x14b4 <__floatsisf+0x12>
    14a6:	90 95       	com	r25
    14a8:	80 95       	com	r24
    14aa:	70 95       	com	r23
    14ac:	61 95       	neg	r22
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255
    14b0:	8f 4f       	sbci	r24, 0xFF	; 255
    14b2:	9f 4f       	sbci	r25, 0xFF	; 255
    14b4:	99 23       	and	r25, r25
    14b6:	a9 f0       	breq	.+42     	; 0x14e2 <__floatsisf+0x40>
    14b8:	f9 2f       	mov	r31, r25
    14ba:	96 e9       	ldi	r25, 0x96	; 150
    14bc:	bb 27       	eor	r27, r27
    14be:	93 95       	inc	r25
    14c0:	f6 95       	lsr	r31
    14c2:	87 95       	ror	r24
    14c4:	77 95       	ror	r23
    14c6:	67 95       	ror	r22
    14c8:	b7 95       	ror	r27
    14ca:	f1 11       	cpse	r31, r1
    14cc:	f8 cf       	rjmp	.-16     	; 0x14be <__floatsisf+0x1c>
    14ce:	fa f4       	brpl	.+62     	; 0x150e <__floatsisf+0x6c>
    14d0:	bb 0f       	add	r27, r27
    14d2:	11 f4       	brne	.+4      	; 0x14d8 <__floatsisf+0x36>
    14d4:	60 ff       	sbrs	r22, 0
    14d6:	1b c0       	rjmp	.+54     	; 0x150e <__floatsisf+0x6c>
    14d8:	6f 5f       	subi	r22, 0xFF	; 255
    14da:	7f 4f       	sbci	r23, 0xFF	; 255
    14dc:	8f 4f       	sbci	r24, 0xFF	; 255
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	16 c0       	rjmp	.+44     	; 0x150e <__floatsisf+0x6c>
    14e2:	88 23       	and	r24, r24
    14e4:	11 f0       	breq	.+4      	; 0x14ea <__floatsisf+0x48>
    14e6:	96 e9       	ldi	r25, 0x96	; 150
    14e8:	11 c0       	rjmp	.+34     	; 0x150c <__floatsisf+0x6a>
    14ea:	77 23       	and	r23, r23
    14ec:	21 f0       	breq	.+8      	; 0x14f6 <__floatsisf+0x54>
    14ee:	9e e8       	ldi	r25, 0x8E	; 142
    14f0:	87 2f       	mov	r24, r23
    14f2:	76 2f       	mov	r23, r22
    14f4:	05 c0       	rjmp	.+10     	; 0x1500 <__floatsisf+0x5e>
    14f6:	66 23       	and	r22, r22
    14f8:	71 f0       	breq	.+28     	; 0x1516 <__floatsisf+0x74>
    14fa:	96 e8       	ldi	r25, 0x86	; 134
    14fc:	86 2f       	mov	r24, r22
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	2a f0       	brmi	.+10     	; 0x150e <__floatsisf+0x6c>
    1504:	9a 95       	dec	r25
    1506:	66 0f       	add	r22, r22
    1508:	77 1f       	adc	r23, r23
    150a:	88 1f       	adc	r24, r24
    150c:	da f7       	brpl	.-10     	; 0x1504 <__floatsisf+0x62>
    150e:	88 0f       	add	r24, r24
    1510:	96 95       	lsr	r25
    1512:	87 95       	ror	r24
    1514:	97 f9       	bld	r25, 7
    1516:	08 95       	ret

00001518 <__fp_inf>:
    1518:	97 f9       	bld	r25, 7
    151a:	9f 67       	ori	r25, 0x7F	; 127
    151c:	80 e8       	ldi	r24, 0x80	; 128
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	08 95       	ret

00001524 <__fp_mintl>:
    1524:	88 23       	and	r24, r24
    1526:	71 f4       	brne	.+28     	; 0x1544 <__fp_mintl+0x20>
    1528:	77 23       	and	r23, r23
    152a:	21 f0       	breq	.+8      	; 0x1534 <__fp_mintl+0x10>
    152c:	98 50       	subi	r25, 0x08	; 8
    152e:	87 2b       	or	r24, r23
    1530:	76 2f       	mov	r23, r22
    1532:	07 c0       	rjmp	.+14     	; 0x1542 <__fp_mintl+0x1e>
    1534:	66 23       	and	r22, r22
    1536:	11 f4       	brne	.+4      	; 0x153c <__fp_mintl+0x18>
    1538:	99 27       	eor	r25, r25
    153a:	0d c0       	rjmp	.+26     	; 0x1556 <__fp_mintl+0x32>
    153c:	90 51       	subi	r25, 0x10	; 16
    153e:	86 2b       	or	r24, r22
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	2a f0       	brmi	.+10     	; 0x1550 <__fp_mintl+0x2c>
    1546:	9a 95       	dec	r25
    1548:	66 0f       	add	r22, r22
    154a:	77 1f       	adc	r23, r23
    154c:	88 1f       	adc	r24, r24
    154e:	da f7       	brpl	.-10     	; 0x1546 <__fp_mintl+0x22>
    1550:	88 0f       	add	r24, r24
    1552:	96 95       	lsr	r25
    1554:	87 95       	ror	r24
    1556:	97 f9       	bld	r25, 7
    1558:	08 95       	ret

0000155a <__fp_mpack>:
    155a:	9f 3f       	cpi	r25, 0xFF	; 255
    155c:	31 f0       	breq	.+12     	; 0x156a <__fp_mpack_finite+0xc>

0000155e <__fp_mpack_finite>:
    155e:	91 50       	subi	r25, 0x01	; 1
    1560:	20 f4       	brcc	.+8      	; 0x156a <__fp_mpack_finite+0xc>
    1562:	87 95       	ror	r24
    1564:	77 95       	ror	r23
    1566:	67 95       	ror	r22
    1568:	b7 95       	ror	r27
    156a:	88 0f       	add	r24, r24
    156c:	91 1d       	adc	r25, r1
    156e:	96 95       	lsr	r25
    1570:	87 95       	ror	r24
    1572:	97 f9       	bld	r25, 7
    1574:	08 95       	ret

00001576 <__fp_nan>:
    1576:	9f ef       	ldi	r25, 0xFF	; 255
    1578:	80 ec       	ldi	r24, 0xC0	; 192
    157a:	08 95       	ret

0000157c <__fp_pscA>:
    157c:	00 24       	eor	r0, r0
    157e:	0a 94       	dec	r0
    1580:	16 16       	cp	r1, r22
    1582:	17 06       	cpc	r1, r23
    1584:	18 06       	cpc	r1, r24
    1586:	09 06       	cpc	r0, r25
    1588:	08 95       	ret

0000158a <__fp_pscB>:
    158a:	00 24       	eor	r0, r0
    158c:	0a 94       	dec	r0
    158e:	12 16       	cp	r1, r18
    1590:	13 06       	cpc	r1, r19
    1592:	14 06       	cpc	r1, r20
    1594:	05 06       	cpc	r0, r21
    1596:	08 95       	ret

00001598 <__fp_round>:
    1598:	09 2e       	mov	r0, r25
    159a:	03 94       	inc	r0
    159c:	00 0c       	add	r0, r0
    159e:	11 f4       	brne	.+4      	; 0x15a4 <__fp_round+0xc>
    15a0:	88 23       	and	r24, r24
    15a2:	52 f0       	brmi	.+20     	; 0x15b8 <__fp_round+0x20>
    15a4:	bb 0f       	add	r27, r27
    15a6:	40 f4       	brcc	.+16     	; 0x15b8 <__fp_round+0x20>
    15a8:	bf 2b       	or	r27, r31
    15aa:	11 f4       	brne	.+4      	; 0x15b0 <__fp_round+0x18>
    15ac:	60 ff       	sbrs	r22, 0
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <__fp_round+0x20>
    15b0:	6f 5f       	subi	r22, 0xFF	; 255
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255
    15b4:	8f 4f       	sbci	r24, 0xFF	; 255
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	08 95       	ret

000015ba <__fp_split3>:
    15ba:	57 fd       	sbrc	r21, 7
    15bc:	90 58       	subi	r25, 0x80	; 128
    15be:	44 0f       	add	r20, r20
    15c0:	55 1f       	adc	r21, r21
    15c2:	59 f0       	breq	.+22     	; 0x15da <__fp_splitA+0x10>
    15c4:	5f 3f       	cpi	r21, 0xFF	; 255
    15c6:	71 f0       	breq	.+28     	; 0x15e4 <__fp_splitA+0x1a>
    15c8:	47 95       	ror	r20

000015ca <__fp_splitA>:
    15ca:	88 0f       	add	r24, r24
    15cc:	97 fb       	bst	r25, 7
    15ce:	99 1f       	adc	r25, r25
    15d0:	61 f0       	breq	.+24     	; 0x15ea <__fp_splitA+0x20>
    15d2:	9f 3f       	cpi	r25, 0xFF	; 255
    15d4:	79 f0       	breq	.+30     	; 0x15f4 <__fp_splitA+0x2a>
    15d6:	87 95       	ror	r24
    15d8:	08 95       	ret
    15da:	12 16       	cp	r1, r18
    15dc:	13 06       	cpc	r1, r19
    15de:	14 06       	cpc	r1, r20
    15e0:	55 1f       	adc	r21, r21
    15e2:	f2 cf       	rjmp	.-28     	; 0x15c8 <__fp_split3+0xe>
    15e4:	46 95       	lsr	r20
    15e6:	f1 df       	rcall	.-30     	; 0x15ca <__fp_splitA>
    15e8:	08 c0       	rjmp	.+16     	; 0x15fa <__fp_splitA+0x30>
    15ea:	16 16       	cp	r1, r22
    15ec:	17 06       	cpc	r1, r23
    15ee:	18 06       	cpc	r1, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	f1 cf       	rjmp	.-30     	; 0x15d6 <__fp_splitA+0xc>
    15f4:	86 95       	lsr	r24
    15f6:	71 05       	cpc	r23, r1
    15f8:	61 05       	cpc	r22, r1
    15fa:	08 94       	sec
    15fc:	08 95       	ret

000015fe <__fp_trunc>:
    15fe:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__fp_splitA>
    1602:	a0 f0       	brcs	.+40     	; 0x162c <__fp_trunc+0x2e>
    1604:	be e7       	ldi	r27, 0x7E	; 126
    1606:	b9 17       	cp	r27, r25
    1608:	88 f4       	brcc	.+34     	; 0x162c <__fp_trunc+0x2e>
    160a:	bb 27       	eor	r27, r27
    160c:	9f 38       	cpi	r25, 0x8F	; 143
    160e:	60 f4       	brcc	.+24     	; 0x1628 <__fp_trunc+0x2a>
    1610:	16 16       	cp	r1, r22
    1612:	b1 1d       	adc	r27, r1
    1614:	67 2f       	mov	r22, r23
    1616:	78 2f       	mov	r23, r24
    1618:	88 27       	eor	r24, r24
    161a:	98 5f       	subi	r25, 0xF8	; 248
    161c:	f7 cf       	rjmp	.-18     	; 0x160c <__fp_trunc+0xe>
    161e:	86 95       	lsr	r24
    1620:	77 95       	ror	r23
    1622:	67 95       	ror	r22
    1624:	b1 1d       	adc	r27, r1
    1626:	93 95       	inc	r25
    1628:	96 39       	cpi	r25, 0x96	; 150
    162a:	c8 f3       	brcs	.-14     	; 0x161e <__fp_trunc+0x20>
    162c:	08 95       	ret

0000162e <__fp_zero>:
    162e:	e8 94       	clt

00001630 <__fp_szero>:
    1630:	bb 27       	eor	r27, r27
    1632:	66 27       	eor	r22, r22
    1634:	77 27       	eor	r23, r23
    1636:	cb 01       	movw	r24, r22
    1638:	97 f9       	bld	r25, 7
    163a:	08 95       	ret

0000163c <__mulsf3>:
    163c:	0e 94 31 0b 	call	0x1662	; 0x1662 <__mulsf3x>
    1640:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__fp_round>
    1644:	0e 94 be 0a 	call	0x157c	; 0x157c <__fp_pscA>
    1648:	38 f0       	brcs	.+14     	; 0x1658 <__mulsf3+0x1c>
    164a:	0e 94 c5 0a 	call	0x158a	; 0x158a <__fp_pscB>
    164e:	20 f0       	brcs	.+8      	; 0x1658 <__mulsf3+0x1c>
    1650:	95 23       	and	r25, r21
    1652:	11 f0       	breq	.+4      	; 0x1658 <__mulsf3+0x1c>
    1654:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_inf>
    1658:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__fp_nan>
    165c:	11 24       	eor	r1, r1
    165e:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__fp_szero>

00001662 <__mulsf3x>:
    1662:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__fp_split3>
    1666:	70 f3       	brcs	.-36     	; 0x1644 <__mulsf3+0x8>

00001668 <__mulsf3_pse>:
    1668:	95 9f       	mul	r25, r21
    166a:	c1 f3       	breq	.-16     	; 0x165c <__mulsf3+0x20>
    166c:	95 0f       	add	r25, r21
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	55 1f       	adc	r21, r21
    1672:	62 9f       	mul	r22, r18
    1674:	f0 01       	movw	r30, r0
    1676:	72 9f       	mul	r23, r18
    1678:	bb 27       	eor	r27, r27
    167a:	f0 0d       	add	r31, r0
    167c:	b1 1d       	adc	r27, r1
    167e:	63 9f       	mul	r22, r19
    1680:	aa 27       	eor	r26, r26
    1682:	f0 0d       	add	r31, r0
    1684:	b1 1d       	adc	r27, r1
    1686:	aa 1f       	adc	r26, r26
    1688:	64 9f       	mul	r22, r20
    168a:	66 27       	eor	r22, r22
    168c:	b0 0d       	add	r27, r0
    168e:	a1 1d       	adc	r26, r1
    1690:	66 1f       	adc	r22, r22
    1692:	82 9f       	mul	r24, r18
    1694:	22 27       	eor	r18, r18
    1696:	b0 0d       	add	r27, r0
    1698:	a1 1d       	adc	r26, r1
    169a:	62 1f       	adc	r22, r18
    169c:	73 9f       	mul	r23, r19
    169e:	b0 0d       	add	r27, r0
    16a0:	a1 1d       	adc	r26, r1
    16a2:	62 1f       	adc	r22, r18
    16a4:	83 9f       	mul	r24, r19
    16a6:	a0 0d       	add	r26, r0
    16a8:	61 1d       	adc	r22, r1
    16aa:	22 1f       	adc	r18, r18
    16ac:	74 9f       	mul	r23, r20
    16ae:	33 27       	eor	r19, r19
    16b0:	a0 0d       	add	r26, r0
    16b2:	61 1d       	adc	r22, r1
    16b4:	23 1f       	adc	r18, r19
    16b6:	84 9f       	mul	r24, r20
    16b8:	60 0d       	add	r22, r0
    16ba:	21 1d       	adc	r18, r1
    16bc:	82 2f       	mov	r24, r18
    16be:	76 2f       	mov	r23, r22
    16c0:	6a 2f       	mov	r22, r26
    16c2:	11 24       	eor	r1, r1
    16c4:	9f 57       	subi	r25, 0x7F	; 127
    16c6:	50 40       	sbci	r21, 0x00	; 0
    16c8:	9a f0       	brmi	.+38     	; 0x16f0 <__mulsf3_pse+0x88>
    16ca:	f1 f0       	breq	.+60     	; 0x1708 <__mulsf3_pse+0xa0>
    16cc:	88 23       	and	r24, r24
    16ce:	4a f0       	brmi	.+18     	; 0x16e2 <__mulsf3_pse+0x7a>
    16d0:	ee 0f       	add	r30, r30
    16d2:	ff 1f       	adc	r31, r31
    16d4:	bb 1f       	adc	r27, r27
    16d6:	66 1f       	adc	r22, r22
    16d8:	77 1f       	adc	r23, r23
    16da:	88 1f       	adc	r24, r24
    16dc:	91 50       	subi	r25, 0x01	; 1
    16de:	50 40       	sbci	r21, 0x00	; 0
    16e0:	a9 f7       	brne	.-22     	; 0x16cc <__mulsf3_pse+0x64>
    16e2:	9e 3f       	cpi	r25, 0xFE	; 254
    16e4:	51 05       	cpc	r21, r1
    16e6:	80 f0       	brcs	.+32     	; 0x1708 <__mulsf3_pse+0xa0>
    16e8:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_inf>
    16ec:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__fp_szero>
    16f0:	5f 3f       	cpi	r21, 0xFF	; 255
    16f2:	e4 f3       	brlt	.-8      	; 0x16ec <__mulsf3_pse+0x84>
    16f4:	98 3e       	cpi	r25, 0xE8	; 232
    16f6:	d4 f3       	brlt	.-12     	; 0x16ec <__mulsf3_pse+0x84>
    16f8:	86 95       	lsr	r24
    16fa:	77 95       	ror	r23
    16fc:	67 95       	ror	r22
    16fe:	b7 95       	ror	r27
    1700:	f7 95       	ror	r31
    1702:	e7 95       	ror	r30
    1704:	9f 5f       	subi	r25, 0xFF	; 255
    1706:	c1 f7       	brne	.-16     	; 0x16f8 <__mulsf3_pse+0x90>
    1708:	fe 2b       	or	r31, r30
    170a:	88 0f       	add	r24, r24
    170c:	91 1d       	adc	r25, r1
    170e:	96 95       	lsr	r25
    1710:	87 95       	ror	r24
    1712:	97 f9       	bld	r25, 7
    1714:	08 95       	ret

00001716 <_exit>:
    1716:	f8 94       	cli

00001718 <__stop_program>:
    1718:	ff cf       	rjmp	.-2      	; 0x1718 <__stop_program>
