
On-demand Traffic Light Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001306  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00001306  0000139a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080006c  0080006c  000013a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001863  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a39  00000000  00000000  00002e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f6e  00000000  00000000  00003858  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e8  00000000  00000000  000047c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b6  00000000  00000000  00004db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000147e  00000000  00000000  00005566  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000069e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__vector_1>
       8:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_2>
       c:	0c 94 8c 03 	jmp	0x718	; 0x718 <__vector_3>
      10:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__vector_4>
      14:	0c 94 56 06 	jmp	0xcac	; 0xcac <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__vector_7>
      20:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__vector_8>
      24:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__vector_9>
      28:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__vector_10>
      2c:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 94 01 	call	0x328	; 0x328 <main>
      8a:	0c 94 81 09 	jmp	0x1302	; 0x1302 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_INT_fun>:

	}
}

void button_INT_fun(void){
	if(mode == PEDESTRIANS_MODE || cars_state == CARS_RED_STATE) return;
      92:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <mode>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	49 f0       	breq	.+18     	; 0xac <button_INT_fun+0x1a>
      9a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
      9e:	81 30       	cpi	r24, 0x01	; 1
      a0:	29 f0       	breq	.+10     	; 0xac <button_INT_fun+0x1a>
	timer_flag = FALSE;
      a2:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <timer_flag>
	mode = PEDESTRIANS_MODE;
      a6:	81 e0       	ldi	r24, 0x01	; 1
      a8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <mode>
      ac:	08 95       	ret

000000ae <app_init>:

volatile ST_TIMER_t timer1 = {TIMER1, PRESCALER_1024, NONE};
volatile ST_EXT_INT_t interrupt = {INTERRUPT0, RISING_EDGE, &button_INT_fun};

void app_init() {
	LED_init(CARS, GREEN);
      ae:	60 e0       	ldi	r22, 0x00	; 0
      b0:	80 e0       	ldi	r24, 0x00	; 0
      b2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LED_init>
	LED_init(CARS, YELLOW);
      b6:	61 e0       	ldi	r22, 0x01	; 1
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LED_init>
	LED_init(CARS, RED);
      be:	62 e0       	ldi	r22, 0x02	; 2
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LED_init>

	LED_init(PEDESTRIANS, GREEN);
      c6:	60 e0       	ldi	r22, 0x00	; 0
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LED_init>
	LED_init(PEDESTRIANS, YELLOW);
      ce:	61 e0       	ldi	r22, 0x01	; 1
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LED_init>
	LED_init(PEDESTRIANS, RED);
      d6:	62 e0       	ldi	r22, 0x02	; 2
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LED_init>

	LED_init(DEBUG_LED_PORT, DEBUG_LED_PIN);
      de:	62 e0       	ldi	r22, 0x02	; 2
      e0:	82 e0       	ldi	r24, 0x02	; 2
      e2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LED_init>

	timer_init(& timer1);
      e6:	84 e6       	ldi	r24, 0x64	; 100
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	0e 94 3d 04 	call	0x87a	; 0x87a <timer_init>

	EXT_INT_init(& interrupt);
      ee:	80 e6       	ldi	r24, 0x60	; 96
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <EXT_INT_init>
      f6:	08 95       	ret

000000f8 <blinking_leds>:
	timer_flag = FALSE;
	mode = PEDESTRIANS_MODE;
	return;
}

void blinking_leds() {
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
	for(int i = 0; (i < 10); i++){
      fc:	c0 e0       	ldi	r28, 0x00	; 0
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	13 c0       	rjmp	.+38     	; 0x128 <blinking_leds+0x30>
		LED_toggle(CARS, YELLOW);
     102:	61 e0       	ldi	r22, 0x01	; 1
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	0e 94 87 01 	call	0x30e	; 0x30e <LED_toggle>
		LED_toggle(PEDESTRIANS, YELLOW);
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	0e 94 87 01 	call	0x30e	; 0x30e <LED_toggle>
		delay_start(TIMER1, 500, PRESCALER_1024);
     112:	40 e0       	ldi	r20, 0x00	; 0
     114:	54 e0       	ldi	r21, 0x04	; 4
     116:	64 ef       	ldi	r22, 0xF4	; 244
     118:	71 e0       	ldi	r23, 0x01	; 1
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <delay_start>
		delay_stop(TIMER1);
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	0e 94 f5 05 	call	0xbea	; 0xbea <delay_stop>
	mode = PEDESTRIANS_MODE;
	return;
}

void blinking_leds() {
	for(int i = 0; (i < 10); i++){
     126:	21 96       	adiw	r28, 0x01	; 1
     128:	ca 30       	cpi	r28, 0x0A	; 10
     12a:	d1 05       	cpc	r29, r1
     12c:	54 f3       	brlt	.-44     	; 0x102 <blinking_leds+0xa>
		LED_toggle(CARS, YELLOW);
		LED_toggle(PEDESTRIANS, YELLOW);
		delay_start(TIMER1, 500, PRESCALER_1024);
		delay_stop(TIMER1);
	}
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	08 95       	ret

00000134 <app_start>:
	EXT_INT_init(& interrupt);
}

void app_start() {
	while(1) {
		if (mode == CARS_MODE){
     134:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <mode>
     138:	81 11       	cpse	r24, r1
     13a:	6a c0       	rjmp	.+212    	; 0x210 <app_start+0xdc>
			LED_ON(DEBUG_LED_PORT, DEBUG_LED_PIN);
     13c:	62 e0       	ldi	r22, 0x02	; 2
     13e:	82 e0       	ldi	r24, 0x02	; 2
     140:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_ON>

			LED_ON(CARS, GREEN);
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_ON>
			LED_OFF(CARS, YELLOW);
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
			LED_OFF(CARS, RED);
     154:	62 e0       	ldi	r22, 0x02	; 2
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>

			LED_OFF(PEDESTRIANS, GREEN);
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
			LED_OFF(PEDESTRIANS, YELLOW);
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
			LED_ON(PEDESTRIANS, RED);
     16c:	62 e0       	ldi	r22, 0x02	; 2
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_ON>

			delay_start(TIMER1, 5000, PRESCALER_1024);
     174:	40 e0       	ldi	r20, 0x00	; 0
     176:	54 e0       	ldi	r21, 0x04	; 4
     178:	68 e8       	ldi	r22, 0x88	; 136
     17a:	73 e1       	ldi	r23, 0x13	; 19
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <delay_start>
			delay_stop(TIMER1);
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	0e 94 f5 05 	call	0xbea	; 0xbea <delay_stop>
			
			LED_OFF(CARS, GREEN);
     188:	60 e0       	ldi	r22, 0x00	; 0
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
			LED_OFF(PEDESTRIANS, RED);
     190:	62 e0       	ldi	r22, 0x02	; 2
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>

			if (mode != CARS_MODE) continue;
     198:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <mode>
     19c:	81 11       	cpse	r24, r1
     19e:	ca cf       	rjmp	.-108    	; 0x134 <app_start>

			cars_state = CARS_RED_STATE;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>

			blinking_leds();
     1a6:	0e 94 7c 00 	call	0xf8	; 0xf8 <blinking_leds>

			LED_OFF(CARS, GREEN);
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
			LED_OFF(CARS, YELLOW);
     1b2:	61 e0       	ldi	r22, 0x01	; 1
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
			LED_ON(CARS, RED);
     1ba:	62 e0       	ldi	r22, 0x02	; 2
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_ON>

			LED_ON(PEDESTRIANS, GREEN);
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_ON>
			LED_OFF(PEDESTRIANS, YELLOW);
     1ca:	61 e0       	ldi	r22, 0x01	; 1
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
			LED_OFF(PEDESTRIANS, RED);
     1d2:	62 e0       	ldi	r22, 0x02	; 2
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>

			delay_start(TIMER1, 5000, PRESCALER_1024);
     1da:	40 e0       	ldi	r20, 0x00	; 0
     1dc:	54 e0       	ldi	r21, 0x04	; 4
     1de:	68 e8       	ldi	r22, 0x88	; 136
     1e0:	73 e1       	ldi	r23, 0x13	; 19
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <delay_start>
			delay_stop(TIMER1);
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	0e 94 f5 05 	call	0xbea	; 0xbea <delay_stop>
			
			LED_OFF(CARS, RED);
     1ee:	62 e0       	ldi	r22, 0x02	; 2
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
			LED_OFF(PEDESTRIANS, GREEN);
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
			
			cars_state = CARS_GREEN_STATE;
     1fe:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>

			blinking_leds();
     202:	0e 94 7c 00 	call	0xf8	; 0xf8 <blinking_leds>
			
			if (mode != CARS_MODE) continue;
     206:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <mode>
     20a:	81 11       	cpse	r24, r1
     20c:	93 cf       	rjmp	.-218    	; 0x134 <app_start>
     20e:	50 c0       	rjmp	.+160    	; 0x2b0 <app_start+0x17c>
			
		} else {
			if (cars_state == CARS_GREEN_STATE) {
     210:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     214:	81 11       	cpse	r24, r1
     216:	4c c0       	rjmp	.+152    	; 0x2b0 <app_start+0x17c>
				LED_OFF(DEBUG_LED_PORT, DEBUG_LED_PIN);
     218:	62 e0       	ldi	r22, 0x02	; 2
     21a:	82 e0       	ldi	r24, 0x02	; 2
     21c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>

				LED_OFF(CARS, GREEN);
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
				LED_OFF(CARS, YELLOW);
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
				LED_OFF(CARS, RED);
     230:	62 e0       	ldi	r22, 0x02	; 2
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>

				LED_OFF(PEDESTRIANS, GREEN);
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
				LED_OFF(PEDESTRIANS, YELLOW);
     240:	61 e0       	ldi	r22, 0x01	; 1
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
				LED_OFF(PEDESTRIANS, RED);
     248:	62 e0       	ldi	r22, 0x02	; 2
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>

				blinking_leds();
     250:	0e 94 7c 00 	call	0xf8	; 0xf8 <blinking_leds>

				LED_OFF(CARS, GREEN);
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
				LED_OFF(CARS, YELLOW);
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
				LED_ON(CARS, RED);
     264:	62 e0       	ldi	r22, 0x02	; 2
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_ON>

				LED_ON(PEDESTRIANS, GREEN);
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LED_ON>
				LED_OFF(PEDESTRIANS, YELLOW);
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
				LED_OFF(PEDESTRIANS, RED);
     27c:	62 e0       	ldi	r22, 0x02	; 2
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>

				cars_state = CARS_RED_STATE;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>

				delay_start(TIMER1, 5000, PRESCALER_1024);
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	54 e0       	ldi	r21, 0x04	; 4
     28e:	68 e8       	ldi	r22, 0x88	; 136
     290:	73 e1       	ldi	r23, 0x13	; 19
     292:	0e 94 69 04 	call	0x8d2	; 0x8d2 <delay_start>
				delay_stop(TIMER1);
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	0e 94 f5 05 	call	0xbea	; 0xbea <delay_stop>

				LED_OFF(CARS, RED);
     29c:	62 e0       	ldi	r22, 0x02	; 2
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>
				LED_OFF(PEDESTRIANS, GREEN);
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_OFF>

				blinking_leds();
     2ac:	0e 94 7c 00 	call	0xf8	; 0xf8 <blinking_leds>
						
			}
		}
		mode = CARS_MODE;
     2b0:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <mode>
		cars_state = CARS_GREEN_STATE;
     2b4:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
     2b8:	3d cf       	rjmp	.-390    	; 0x134 <app_start>

000002ba <LED_init>:
#include "led.h"

EN_LED_ERROR LED_init(uint8_t ledPort, uint8_t ledPin){
	EN_DIO_ERROR error;

	error = DIO_init(ledPort, ledPin, OUTPUT);
     2ba:	41 e0       	ldi	r20, 0x01	; 1
     2bc:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_init>

	switch (error) {
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	19 f0       	breq	.+6      	; 0x2ca <LED_init+0x10>
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	29 f0       	breq	.+10     	; 0x2d2 <LED_init+0x18>
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <LED_init+0x14>
		case INVALID_PORT: return INVALID_LED_PORT;
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	08 95       	ret
		case INVALID_PIN: return INVALID_LED_PIN;
		default: return LED_OK;
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	08 95       	ret

	error = DIO_init(ledPort, ledPin, OUTPUT);

	switch (error) {
		case INVALID_PORT: return INVALID_LED_PORT;
		case INVALID_PIN: return INVALID_LED_PIN;
     2d2:	82 e0       	ldi	r24, 0x02	; 2
		default: return LED_OK;
	}
}
     2d4:	08 95       	ret

000002d6 <LED_ON>:

EN_LED_ERROR LED_ON(uint8_t ledPort, uint8_t ledPin){
	EN_DIO_ERROR error;

	error = DIO_write(ledPort, ledPin, HIGH);
     2d6:	41 e0       	ldi	r20, 0x01	; 1
     2d8:	0e 94 16 02 	call	0x42c	; 0x42c <DIO_write>

	switch (error) {
     2dc:	81 30       	cpi	r24, 0x01	; 1
     2de:	19 f0       	breq	.+6      	; 0x2e6 <LED_ON+0x10>
     2e0:	82 30       	cpi	r24, 0x02	; 2
     2e2:	29 f0       	breq	.+10     	; 0x2ee <LED_ON+0x18>
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <LED_ON+0x14>
		case INVALID_PORT: return INVALID_LED_PORT;
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	08 95       	ret
		case INVALID_PIN: return INVALID_LED_PIN;
		default: return LED_OK;
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	08 95       	ret

	error = DIO_write(ledPort, ledPin, HIGH);

	switch (error) {
		case INVALID_PORT: return INVALID_LED_PORT;
		case INVALID_PIN: return INVALID_LED_PIN;
     2ee:	82 e0       	ldi	r24, 0x02	; 2
		default: return LED_OK;
	}
}
     2f0:	08 95       	ret

000002f2 <LED_OFF>:

EN_LED_ERROR LED_OFF(uint8_t ledPort, uint8_t ledPin){
	EN_DIO_ERROR error;

	error = DIO_write(ledPort, ledPin, LOW);
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	0e 94 16 02 	call	0x42c	; 0x42c <DIO_write>

	switch (error) {
     2f8:	81 30       	cpi	r24, 0x01	; 1
     2fa:	19 f0       	breq	.+6      	; 0x302 <LED_OFF+0x10>
     2fc:	82 30       	cpi	r24, 0x02	; 2
     2fe:	29 f0       	breq	.+10     	; 0x30a <LED_OFF+0x18>
     300:	02 c0       	rjmp	.+4      	; 0x306 <LED_OFF+0x14>
		case INVALID_PORT: return INVALID_LED_PORT;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	08 95       	ret
		case INVALID_PIN: return INVALID_LED_PIN;
		default: return LED_OK;
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	08 95       	ret

	error = DIO_write(ledPort, ledPin, LOW);

	switch (error) {
		case INVALID_PORT: return INVALID_LED_PORT;
		case INVALID_PIN: return INVALID_LED_PIN;
     30a:	82 e0       	ldi	r24, 0x02	; 2
		default: return LED_OK;
	}
}
     30c:	08 95       	ret

0000030e <LED_toggle>:

EN_LED_ERROR LED_toggle(uint8_t ledPort, uint8_t ledPin){
	EN_DIO_ERROR error;

	error = DIO_toggle(ledPort, ledPin);
     30e:	0e 94 91 02 	call	0x522	; 0x522 <DIO_toggle>

	switch (error) {
     312:	81 30       	cpi	r24, 0x01	; 1
     314:	19 f0       	breq	.+6      	; 0x31c <LED_toggle+0xe>
     316:	82 30       	cpi	r24, 0x02	; 2
     318:	29 f0       	breq	.+10     	; 0x324 <LED_toggle+0x16>
     31a:	02 c0       	rjmp	.+4      	; 0x320 <LED_toggle+0x12>
		case INVALID_PORT: return INVALID_LED_PORT;
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	08 95       	ret
		case INVALID_PIN: return INVALID_LED_PIN;
		default: return LED_OK;
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	08 95       	ret

	error = DIO_toggle(ledPort, ledPin);

	switch (error) {
		case INVALID_PORT: return INVALID_LED_PORT;
		case INVALID_PIN: return INVALID_LED_PIN;
     324:	82 e0       	ldi	r24, 0x02	; 2
		default: return LED_OK;
	}
     326:	08 95       	ret

00000328 <main>:
#include "./Application/app.h"

int main(void) {
	
    /* Replace with your application code */
	app_init();
     328:	0e 94 57 00 	call	0xae	; 0xae <app_init>
	app_start();
     32c:	0e 94 9a 00 	call	0x134	; 0x134 <app_start>
  
}
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	08 95       	ret

00000336 <DIO_init>:

#include "DIO.h"

EN_DIO_ERROR DIO_init(uint8_t port, uint8_t pin, uint8_t direction){
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7) {
     336:	68 30       	cpi	r22, 0x08	; 8
     338:	08 f0       	brcs	.+2      	; 0x33c <DIO_init+0x6>
     33a:	70 c0       	rjmp	.+224    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		if (direction == OUTPUT) {
     33c:	41 30       	cpi	r20, 0x01	; 1
     33e:	a1 f5       	brne	.+104    	; 0x3a8 <DIO_init+0x72>
			/* Check on the Required PORT Number */
			switch (port) {
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	89 f0       	breq	.+34     	; 0x366 <DIO_init+0x30>
     344:	28 f0       	brcs	.+10     	; 0x350 <DIO_init+0x1a>
     346:	82 30       	cpi	r24, 0x02	; 2
     348:	c9 f0       	breq	.+50     	; 0x37c <DIO_init+0x46>
     34a:	83 30       	cpi	r24, 0x03	; 3
     34c:	11 f1       	breq	.+68     	; 0x392 <DIO_init+0x5c>
     34e:	68 c0       	rjmp	.+208    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
				case PORTA: SET_BIT(DDRA_Reg, pin); break;
     350:	2a b3       	in	r18, 0x1a	; 26
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_init+0x26>
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	6a 95       	dec	r22
     35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_init+0x22>
     360:	82 2b       	or	r24, r18
     362:	8a bb       	out	0x1a, r24	; 26
     364:	5a c0       	rjmp	.+180    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
				case PORTB: SET_BIT(DDRB_Reg, pin); break;
     366:	27 b3       	in	r18, 0x17	; 23
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_init+0x3c>
     36e:	88 0f       	add	r24, r24
     370:	99 1f       	adc	r25, r25
     372:	6a 95       	dec	r22
     374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_init+0x38>
     376:	82 2b       	or	r24, r18
     378:	87 bb       	out	0x17, r24	; 23
     37a:	4f c0       	rjmp	.+158    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
				case PORTC: SET_BIT(DDRC_Reg, pin); break;
     37c:	24 b3       	in	r18, 0x14	; 20
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_init+0x52>
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	6a 95       	dec	r22
     38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_init+0x4e>
     38c:	82 2b       	or	r24, r18
     38e:	84 bb       	out	0x14, r24	; 20
     390:	44 c0       	rjmp	.+136    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
				case PORTD: SET_BIT(DDRD_Reg, pin); break;
     392:	21 b3       	in	r18, 0x11	; 17
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_init+0x68>
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	6a 95       	dec	r22
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_init+0x64>
     3a2:	82 2b       	or	r24, r18
     3a4:	81 bb       	out	0x11, r24	; 17
     3a6:	39 c0       	rjmp	.+114    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
				default: return INVALID_PORT;
			}
		} else if (direction == INPUT) {
     3a8:	41 11       	cpse	r20, r1
     3aa:	3c c0       	rjmp	.+120    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			/* Check on the Required PORT Number */
			switch (port) {
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	91 f0       	breq	.+36     	; 0x3d4 <DIO_init+0x9e>
     3b0:	28 f0       	brcs	.+10     	; 0x3bc <DIO_init+0x86>
     3b2:	82 30       	cpi	r24, 0x02	; 2
     3b4:	d9 f0       	breq	.+54     	; 0x3ec <DIO_init+0xb6>
     3b6:	83 30       	cpi	r24, 0x03	; 3
     3b8:	29 f1       	breq	.+74     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3ba:	36 c0       	rjmp	.+108    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
				case PORTA: CLR_BIT(DDRA_Reg, pin); break;
     3bc:	2a b3       	in	r18, 0x1a	; 26
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_init+0x92>
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	6a 95       	dec	r22
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_init+0x8e>
     3cc:	80 95       	com	r24
     3ce:	82 23       	and	r24, r18
     3d0:	8a bb       	out	0x1a, r24	; 26
     3d2:	23 c0       	rjmp	.+70     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
     3d4:	27 b3       	in	r18, 0x17	; 23
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_init+0xaa>
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	6a 95       	dec	r22
     3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_init+0xa6>
     3e4:	80 95       	com	r24
     3e6:	82 23       	and	r24, r18
     3e8:	87 bb       	out	0x17, r24	; 23
     3ea:	17 c0       	rjmp	.+46     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
				case PORTC: CLR_BIT(DDRC_Reg, pin); break;
     3ec:	24 b3       	in	r18, 0x14	; 20
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_init+0xc2>
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	6a 95       	dec	r22
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_init+0xbe>
     3fc:	80 95       	com	r24
     3fe:	82 23       	and	r24, r18
     400:	84 bb       	out	0x14, r24	; 20
     402:	0b c0       	rjmp	.+22     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
				case PORTD: CLR_BIT(DDRD_Reg, pin); break;
     404:	21 b3       	in	r18, 0x11	; 17
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	6a 95       	dec	r22
     412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     414:	80 95       	com	r24
     416:	82 23       	and	r24, r18
     418:	81 bb       	out	0x11, r24	; 17
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;
}
     41a:	08 95       	ret
				case PORTC: CLR_BIT(DDRC_Reg, pin); break;
				case PORTD: CLR_BIT(DDRD_Reg, pin); break;
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	08 95       	ret
			switch (port) {
				case PORTA: SET_BIT(DDRA_Reg, pin); break;
				case PORTB: SET_BIT(DDRB_Reg, pin); break;
				case PORTC: SET_BIT(DDRC_Reg, pin); break;
				case PORTD: SET_BIT(DDRD_Reg, pin); break;
				default: return INVALID_PORT;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	08 95       	ret
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
				case PORTC: CLR_BIT(DDRC_Reg, pin); break;
				case PORTD: CLR_BIT(DDRD_Reg, pin); break;
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
     424:	83 e0       	ldi	r24, 0x03	; 3
     426:	08 95       	ret
			switch (port) {
				case PORTA: CLR_BIT(DDRA_Reg, pin); break;
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
				case PORTC: CLR_BIT(DDRC_Reg, pin); break;
				case PORTD: CLR_BIT(DDRD_Reg, pin); break;
				default: return INVALID_PORT;
     428:	81 e0       	ldi	r24, 0x01	; 1
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;
}
     42a:	08 95       	ret

0000042c <DIO_write>:

EN_DIO_ERROR DIO_write(uint8_t port, uint8_t pin, uint8_t value){
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7) {
     42c:	68 30       	cpi	r22, 0x08	; 8
     42e:	08 f0       	brcs	.+2      	; 0x432 <DIO_write+0x6>
     430:	70 c0       	rjmp	.+224    	; 0x512 <DIO_write+0xe6>
		if (value == HIGH) {
     432:	41 30       	cpi	r20, 0x01	; 1
     434:	a1 f5       	brne	.+104    	; 0x49e <DIO_write+0x72>
			/* Check on the Required PORT Number */
			switch (port) {
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	89 f0       	breq	.+34     	; 0x45c <DIO_write+0x30>
     43a:	28 f0       	brcs	.+10     	; 0x446 <DIO_write+0x1a>
     43c:	82 30       	cpi	r24, 0x02	; 2
     43e:	c9 f0       	breq	.+50     	; 0x472 <DIO_write+0x46>
     440:	83 30       	cpi	r24, 0x03	; 3
     442:	11 f1       	breq	.+68     	; 0x488 <DIO_write+0x5c>
     444:	68 c0       	rjmp	.+208    	; 0x516 <DIO_write+0xea>
				case PORTA: SET_BIT(PORTA_Reg, pin); break;
     446:	2b b3       	in	r18, 0x1b	; 27
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	02 c0       	rjmp	.+4      	; 0x452 <DIO_write+0x26>
     44e:	88 0f       	add	r24, r24
     450:	99 1f       	adc	r25, r25
     452:	6a 95       	dec	r22
     454:	e2 f7       	brpl	.-8      	; 0x44e <DIO_write+0x22>
     456:	82 2b       	or	r24, r18
     458:	8b bb       	out	0x1b, r24	; 27
     45a:	5a c0       	rjmp	.+180    	; 0x510 <DIO_write+0xe4>
				case PORTB: SET_BIT(PORTB_Reg, pin); break;
     45c:	28 b3       	in	r18, 0x18	; 24
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_write+0x3c>
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	6a 95       	dec	r22
     46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_write+0x38>
     46c:	82 2b       	or	r24, r18
     46e:	88 bb       	out	0x18, r24	; 24
     470:	4f c0       	rjmp	.+158    	; 0x510 <DIO_write+0xe4>
				case PORTC: SET_BIT(PORTC_Reg, pin); break;
     472:	25 b3       	in	r18, 0x15	; 21
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_write+0x52>
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	6a 95       	dec	r22
     480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_write+0x4e>
     482:	82 2b       	or	r24, r18
     484:	85 bb       	out	0x15, r24	; 21
     486:	44 c0       	rjmp	.+136    	; 0x510 <DIO_write+0xe4>
				case PORTD: SET_BIT(PORTD_Reg, pin); break;
     488:	22 b3       	in	r18, 0x12	; 18
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_write+0x68>
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	6a 95       	dec	r22
     496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_write+0x64>
     498:	82 2b       	or	r24, r18
     49a:	82 bb       	out	0x12, r24	; 18
     49c:	39 c0       	rjmp	.+114    	; 0x510 <DIO_write+0xe4>
				default: return INVALID_PORT;

			}	
		} else if (value == LOW) {
     49e:	41 11       	cpse	r20, r1
     4a0:	3c c0       	rjmp	.+120    	; 0x51a <DIO_write+0xee>
			/* Check on the Required PORT Number */
			switch (port) {
     4a2:	81 30       	cpi	r24, 0x01	; 1
     4a4:	91 f0       	breq	.+36     	; 0x4ca <DIO_write+0x9e>
     4a6:	28 f0       	brcs	.+10     	; 0x4b2 <DIO_write+0x86>
     4a8:	82 30       	cpi	r24, 0x02	; 2
     4aa:	d9 f0       	breq	.+54     	; 0x4e2 <DIO_write+0xb6>
     4ac:	83 30       	cpi	r24, 0x03	; 3
     4ae:	29 f1       	breq	.+74     	; 0x4fa <DIO_write+0xce>
     4b0:	36 c0       	rjmp	.+108    	; 0x51e <DIO_write+0xf2>
				case PORTA: CLR_BIT(PORTA_Reg, pin); break;
     4b2:	2b b3       	in	r18, 0x1b	; 27
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_write+0x92>
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	6a 95       	dec	r22
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_write+0x8e>
     4c2:	80 95       	com	r24
     4c4:	82 23       	and	r24, r18
     4c6:	8b bb       	out	0x1b, r24	; 27
     4c8:	23 c0       	rjmp	.+70     	; 0x510 <DIO_write+0xe4>
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
     4ca:	28 b3       	in	r18, 0x18	; 24
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_write+0xaa>
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	6a 95       	dec	r22
     4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_write+0xa6>
     4da:	80 95       	com	r24
     4dc:	82 23       	and	r24, r18
     4de:	88 bb       	out	0x18, r24	; 24
     4e0:	17 c0       	rjmp	.+46     	; 0x510 <DIO_write+0xe4>
				case PORTC: CLR_BIT(PORTC_Reg, pin); break;
     4e2:	25 b3       	in	r18, 0x15	; 21
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_write+0xc2>
     4ea:	88 0f       	add	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	6a 95       	dec	r22
     4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_write+0xbe>
     4f2:	80 95       	com	r24
     4f4:	82 23       	and	r24, r18
     4f6:	85 bb       	out	0x15, r24	; 21
     4f8:	0b c0       	rjmp	.+22     	; 0x510 <DIO_write+0xe4>
				case PORTD: CLR_BIT(PORTD_Reg, pin); break;
     4fa:	22 b3       	in	r18, 0x12	; 18
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_write+0xda>
     502:	88 0f       	add	r24, r24
     504:	99 1f       	adc	r25, r25
     506:	6a 95       	dec	r22
     508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_write+0xd6>
     50a:	80 95       	com	r24
     50c:	82 23       	and	r24, r18
     50e:	82 bb       	out	0x12, r24	; 18
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;
}
     510:	08 95       	ret
				case PORTC: CLR_BIT(PORTC_Reg, pin); break;
				case PORTD: CLR_BIT(PORTD_Reg, pin); break;
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	08 95       	ret
			switch (port) {
				case PORTA: SET_BIT(PORTA_Reg, pin); break;
				case PORTB: SET_BIT(PORTB_Reg, pin); break;
				case PORTC: SET_BIT(PORTC_Reg, pin); break;
				case PORTD: SET_BIT(PORTD_Reg, pin); break;
				default: return INVALID_PORT;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	08 95       	ret
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
				case PORTC: CLR_BIT(PORTC_Reg, pin); break;
				case PORTD: CLR_BIT(PORTD_Reg, pin); break;
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
     51a:	84 e0       	ldi	r24, 0x04	; 4
     51c:	08 95       	ret
			switch (port) {
				case PORTA: CLR_BIT(PORTA_Reg, pin); break;
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
				case PORTC: CLR_BIT(PORTC_Reg, pin); break;
				case PORTD: CLR_BIT(PORTD_Reg, pin); break;
				default: return INVALID_PORT;
     51e:	81 e0       	ldi	r24, 0x01	; 1
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;
}
     520:	08 95       	ret

00000522 <DIO_toggle>:

EN_DIO_ERROR DIO_toggle(uint8_t port, uint8_t pin){
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7){
     522:	68 30       	cpi	r22, 0x08	; 8
     524:	a0 f5       	brcc	.+104    	; 0x58e <DIO_toggle+0x6c>
		/* Check on the Required PORT Number */
		switch(port){
     526:	81 30       	cpi	r24, 0x01	; 1
     528:	89 f0       	breq	.+34     	; 0x54c <DIO_toggle+0x2a>
     52a:	28 f0       	brcs	.+10     	; 0x536 <DIO_toggle+0x14>
     52c:	82 30       	cpi	r24, 0x02	; 2
     52e:	c9 f0       	breq	.+50     	; 0x562 <DIO_toggle+0x40>
     530:	83 30       	cpi	r24, 0x03	; 3
     532:	11 f1       	breq	.+68     	; 0x578 <DIO_toggle+0x56>
     534:	2e c0       	rjmp	.+92     	; 0x592 <DIO_toggle+0x70>
			case PORTA: TOG_BIT(PORTA_Reg, pin); break;
     536:	2b b3       	in	r18, 0x1b	; 27
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_toggle+0x20>
     53e:	88 0f       	add	r24, r24
     540:	99 1f       	adc	r25, r25
     542:	6a 95       	dec	r22
     544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_toggle+0x1c>
     546:	82 27       	eor	r24, r18
     548:	8b bb       	out	0x1b, r24	; 27
     54a:	20 c0       	rjmp	.+64     	; 0x58c <DIO_toggle+0x6a>
			case PORTB: TOG_BIT(PORTB_Reg, pin); break;
     54c:	28 b3       	in	r18, 0x18	; 24
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_toggle+0x36>
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	6a 95       	dec	r22
     55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_toggle+0x32>
     55c:	82 27       	eor	r24, r18
     55e:	88 bb       	out	0x18, r24	; 24
     560:	15 c0       	rjmp	.+42     	; 0x58c <DIO_toggle+0x6a>
			case PORTC: TOG_BIT(PORTC_Reg, pin); break;
     562:	25 b3       	in	r18, 0x15	; 21
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_toggle+0x4c>
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	6a 95       	dec	r22
     570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_toggle+0x48>
     572:	82 27       	eor	r24, r18
     574:	85 bb       	out	0x15, r24	; 21
     576:	0a c0       	rjmp	.+20     	; 0x58c <DIO_toggle+0x6a>
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
     578:	22 b3       	in	r18, 0x12	; 18
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_toggle+0x62>
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	6a 95       	dec	r22
     586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_toggle+0x5e>
     588:	82 27       	eor	r24, r18
     58a:	82 bb       	out	0x12, r24	; 18
			default: return INVALID_PORT;
		}
	} else return INVALID_PIN;
}
     58c:	08 95       	ret
			case PORTB: TOG_BIT(PORTB_Reg, pin); break;
			case PORTC: TOG_BIT(PORTC_Reg, pin); break;
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
			default: return INVALID_PORT;
		}
	} else return INVALID_PIN;
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	08 95       	ret
		switch(port){
			case PORTA: TOG_BIT(PORTA_Reg, pin); break;
			case PORTB: TOG_BIT(PORTB_Reg, pin); break;
			case PORTC: TOG_BIT(PORTC_Reg, pin); break;
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
			default: return INVALID_PORT;
     592:	81 e0       	ldi	r24, 0x01	; 1
		}
	} else return INVALID_PIN;
}
     594:	08 95       	ret

00000596 <set_INT_FUN>:
static void (* EXT_INT1_PTR_TO_FUN) (void) = NULLPTR;
static void (* EXT_INT2_PTR_TO_FUN) (void) = NULLPTR;

//////////////////////////// private function ////////////////////////////

void set_INT_FUN(ST_EXT_INT_t * interrupt){
     596:	fc 01       	movw	r30, r24
	switch (interrupt->interruptPinSelect) {
     598:	90 81       	ld	r25, Z
     59a:	91 30       	cpi	r25, 0x01	; 1
     59c:	59 f0       	breq	.+22     	; 0x5b4 <set_INT_FUN+0x1e>
     59e:	18 f0       	brcs	.+6      	; 0x5a6 <set_INT_FUN+0x10>
     5a0:	92 30       	cpi	r25, 0x02	; 2
     5a2:	79 f0       	breq	.+30     	; 0x5c2 <set_INT_FUN+0x2c>
     5a4:	08 95       	ret
		case INTERRUPT0:
		EXT_INT0_PTR_TO_FUN = interrupt->callbackFunction;
     5a6:	82 81       	ldd	r24, Z+2	; 0x02
     5a8:	93 81       	ldd	r25, Z+3	; 0x03
     5aa:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <EXT_INT0_PTR_TO_FUN+0x1>
     5ae:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <EXT_INT0_PTR_TO_FUN>
		break;
     5b2:	08 95       	ret
		case INTERRUPT1:
		EXT_INT1_PTR_TO_FUN = interrupt->callbackFunction;
     5b4:	82 81       	ldd	r24, Z+2	; 0x02
     5b6:	93 81       	ldd	r25, Z+3	; 0x03
     5b8:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <EXT_INT1_PTR_TO_FUN+0x1>
     5bc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <EXT_INT1_PTR_TO_FUN>
		break;
     5c0:	08 95       	ret
		case INTERRUPT2:
		EXT_INT2_PTR_TO_FUN = interrupt->callbackFunction;
     5c2:	82 81       	ldd	r24, Z+2	; 0x02
     5c4:	93 81       	ldd	r25, Z+3	; 0x03
     5c6:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <EXT_INT2_PTR_TO_FUN+0x1>
     5ca:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <EXT_INT2_PTR_TO_FUN>
     5ce:	08 95       	ret

000005d0 <EXT_INT_init>:
//////////////////////////// public functions ////////////////////////////

EN_INTERRUPT_ERROR EXT_INT_init(ST_EXT_INT_t * interrupt){

    /* setting the global interrupt flag */
    sei();
     5d0:	78 94       	sei

    /* Make sure that the interrupt is in the valid range */
    switch (interrupt->interruptPinSelect) {
     5d2:	fc 01       	movw	r30, r24
     5d4:	20 81       	ld	r18, Z
     5d6:	21 30       	cpi	r18, 0x01	; 1
     5d8:	09 f1       	breq	.+66     	; 0x61c <EXT_INT_init+0x4c>
     5da:	18 f0       	brcs	.+6      	; 0x5e2 <EXT_INT_init+0x12>
     5dc:	22 30       	cpi	r18, 0x02	; 2
     5de:	d9 f1       	breq	.+118    	; 0x656 <EXT_INT_init+0x86>
     5e0:	4a c0       	rjmp	.+148    	; 0x676 <EXT_INT_init+0xa6>
        case INTERRUPT0:
            SET_BIT(GICR_Reg, 6); // activating interrupt 0
     5e2:	2b b7       	in	r18, 0x3b	; 59
     5e4:	20 64       	ori	r18, 0x40	; 64
     5e6:	2b bf       	out	0x3b, r18	; 59
            switch (interrupt->senseControl) {
     5e8:	fc 01       	movw	r30, r24
     5ea:	21 81       	ldd	r18, Z+1	; 0x01
     5ec:	21 30       	cpi	r18, 0x01	; 1
     5ee:	51 f0       	breq	.+20     	; 0x604 <EXT_INT_init+0x34>
     5f0:	28 f0       	brcs	.+10     	; 0x5fc <EXT_INT_init+0x2c>
     5f2:	22 30       	cpi	r18, 0x02	; 2
     5f4:	59 f0       	breq	.+22     	; 0x60c <EXT_INT_init+0x3c>
     5f6:	23 30       	cpi	r18, 0x03	; 3
     5f8:	69 f0       	breq	.+26     	; 0x614 <EXT_INT_init+0x44>
     5fa:	3d c0       	rjmp	.+122    	; 0x676 <EXT_INT_init+0xa6>
                case LOW_LEVEL: MCUCR_Reg &= 0xFC; break;
     5fc:	25 b7       	in	r18, 0x35	; 53
     5fe:	2c 7f       	andi	r18, 0xFC	; 252
     600:	25 bf       	out	0x35, r18	; 53
     602:	39 c0       	rjmp	.+114    	; 0x676 <EXT_INT_init+0xa6>
                case ANY_LOGICAL_CHANGE: SET_BIT(MCUCR_Reg, 0); break;
     604:	25 b7       	in	r18, 0x35	; 53
     606:	21 60       	ori	r18, 0x01	; 1
     608:	25 bf       	out	0x35, r18	; 53
     60a:	35 c0       	rjmp	.+106    	; 0x676 <EXT_INT_init+0xa6>
                case FALLING_EDGE: SET_BIT(MCUCR_Reg, 1); break;
     60c:	25 b7       	in	r18, 0x35	; 53
     60e:	22 60       	ori	r18, 0x02	; 2
     610:	25 bf       	out	0x35, r18	; 53
     612:	31 c0       	rjmp	.+98     	; 0x676 <EXT_INT_init+0xa6>
                case RISING_EDGE: MCUCR_Reg |= 0x03; break;
     614:	25 b7       	in	r18, 0x35	; 53
     616:	23 60       	ori	r18, 0x03	; 3
     618:	25 bf       	out	0x35, r18	; 53
     61a:	2d c0       	rjmp	.+90     	; 0x676 <EXT_INT_init+0xa6>
            }
            break;
        case INTERRUPT1:
            SET_BIT(GICR_Reg, 7); // activating interrupt 1
     61c:	2b b7       	in	r18, 0x3b	; 59
     61e:	20 68       	ori	r18, 0x80	; 128
     620:	2b bf       	out	0x3b, r18	; 59
            switch (interrupt->senseControl) {
     622:	fc 01       	movw	r30, r24
     624:	21 81       	ldd	r18, Z+1	; 0x01
     626:	21 30       	cpi	r18, 0x01	; 1
     628:	51 f0       	breq	.+20     	; 0x63e <EXT_INT_init+0x6e>
     62a:	28 f0       	brcs	.+10     	; 0x636 <EXT_INT_init+0x66>
     62c:	22 30       	cpi	r18, 0x02	; 2
     62e:	59 f0       	breq	.+22     	; 0x646 <EXT_INT_init+0x76>
     630:	23 30       	cpi	r18, 0x03	; 3
     632:	69 f0       	breq	.+26     	; 0x64e <EXT_INT_init+0x7e>
     634:	20 c0       	rjmp	.+64     	; 0x676 <EXT_INT_init+0xa6>
                case LOW_LEVEL: MCUCR_Reg &= 0xF3; break;
     636:	25 b7       	in	r18, 0x35	; 53
     638:	23 7f       	andi	r18, 0xF3	; 243
     63a:	25 bf       	out	0x35, r18	; 53
     63c:	1c c0       	rjmp	.+56     	; 0x676 <EXT_INT_init+0xa6>
                case ANY_LOGICAL_CHANGE: SET_BIT(MCUCR_Reg, 2); break;
     63e:	25 b7       	in	r18, 0x35	; 53
     640:	24 60       	ori	r18, 0x04	; 4
     642:	25 bf       	out	0x35, r18	; 53
     644:	18 c0       	rjmp	.+48     	; 0x676 <EXT_INT_init+0xa6>
                case FALLING_EDGE: SET_BIT(MCUCR_Reg, 3); break;
     646:	25 b7       	in	r18, 0x35	; 53
     648:	28 60       	ori	r18, 0x08	; 8
     64a:	25 bf       	out	0x35, r18	; 53
     64c:	14 c0       	rjmp	.+40     	; 0x676 <EXT_INT_init+0xa6>
                case RISING_EDGE: MCUCR_Reg |= 0x0C; break;
     64e:	25 b7       	in	r18, 0x35	; 53
     650:	2c 60       	ori	r18, 0x0C	; 12
     652:	25 bf       	out	0x35, r18	; 53
     654:	10 c0       	rjmp	.+32     	; 0x676 <EXT_INT_init+0xa6>
            }
            break;
        case INTERRUPT2:
            SET_BIT(GICR_Reg, 5); // activating interrupt 2
     656:	2b b7       	in	r18, 0x3b	; 59
     658:	20 62       	ori	r18, 0x20	; 32
     65a:	2b bf       	out	0x3b, r18	; 59
            switch (interrupt->senseControl) {
     65c:	fc 01       	movw	r30, r24
     65e:	21 81       	ldd	r18, Z+1	; 0x01
     660:	22 30       	cpi	r18, 0x02	; 2
     662:	31 f0       	breq	.+12     	; 0x670 <EXT_INT_init+0xa0>
     664:	23 30       	cpi	r18, 0x03	; 3
     666:	39 f4       	brne	.+14     	; 0x676 <EXT_INT_init+0xa6>
                case RISING_EDGE: SET_BIT(MCUCSR_Reg, 6); break;
     668:	24 b7       	in	r18, 0x34	; 52
     66a:	20 64       	ori	r18, 0x40	; 64
     66c:	24 bf       	out	0x34, r18	; 52
     66e:	03 c0       	rjmp	.+6      	; 0x676 <EXT_INT_init+0xa6>
                case FALLING_EDGE: CLR_BIT(MCUCSR_Reg, 6); break;
     670:	24 b7       	in	r18, 0x34	; 52
     672:	2f 7b       	andi	r18, 0xBF	; 191
     674:	24 bf       	out	0x34, r18	; 52
            }
            break;
    }
    set_INT_FUN(interrupt);
     676:	0e 94 cb 02 	call	0x596	; 0x596 <set_INT_FUN>
}
     67a:	08 95       	ret

0000067c <__vector_1>:
//////////////////////////////////////////////////////////////////////////

///////////////////////////// ISR functions //////////////////////////////


ISR(INT0_vect) {
     67c:	1f 92       	push	r1
     67e:	0f 92       	push	r0
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	0f 92       	push	r0
     684:	11 24       	eor	r1, r1
     686:	2f 93       	push	r18
     688:	3f 93       	push	r19
     68a:	4f 93       	push	r20
     68c:	5f 93       	push	r21
     68e:	6f 93       	push	r22
     690:	7f 93       	push	r23
     692:	8f 93       	push	r24
     694:	9f 93       	push	r25
     696:	af 93       	push	r26
     698:	bf 93       	push	r27
     69a:	ef 93       	push	r30
     69c:	ff 93       	push	r31
    EXT_INT0_PTR_TO_FUN();
     69e:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <EXT_INT0_PTR_TO_FUN>
     6a2:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <EXT_INT0_PTR_TO_FUN+0x1>
     6a6:	09 95       	icall
}
     6a8:	ff 91       	pop	r31
     6aa:	ef 91       	pop	r30
     6ac:	bf 91       	pop	r27
     6ae:	af 91       	pop	r26
     6b0:	9f 91       	pop	r25
     6b2:	8f 91       	pop	r24
     6b4:	7f 91       	pop	r23
     6b6:	6f 91       	pop	r22
     6b8:	5f 91       	pop	r21
     6ba:	4f 91       	pop	r20
     6bc:	3f 91       	pop	r19
     6be:	2f 91       	pop	r18
     6c0:	0f 90       	pop	r0
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	0f 90       	pop	r0
     6c6:	1f 90       	pop	r1
     6c8:	18 95       	reti

000006ca <__vector_2>:

ISR(INT1_vect) {
     6ca:	1f 92       	push	r1
     6cc:	0f 92       	push	r0
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	0f 92       	push	r0
     6d2:	11 24       	eor	r1, r1
     6d4:	2f 93       	push	r18
     6d6:	3f 93       	push	r19
     6d8:	4f 93       	push	r20
     6da:	5f 93       	push	r21
     6dc:	6f 93       	push	r22
     6de:	7f 93       	push	r23
     6e0:	8f 93       	push	r24
     6e2:	9f 93       	push	r25
     6e4:	af 93       	push	r26
     6e6:	bf 93       	push	r27
     6e8:	ef 93       	push	r30
     6ea:	ff 93       	push	r31
    EXT_INT1_PTR_TO_FUN();
     6ec:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <EXT_INT1_PTR_TO_FUN>
     6f0:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <EXT_INT1_PTR_TO_FUN+0x1>
     6f4:	09 95       	icall
}
     6f6:	ff 91       	pop	r31
     6f8:	ef 91       	pop	r30
     6fa:	bf 91       	pop	r27
     6fc:	af 91       	pop	r26
     6fe:	9f 91       	pop	r25
     700:	8f 91       	pop	r24
     702:	7f 91       	pop	r23
     704:	6f 91       	pop	r22
     706:	5f 91       	pop	r21
     708:	4f 91       	pop	r20
     70a:	3f 91       	pop	r19
     70c:	2f 91       	pop	r18
     70e:	0f 90       	pop	r0
     710:	0f be       	out	0x3f, r0	; 63
     712:	0f 90       	pop	r0
     714:	1f 90       	pop	r1
     716:	18 95       	reti

00000718 <__vector_3>:

ISR(INT2_vect) {
     718:	1f 92       	push	r1
     71a:	0f 92       	push	r0
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	0f 92       	push	r0
     720:	11 24       	eor	r1, r1
     722:	2f 93       	push	r18
     724:	3f 93       	push	r19
     726:	4f 93       	push	r20
     728:	5f 93       	push	r21
     72a:	6f 93       	push	r22
     72c:	7f 93       	push	r23
     72e:	8f 93       	push	r24
     730:	9f 93       	push	r25
     732:	af 93       	push	r26
     734:	bf 93       	push	r27
     736:	ef 93       	push	r30
     738:	ff 93       	push	r31
    EXT_INT2_PTR_TO_FUN();
     73a:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <EXT_INT2_PTR_TO_FUN>
     73e:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <EXT_INT2_PTR_TO_FUN+0x1>
     742:	09 95       	icall
     744:	ff 91       	pop	r31
     746:	ef 91       	pop	r30
     748:	bf 91       	pop	r27
     74a:	af 91       	pop	r26
     74c:	9f 91       	pop	r25
     74e:	8f 91       	pop	r24
     750:	7f 91       	pop	r23
     752:	6f 91       	pop	r22
     754:	5f 91       	pop	r21
     756:	4f 91       	pop	r20
     758:	3f 91       	pop	r19
     75a:	2f 91       	pop	r18
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <set_TIMER_OVF_INT_fun>:
				break;
			case TIMER2: result = (uint16_t) TCNT2_Reg & 0x00FF; break;
		}
	} else { /* ERROR invalid input (timer) */ }
	return result;
}
     766:	fc 01       	movw	r30, r24
     768:	90 81       	ld	r25, Z
     76a:	91 30       	cpi	r25, 0x01	; 1
     76c:	59 f0       	breq	.+22     	; 0x784 <set_TIMER_OVF_INT_fun+0x1e>
     76e:	18 f0       	brcs	.+6      	; 0x776 <set_TIMER_OVF_INT_fun+0x10>
     770:	92 30       	cpi	r25, 0x02	; 2
     772:	79 f0       	breq	.+30     	; 0x792 <set_TIMER_OVF_INT_fun+0x2c>
     774:	08 95       	ret
     776:	84 81       	ldd	r24, Z+4	; 0x04
     778:	95 81       	ldd	r25, Z+5	; 0x05
     77a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <T0_OVF_PTR_TO_FUN+0x1>
     77e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <T0_OVF_PTR_TO_FUN>
     782:	08 95       	ret
     784:	84 81       	ldd	r24, Z+4	; 0x04
     786:	95 81       	ldd	r25, Z+5	; 0x05
     788:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <T1_OVF_PTR_TO_FUN+0x1>
     78c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <T1_OVF_PTR_TO_FUN>
     790:	08 95       	ret
     792:	84 81       	ldd	r24, Z+4	; 0x04
     794:	95 81       	ldd	r25, Z+5	; 0x05
     796:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <T2_OVF_PTR_TO_FUN+0x1>
     79a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <T2_OVF_PTR_TO_FUN>
     79e:	08 95       	ret

000007a0 <set_TIMER_CMP_INT_fun>:
     7a0:	fc 01       	movw	r30, r24
     7a2:	90 81       	ld	r25, Z
     7a4:	91 30       	cpi	r25, 0x01	; 1
     7a6:	59 f0       	breq	.+22     	; 0x7be <set_TIMER_CMP_INT_fun+0x1e>
     7a8:	18 f0       	brcs	.+6      	; 0x7b0 <set_TIMER_CMP_INT_fun+0x10>
     7aa:	92 30       	cpi	r25, 0x02	; 2
     7ac:	99 f0       	breq	.+38     	; 0x7d4 <set_TIMER_CMP_INT_fun+0x34>
     7ae:	08 95       	ret
     7b0:	84 81       	ldd	r24, Z+4	; 0x04
     7b2:	95 81       	ldd	r25, Z+5	; 0x05
     7b4:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <T0_CMP_PTR_TO_FUN+0x1>
     7b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <T0_CMP_PTR_TO_FUN>
     7bc:	08 95       	ret
     7be:	84 81       	ldd	r24, Z+4	; 0x04
     7c0:	95 81       	ldd	r25, Z+5	; 0x05
     7c2:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <T1_CMPA_PTR_TO_FUN+0x1>
     7c6:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <T1_CMPA_PTR_TO_FUN>
     7ca:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <T1_CMPB_PTR_TO_FUN+0x1>
     7ce:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <T1_CMPB_PTR_TO_FUN>
     7d2:	08 95       	ret
     7d4:	84 81       	ldd	r24, Z+4	; 0x04
     7d6:	95 81       	ldd	r25, Z+5	; 0x05
     7d8:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <T2_CMP_PTR_TO_FUN+0x1>
     7dc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <T2_CMP_PTR_TO_FUN>
     7e0:	08 95       	ret

000007e2 <set_timer_init_value>:
     7e2:	81 30       	cpi	r24, 0x01	; 1
     7e4:	31 f0       	breq	.+12     	; 0x7f2 <set_timer_init_value+0x10>
     7e6:	18 f0       	brcs	.+6      	; 0x7ee <set_timer_init_value+0xc>
     7e8:	82 30       	cpi	r24, 0x02	; 2
     7ea:	31 f0       	breq	.+12     	; 0x7f8 <set_timer_init_value+0x16>
     7ec:	08 95       	ret
     7ee:	62 bf       	out	0x32, r22	; 50
     7f0:	08 95       	ret
     7f2:	7d bd       	out	0x2d, r23	; 45
     7f4:	6c bd       	out	0x2c, r22	; 44
     7f6:	08 95       	ret
     7f8:	64 bd       	out	0x24, r22	; 36
     7fa:	08 95       	ret

000007fc <T0_TIMSK_init>:
     7fc:	81 11       	cpse	r24, r1
     7fe:	04 c0       	rjmp	.+8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     800:	89 b7       	in	r24, 0x39	; 57
     802:	81 60       	ori	r24, 0x01	; 1
     804:	89 bf       	out	0x39, r24	; 57
     806:	08 95       	ret
     808:	81 30       	cpi	r24, 0x01	; 1
     80a:	21 f4       	brne	.+8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     80c:	89 b7       	in	r24, 0x39	; 57
     80e:	82 60       	ori	r24, 0x02	; 2
     810:	89 bf       	out	0x39, r24	; 57
     812:	08 95       	ret
     814:	89 b7       	in	r24, 0x39	; 57
     816:	8e 7f       	andi	r24, 0xFE	; 254
     818:	89 bf       	out	0x39, r24	; 57
     81a:	89 b7       	in	r24, 0x39	; 57
     81c:	8d 7f       	andi	r24, 0xFD	; 253
     81e:	89 bf       	out	0x39, r24	; 57
     820:	08 95       	ret

00000822 <T1_TIMSK_init>:
     822:	81 11       	cpse	r24, r1
     824:	04 c0       	rjmp	.+8      	; 0x82e <T1_TIMSK_init+0xc>
     826:	89 b7       	in	r24, 0x39	; 57
     828:	84 60       	ori	r24, 0x04	; 4
     82a:	89 bf       	out	0x39, r24	; 57
     82c:	08 95       	ret
     82e:	81 30       	cpi	r24, 0x01	; 1
     830:	39 f4       	brne	.+14     	; 0x840 <T1_TIMSK_init+0x1e>
     832:	89 b7       	in	r24, 0x39	; 57
     834:	88 60       	ori	r24, 0x08	; 8
     836:	89 bf       	out	0x39, r24	; 57
     838:	89 b7       	in	r24, 0x39	; 57
     83a:	80 61       	ori	r24, 0x10	; 16
     83c:	89 bf       	out	0x39, r24	; 57
     83e:	08 95       	ret
     840:	89 b7       	in	r24, 0x39	; 57
     842:	8b 7f       	andi	r24, 0xFB	; 251
     844:	89 bf       	out	0x39, r24	; 57
     846:	89 b7       	in	r24, 0x39	; 57
     848:	87 7f       	andi	r24, 0xF7	; 247
     84a:	89 bf       	out	0x39, r24	; 57
     84c:	89 b7       	in	r24, 0x39	; 57
     84e:	8f 7e       	andi	r24, 0xEF	; 239
     850:	89 bf       	out	0x39, r24	; 57
     852:	08 95       	ret

00000854 <T2_TIMSK_init>:
     854:	81 11       	cpse	r24, r1
     856:	04 c0       	rjmp	.+8      	; 0x860 <__stack+0x1>
     858:	89 b7       	in	r24, 0x39	; 57
     85a:	80 64       	ori	r24, 0x40	; 64
     85c:	89 bf       	out	0x39, r24	; 57
     85e:	08 95       	ret
     860:	81 30       	cpi	r24, 0x01	; 1
     862:	21 f4       	brne	.+8      	; 0x86c <__stack+0xd>
     864:	89 b7       	in	r24, 0x39	; 57
     866:	80 68       	ori	r24, 0x80	; 128
     868:	89 bf       	out	0x39, r24	; 57
     86a:	08 95       	ret
     86c:	89 b7       	in	r24, 0x39	; 57
     86e:	8f 7b       	andi	r24, 0xBF	; 191
     870:	89 bf       	out	0x39, r24	; 57
     872:	89 b7       	in	r24, 0x39	; 57
     874:	8f 77       	andi	r24, 0x7F	; 127
     876:	89 bf       	out	0x39, r24	; 57
     878:	08 95       	ret

0000087a <timer_init>:
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	ec 01       	movw	r28, r24
     880:	8b 81       	ldd	r24, Y+3	; 0x03
     882:	81 11       	cpse	r24, r1
     884:	05 c0       	rjmp	.+10     	; 0x890 <timer_init+0x16>
     886:	78 94       	sei
     888:	ce 01       	movw	r24, r28
     88a:	0e 94 b3 03 	call	0x766	; 0x766 <set_TIMER_OVF_INT_fun>
     88e:	06 c0       	rjmp	.+12     	; 0x89c <timer_init+0x22>
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	21 f4       	brne	.+8      	; 0x89c <timer_init+0x22>
     894:	78 94       	sei
     896:	ce 01       	movw	r24, r28
     898:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <set_TIMER_CMP_INT_fun>
     89c:	88 81       	ld	r24, Y
     89e:	83 30       	cpi	r24, 0x03	; 3
     8a0:	a8 f4       	brcc	.+42     	; 0x8cc <timer_init+0x52>
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	49 f0       	breq	.+18     	; 0x8b8 <timer_init+0x3e>
     8a6:	18 f0       	brcs	.+6      	; 0x8ae <timer_init+0x34>
     8a8:	82 30       	cpi	r24, 0x02	; 2
     8aa:	61 f0       	breq	.+24     	; 0x8c4 <timer_init+0x4a>
     8ac:	0f c0       	rjmp	.+30     	; 0x8cc <timer_init+0x52>
     8ae:	13 be       	out	0x33, r1	; 51
     8b0:	8b 81       	ldd	r24, Y+3	; 0x03
     8b2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <T0_TIMSK_init>
     8b6:	0a c0       	rjmp	.+20     	; 0x8cc <timer_init+0x52>
     8b8:	1f bc       	out	0x2f, r1	; 47
     8ba:	1e bc       	out	0x2e, r1	; 46
     8bc:	8b 81       	ldd	r24, Y+3	; 0x03
     8be:	0e 94 11 04 	call	0x822	; 0x822 <T1_TIMSK_init>
     8c2:	04 c0       	rjmp	.+8      	; 0x8cc <timer_init+0x52>
     8c4:	15 bc       	out	0x25, r1	; 37
     8c6:	8b 81       	ldd	r24, Y+3	; 0x03
     8c8:	0e 94 2a 04 	call	0x854	; 0x854 <T2_TIMSK_init>
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <delay_start>:
     8d2:	3f 92       	push	r3
     8d4:	4f 92       	push	r4
     8d6:	5f 92       	push	r5
     8d8:	6f 92       	push	r6
     8da:	7f 92       	push	r7
     8dc:	8f 92       	push	r8
     8de:	9f 92       	push	r9
     8e0:	af 92       	push	r10
     8e2:	bf 92       	push	r11
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	38 2e       	mov	r3, r24
     8f6:	8b 01       	movw	r16, r22
     8f8:	ea 01       	movw	r28, r20
     8fa:	40 34       	cpi	r20, 0x40	; 64
     8fc:	51 05       	cpc	r21, r1
     8fe:	89 f0       	breq	.+34     	; 0x922 <delay_start+0x50>
     900:	38 f4       	brcc	.+14     	; 0x910 <delay_start+0x3e>
     902:	41 30       	cpi	r20, 0x01	; 1
     904:	51 05       	cpc	r21, r1
     906:	69 f0       	breq	.+26     	; 0x922 <delay_start+0x50>
     908:	48 30       	cpi	r20, 0x08	; 8
     90a:	51 05       	cpc	r21, r1
     90c:	41 f4       	brne	.+16     	; 0x91e <delay_start+0x4c>
     90e:	09 c0       	rjmp	.+18     	; 0x922 <delay_start+0x50>
     910:	41 15       	cp	r20, r1
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	58 07       	cpc	r21, r24
     916:	29 f0       	breq	.+10     	; 0x922 <delay_start+0x50>
     918:	41 15       	cp	r20, r1
     91a:	54 40       	sbci	r21, 0x04	; 4
     91c:	11 f0       	breq	.+4      	; 0x922 <delay_start+0x50>
     91e:	c1 e0       	ldi	r28, 0x01	; 1
     920:	d0 e0       	ldi	r29, 0x00	; 0
     922:	be 01       	movw	r22, r28
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 45 08 	call	0x108a	; 0x108a <__floatunsisf>
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	4a e7       	ldi	r20, 0x7A	; 122
     932:	54 e4       	ldi	r21, 0x44	; 68
     934:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	34 e2       	ldi	r19, 0x24	; 36
     93c:	44 e7       	ldi	r20, 0x74	; 116
     93e:	59 e4       	ldi	r21, 0x49	; 73
     940:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__divsf3>
     944:	6b 01       	movw	r12, r22
     946:	7c 01       	movw	r14, r24
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <timer_flag>
     94e:	38 16       	cp	r3, r24
     950:	c1 f1       	breq	.+112    	; 0x9c2 <delay_start+0xf0>
     952:	38 16       	cp	r3, r24
     954:	18 f0       	brcs	.+6      	; 0x95c <delay_start+0x8a>
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	38 12       	cpse	r3, r24
     95a:	35 c1       	rjmp	.+618    	; 0xbc6 <delay_start+0x2f4>
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	40 e8       	ldi	r20, 0x80	; 128
     962:	53 e4       	ldi	r21, 0x43	; 67
     964:	c7 01       	movw	r24, r14
     966:	b6 01       	movw	r22, r12
     968:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
     96c:	2b 01       	movw	r4, r22
     96e:	3c 01       	movw	r6, r24
     970:	b8 01       	movw	r22, r16
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 45 08 	call	0x108a	; 0x108a <__floatunsisf>
     97a:	4b 01       	movw	r8, r22
     97c:	5c 01       	movw	r10, r24
     97e:	a3 01       	movw	r20, r6
     980:	92 01       	movw	r18, r4
     982:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__divsf3>
     986:	0e 94 86 07 	call	0xf0c	; 0xf0c <ceil>
     98a:	0e 94 16 08 	call	0x102c	; 0x102c <__fixunssfsi>
     98e:	8b 01       	movw	r16, r22
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 45 08 	call	0x108a	; 0x108a <__floatunsisf>
     998:	a7 01       	movw	r20, r14
     99a:	96 01       	movw	r18, r12
     99c:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
     9a0:	9b 01       	movw	r18, r22
     9a2:	ac 01       	movw	r20, r24
     9a4:	c5 01       	movw	r24, r10
     9a6:	b4 01       	movw	r22, r8
     9a8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__divsf3>
     9ac:	9b 01       	movw	r18, r22
     9ae:	ac 01       	movw	r20, r24
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	80 e8       	ldi	r24, 0x80	; 128
     9b6:	93 e4       	ldi	r25, 0x43	; 67
     9b8:	0e 94 19 07 	call	0xe32	; 0xe32 <__subsf3>
     9bc:	0e 94 0f 08 	call	0x101e	; 0x101e <__fixsfsi>
     9c0:	32 c0       	rjmp	.+100    	; 0xa26 <delay_start+0x154>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e8       	ldi	r20, 0x80	; 128
     9c8:	57 e4       	ldi	r21, 0x47	; 71
     9ca:	c7 01       	movw	r24, r14
     9cc:	b6 01       	movw	r22, r12
     9ce:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
     9d2:	2b 01       	movw	r4, r22
     9d4:	3c 01       	movw	r6, r24
     9d6:	b8 01       	movw	r22, r16
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 45 08 	call	0x108a	; 0x108a <__floatunsisf>
     9e0:	4b 01       	movw	r8, r22
     9e2:	5c 01       	movw	r10, r24
     9e4:	a3 01       	movw	r20, r6
     9e6:	92 01       	movw	r18, r4
     9e8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__divsf3>
     9ec:	0e 94 86 07 	call	0xf0c	; 0xf0c <ceil>
     9f0:	0e 94 16 08 	call	0x102c	; 0x102c <__fixunssfsi>
     9f4:	8b 01       	movw	r16, r22
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 45 08 	call	0x108a	; 0x108a <__floatunsisf>
     9fe:	a7 01       	movw	r20, r14
     a00:	96 01       	movw	r18, r12
     a02:	0e 94 14 09 	call	0x1228	; 0x1228 <__mulsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	c5 01       	movw	r24, r10
     a0c:	b4 01       	movw	r22, r8
     a0e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__divsf3>
     a12:	9b 01       	movw	r18, r22
     a14:	ac 01       	movw	r20, r24
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	80 e8       	ldi	r24, 0x80	; 128
     a1c:	97 e4       	ldi	r25, 0x47	; 71
     a1e:	0e 94 19 07 	call	0xe32	; 0xe32 <__subsf3>
     a22:	0e 94 0f 08 	call	0x101e	; 0x101e <__fixsfsi>
     a26:	83 2d       	mov	r24, r3
     a28:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <set_timer_init_value>
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	38 16       	cp	r3, r24
     a30:	09 f4       	brne	.+2      	; 0xa34 <delay_start+0x162>
     a32:	48 c0       	rjmp	.+144    	; 0xac4 <delay_start+0x1f2>
     a34:	38 16       	cp	r3, r24
     a36:	28 f0       	brcs	.+10     	; 0xa42 <delay_start+0x170>
     a38:	82 e0       	ldi	r24, 0x02	; 2
     a3a:	38 16       	cp	r3, r24
     a3c:	09 f4       	brne	.+2      	; 0xa40 <delay_start+0x16e>
     a3e:	83 c0       	rjmp	.+262    	; 0xb46 <delay_start+0x274>
     a40:	c2 c0       	rjmp	.+388    	; 0xbc6 <delay_start+0x2f4>
     a42:	c0 34       	cpi	r28, 0x40	; 64
     a44:	d1 05       	cpc	r29, r1
     a46:	b9 f0       	breq	.+46     	; 0xa76 <delay_start+0x1a4>
     a48:	30 f4       	brcc	.+12     	; 0xa56 <delay_start+0x184>
     a4a:	c1 30       	cpi	r28, 0x01	; 1
     a4c:	d1 05       	cpc	r29, r1
     a4e:	59 f0       	breq	.+22     	; 0xa66 <delay_start+0x194>
     a50:	28 97       	sbiw	r28, 0x08	; 8
     a52:	69 f0       	breq	.+26     	; 0xa6e <delay_start+0x19c>
     a54:	16 c0       	rjmp	.+44     	; 0xa82 <delay_start+0x1b0>
     a56:	c1 15       	cp	r28, r1
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	d8 07       	cpc	r29, r24
     a5c:	a9 f0       	breq	.+42     	; 0xa88 <delay_start+0x1b6>
     a5e:	c1 15       	cp	r28, r1
     a60:	d4 40       	sbci	r29, 0x04	; 4
     a62:	b1 f0       	breq	.+44     	; 0xa90 <delay_start+0x1be>
     a64:	0e c0       	rjmp	.+28     	; 0xa82 <delay_start+0x1b0>
     a66:	83 b7       	in	r24, 0x33	; 51
     a68:	81 60       	ori	r24, 0x01	; 1
     a6a:	83 bf       	out	0x33, r24	; 51
     a6c:	0a c0       	rjmp	.+20     	; 0xa82 <delay_start+0x1b0>
     a6e:	83 b7       	in	r24, 0x33	; 51
     a70:	82 60       	ori	r24, 0x02	; 2
     a72:	83 bf       	out	0x33, r24	; 51
     a74:	06 c0       	rjmp	.+12     	; 0xa82 <delay_start+0x1b0>
     a76:	83 b7       	in	r24, 0x33	; 51
     a78:	81 60       	ori	r24, 0x01	; 1
     a7a:	83 bf       	out	0x33, r24	; 51
     a7c:	83 b7       	in	r24, 0x33	; 51
     a7e:	82 60       	ori	r24, 0x02	; 2
     a80:	83 bf       	out	0x33, r24	; 51
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	1a c0       	rjmp	.+52     	; 0xabc <delay_start+0x1ea>
     a88:	83 b7       	in	r24, 0x33	; 51
     a8a:	84 60       	ori	r24, 0x04	; 4
     a8c:	83 bf       	out	0x33, r24	; 51
     a8e:	f9 cf       	rjmp	.-14     	; 0xa82 <delay_start+0x1b0>
     a90:	83 b7       	in	r24, 0x33	; 51
     a92:	81 60       	ori	r24, 0x01	; 1
     a94:	83 bf       	out	0x33, r24	; 51
     a96:	83 b7       	in	r24, 0x33	; 51
     a98:	84 60       	ori	r24, 0x04	; 4
     a9a:	83 bf       	out	0x33, r24	; 51
     a9c:	f2 cf       	rjmp	.-28     	; 0xa82 <delay_start+0x1b0>
     a9e:	08 b6       	in	r0, 0x38	; 56
     aa0:	00 fc       	sbrc	r0, 0
     aa2:	04 c0       	rjmp	.+8      	; 0xaac <delay_start+0x1da>
     aa4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <timer_flag>
     aa8:	81 11       	cpse	r24, r1
     aaa:	f9 cf       	rjmp	.-14     	; 0xa9e <delay_start+0x1cc>
     aac:	88 b7       	in	r24, 0x38	; 56
     aae:	81 60       	ori	r24, 0x01	; 1
     ab0:	88 bf       	out	0x38, r24	; 56
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <timer_flag>
     ab8:	2f 5f       	subi	r18, 0xFF	; 255
     aba:	3f 4f       	sbci	r19, 0xFF	; 255
     abc:	20 17       	cp	r18, r16
     abe:	31 07       	cpc	r19, r17
     ac0:	70 f3       	brcs	.-36     	; 0xa9e <delay_start+0x1cc>
     ac2:	81 c0       	rjmp	.+258    	; 0xbc6 <delay_start+0x2f4>
     ac4:	c0 34       	cpi	r28, 0x40	; 64
     ac6:	d1 05       	cpc	r29, r1
     ac8:	b9 f0       	breq	.+46     	; 0xaf8 <delay_start+0x226>
     aca:	30 f4       	brcc	.+12     	; 0xad8 <delay_start+0x206>
     acc:	c1 30       	cpi	r28, 0x01	; 1
     ace:	d1 05       	cpc	r29, r1
     ad0:	59 f0       	breq	.+22     	; 0xae8 <delay_start+0x216>
     ad2:	28 97       	sbiw	r28, 0x08	; 8
     ad4:	69 f0       	breq	.+26     	; 0xaf0 <delay_start+0x21e>
     ad6:	16 c0       	rjmp	.+44     	; 0xb04 <delay_start+0x232>
     ad8:	c1 15       	cp	r28, r1
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	d8 07       	cpc	r29, r24
     ade:	a9 f0       	breq	.+42     	; 0xb0a <delay_start+0x238>
     ae0:	c1 15       	cp	r28, r1
     ae2:	d4 40       	sbci	r29, 0x04	; 4
     ae4:	b1 f0       	breq	.+44     	; 0xb12 <delay_start+0x240>
     ae6:	0e c0       	rjmp	.+28     	; 0xb04 <delay_start+0x232>
     ae8:	8e b5       	in	r24, 0x2e	; 46
     aea:	81 60       	ori	r24, 0x01	; 1
     aec:	8e bd       	out	0x2e, r24	; 46
     aee:	0a c0       	rjmp	.+20     	; 0xb04 <delay_start+0x232>
     af0:	8e b5       	in	r24, 0x2e	; 46
     af2:	82 60       	ori	r24, 0x02	; 2
     af4:	8e bd       	out	0x2e, r24	; 46
     af6:	06 c0       	rjmp	.+12     	; 0xb04 <delay_start+0x232>
     af8:	8e b5       	in	r24, 0x2e	; 46
     afa:	81 60       	ori	r24, 0x01	; 1
     afc:	8e bd       	out	0x2e, r24	; 46
     afe:	8e b5       	in	r24, 0x2e	; 46
     b00:	82 60       	ori	r24, 0x02	; 2
     b02:	8e bd       	out	0x2e, r24	; 46
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	1a c0       	rjmp	.+52     	; 0xb3e <delay_start+0x26c>
     b0a:	8e b5       	in	r24, 0x2e	; 46
     b0c:	84 60       	ori	r24, 0x04	; 4
     b0e:	8e bd       	out	0x2e, r24	; 46
     b10:	f9 cf       	rjmp	.-14     	; 0xb04 <delay_start+0x232>
     b12:	8e b5       	in	r24, 0x2e	; 46
     b14:	81 60       	ori	r24, 0x01	; 1
     b16:	8e bd       	out	0x2e, r24	; 46
     b18:	8e b5       	in	r24, 0x2e	; 46
     b1a:	84 60       	ori	r24, 0x04	; 4
     b1c:	8e bd       	out	0x2e, r24	; 46
     b1e:	f2 cf       	rjmp	.-28     	; 0xb04 <delay_start+0x232>
     b20:	08 b6       	in	r0, 0x38	; 56
     b22:	02 fc       	sbrc	r0, 2
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <delay_start+0x25c>
     b26:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <timer_flag>
     b2a:	81 11       	cpse	r24, r1
     b2c:	f9 cf       	rjmp	.-14     	; 0xb20 <delay_start+0x24e>
     b2e:	88 b7       	in	r24, 0x38	; 56
     b30:	84 60       	ori	r24, 0x04	; 4
     b32:	88 bf       	out	0x38, r24	; 56
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <timer_flag>
     b3a:	2f 5f       	subi	r18, 0xFF	; 255
     b3c:	3f 4f       	sbci	r19, 0xFF	; 255
     b3e:	20 17       	cp	r18, r16
     b40:	31 07       	cpc	r19, r17
     b42:	70 f3       	brcs	.-36     	; 0xb20 <delay_start+0x24e>
     b44:	40 c0       	rjmp	.+128    	; 0xbc6 <delay_start+0x2f4>
     b46:	c0 34       	cpi	r28, 0x40	; 64
     b48:	d1 05       	cpc	r29, r1
     b4a:	b9 f0       	breq	.+46     	; 0xb7a <delay_start+0x2a8>
     b4c:	30 f4       	brcc	.+12     	; 0xb5a <delay_start+0x288>
     b4e:	c1 30       	cpi	r28, 0x01	; 1
     b50:	d1 05       	cpc	r29, r1
     b52:	59 f0       	breq	.+22     	; 0xb6a <delay_start+0x298>
     b54:	28 97       	sbiw	r28, 0x08	; 8
     b56:	69 f0       	breq	.+26     	; 0xb72 <delay_start+0x2a0>
     b58:	16 c0       	rjmp	.+44     	; 0xb86 <delay_start+0x2b4>
     b5a:	c1 15       	cp	r28, r1
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	d8 07       	cpc	r29, r24
     b60:	a9 f0       	breq	.+42     	; 0xb8c <delay_start+0x2ba>
     b62:	c1 15       	cp	r28, r1
     b64:	d4 40       	sbci	r29, 0x04	; 4
     b66:	b1 f0       	breq	.+44     	; 0xb94 <delay_start+0x2c2>
     b68:	0e c0       	rjmp	.+28     	; 0xb86 <delay_start+0x2b4>
     b6a:	85 b5       	in	r24, 0x25	; 37
     b6c:	81 60       	ori	r24, 0x01	; 1
     b6e:	85 bd       	out	0x25, r24	; 37
     b70:	0a c0       	rjmp	.+20     	; 0xb86 <delay_start+0x2b4>
     b72:	85 b5       	in	r24, 0x25	; 37
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	85 bd       	out	0x25, r24	; 37
     b78:	06 c0       	rjmp	.+12     	; 0xb86 <delay_start+0x2b4>
     b7a:	85 b5       	in	r24, 0x25	; 37
     b7c:	81 60       	ori	r24, 0x01	; 1
     b7e:	85 bd       	out	0x25, r24	; 37
     b80:	85 b5       	in	r24, 0x25	; 37
     b82:	82 60       	ori	r24, 0x02	; 2
     b84:	85 bd       	out	0x25, r24	; 37
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	1a c0       	rjmp	.+52     	; 0xbc0 <delay_start+0x2ee>
     b8c:	85 b5       	in	r24, 0x25	; 37
     b8e:	84 60       	ori	r24, 0x04	; 4
     b90:	85 bd       	out	0x25, r24	; 37
     b92:	f9 cf       	rjmp	.-14     	; 0xb86 <delay_start+0x2b4>
     b94:	85 b5       	in	r24, 0x25	; 37
     b96:	81 60       	ori	r24, 0x01	; 1
     b98:	85 bd       	out	0x25, r24	; 37
     b9a:	85 b5       	in	r24, 0x25	; 37
     b9c:	84 60       	ori	r24, 0x04	; 4
     b9e:	85 bd       	out	0x25, r24	; 37
     ba0:	f2 cf       	rjmp	.-28     	; 0xb86 <delay_start+0x2b4>
     ba2:	08 b6       	in	r0, 0x38	; 56
     ba4:	06 fc       	sbrc	r0, 6
     ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <delay_start+0x2de>
     ba8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <timer_flag>
     bac:	81 11       	cpse	r24, r1
     bae:	f9 cf       	rjmp	.-14     	; 0xba2 <delay_start+0x2d0>
     bb0:	88 b7       	in	r24, 0x38	; 56
     bb2:	80 64       	ori	r24, 0x40	; 64
     bb4:	88 bf       	out	0x38, r24	; 56
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <timer_flag>
     bbc:	2f 5f       	subi	r18, 0xFF	; 255
     bbe:	3f 4f       	sbci	r19, 0xFF	; 255
     bc0:	20 17       	cp	r18, r16
     bc2:	31 07       	cpc	r19, r17
     bc4:	70 f3       	brcs	.-36     	; 0xba2 <delay_start+0x2d0>
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	cf 90       	pop	r12
     bd6:	bf 90       	pop	r11
     bd8:	af 90       	pop	r10
     bda:	9f 90       	pop	r9
     bdc:	8f 90       	pop	r8
     bde:	7f 90       	pop	r7
     be0:	6f 90       	pop	r6
     be2:	5f 90       	pop	r5
     be4:	4f 90       	pop	r4
     be6:	3f 90       	pop	r3
     be8:	08 95       	ret

00000bea <delay_stop>:
     bea:	83 30       	cpi	r24, 0x03	; 3
     bec:	80 f4       	brcc	.+32     	; 0xc0e <delay_stop+0x24>
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	39 f0       	breq	.+14     	; 0xc00 <delay_stop+0x16>
     bf2:	18 f0       	brcs	.+6      	; 0xbfa <delay_stop+0x10>
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	49 f0       	breq	.+18     	; 0xc0a <delay_stop+0x20>
     bf8:	08 95       	ret
     bfa:	13 be       	out	0x33, r1	; 51
     bfc:	12 be       	out	0x32, r1	; 50
     bfe:	08 95       	ret
     c00:	1f bc       	out	0x2f, r1	; 47
     c02:	1e bc       	out	0x2e, r1	; 46
     c04:	1d bc       	out	0x2d, r1	; 45
     c06:	1c bc       	out	0x2c, r1	; 44
     c08:	08 95       	ret
     c0a:	15 bc       	out	0x25, r1	; 37
     c0c:	14 bc       	out	0x24, r1	; 36
     c0e:	08 95       	ret

00000c10 <__vector_11>:

//////////////////////////////////////////////////////////////////////////

///////////////////////////// ISR functions //////////////////////////////

ISR(TIMER0_OVF_vect) {
     c10:	1f 92       	push	r1
     c12:	0f 92       	push	r0
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	0f 92       	push	r0
     c18:	11 24       	eor	r1, r1
     c1a:	2f 93       	push	r18
     c1c:	3f 93       	push	r19
     c1e:	4f 93       	push	r20
     c20:	5f 93       	push	r21
     c22:	6f 93       	push	r22
     c24:	7f 93       	push	r23
     c26:	8f 93       	push	r24
     c28:	9f 93       	push	r25
     c2a:	af 93       	push	r26
     c2c:	bf 93       	push	r27
     c2e:	ef 93       	push	r30
     c30:	ff 93       	push	r31
    T0_OVF_PTR_TO_FUN();
     c32:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <T0_OVF_PTR_TO_FUN>
     c36:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <T0_OVF_PTR_TO_FUN+0x1>
     c3a:	09 95       	icall
}
     c3c:	ff 91       	pop	r31
     c3e:	ef 91       	pop	r30
     c40:	bf 91       	pop	r27
     c42:	af 91       	pop	r26
     c44:	9f 91       	pop	r25
     c46:	8f 91       	pop	r24
     c48:	7f 91       	pop	r23
     c4a:	6f 91       	pop	r22
     c4c:	5f 91       	pop	r21
     c4e:	4f 91       	pop	r20
     c50:	3f 91       	pop	r19
     c52:	2f 91       	pop	r18
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	0f 90       	pop	r0
     c5a:	1f 90       	pop	r1
     c5c:	18 95       	reti

00000c5e <__vector_9>:

ISR(TIMER1_OVF_vect) {
     c5e:	1f 92       	push	r1
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	0f 92       	push	r0
     c66:	11 24       	eor	r1, r1
     c68:	2f 93       	push	r18
     c6a:	3f 93       	push	r19
     c6c:	4f 93       	push	r20
     c6e:	5f 93       	push	r21
     c70:	6f 93       	push	r22
     c72:	7f 93       	push	r23
     c74:	8f 93       	push	r24
     c76:	9f 93       	push	r25
     c78:	af 93       	push	r26
     c7a:	bf 93       	push	r27
     c7c:	ef 93       	push	r30
     c7e:	ff 93       	push	r31
    T1_OVF_PTR_TO_FUN();
     c80:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <T1_OVF_PTR_TO_FUN>
     c84:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <T1_OVF_PTR_TO_FUN+0x1>
     c88:	09 95       	icall
}
     c8a:	ff 91       	pop	r31
     c8c:	ef 91       	pop	r30
     c8e:	bf 91       	pop	r27
     c90:	af 91       	pop	r26
     c92:	9f 91       	pop	r25
     c94:	8f 91       	pop	r24
     c96:	7f 91       	pop	r23
     c98:	6f 91       	pop	r22
     c9a:	5f 91       	pop	r21
     c9c:	4f 91       	pop	r20
     c9e:	3f 91       	pop	r19
     ca0:	2f 91       	pop	r18
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0f 90       	pop	r0
     ca8:	1f 90       	pop	r1
     caa:	18 95       	reti

00000cac <__vector_5>:

ISR(TIMER2_OVF_vect) {
     cac:	1f 92       	push	r1
     cae:	0f 92       	push	r0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
    T2_OVF_PTR_TO_FUN();
     cce:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <T2_OVF_PTR_TO_FUN>
     cd2:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <T2_OVF_PTR_TO_FUN+0x1>
     cd6:	09 95       	icall
}
     cd8:	ff 91       	pop	r31
     cda:	ef 91       	pop	r30
     cdc:	bf 91       	pop	r27
     cde:	af 91       	pop	r26
     ce0:	9f 91       	pop	r25
     ce2:	8f 91       	pop	r24
     ce4:	7f 91       	pop	r23
     ce6:	6f 91       	pop	r22
     ce8:	5f 91       	pop	r21
     cea:	4f 91       	pop	r20
     cec:	3f 91       	pop	r19
     cee:	2f 91       	pop	r18
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <__vector_10>:

//////////////////////////////////////////////////////////////////////////

ISR(TIMER0_COMP_vect) {
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	2f 93       	push	r18
     d06:	3f 93       	push	r19
     d08:	4f 93       	push	r20
     d0a:	5f 93       	push	r21
     d0c:	6f 93       	push	r22
     d0e:	7f 93       	push	r23
     d10:	8f 93       	push	r24
     d12:	9f 93       	push	r25
     d14:	af 93       	push	r26
     d16:	bf 93       	push	r27
     d18:	ef 93       	push	r30
     d1a:	ff 93       	push	r31
    T0_CMP_PTR_TO_FUN();
     d1c:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <T0_CMP_PTR_TO_FUN>
     d20:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <T0_CMP_PTR_TO_FUN+0x1>
     d24:	09 95       	icall
}
     d26:	ff 91       	pop	r31
     d28:	ef 91       	pop	r30
     d2a:	bf 91       	pop	r27
     d2c:	af 91       	pop	r26
     d2e:	9f 91       	pop	r25
     d30:	8f 91       	pop	r24
     d32:	7f 91       	pop	r23
     d34:	6f 91       	pop	r22
     d36:	5f 91       	pop	r21
     d38:	4f 91       	pop	r20
     d3a:	3f 91       	pop	r19
     d3c:	2f 91       	pop	r18
     d3e:	0f 90       	pop	r0
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	0f 90       	pop	r0
     d44:	1f 90       	pop	r1
     d46:	18 95       	reti

00000d48 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
     d48:	1f 92       	push	r1
     d4a:	0f 92       	push	r0
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	0f 92       	push	r0
     d50:	11 24       	eor	r1, r1
     d52:	2f 93       	push	r18
     d54:	3f 93       	push	r19
     d56:	4f 93       	push	r20
     d58:	5f 93       	push	r21
     d5a:	6f 93       	push	r22
     d5c:	7f 93       	push	r23
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
     d62:	af 93       	push	r26
     d64:	bf 93       	push	r27
     d66:	ef 93       	push	r30
     d68:	ff 93       	push	r31
    T1_CMPA_PTR_TO_FUN();
     d6a:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <T1_CMPA_PTR_TO_FUN>
     d6e:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <T1_CMPA_PTR_TO_FUN+0x1>
     d72:	09 95       	icall
}
     d74:	ff 91       	pop	r31
     d76:	ef 91       	pop	r30
     d78:	bf 91       	pop	r27
     d7a:	af 91       	pop	r26
     d7c:	9f 91       	pop	r25
     d7e:	8f 91       	pop	r24
     d80:	7f 91       	pop	r23
     d82:	6f 91       	pop	r22
     d84:	5f 91       	pop	r21
     d86:	4f 91       	pop	r20
     d88:	3f 91       	pop	r19
     d8a:	2f 91       	pop	r18
     d8c:	0f 90       	pop	r0
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	0f 90       	pop	r0
     d92:	1f 90       	pop	r1
     d94:	18 95       	reti

00000d96 <__vector_8>:

ISR(TIMER1_COMPB_vect) {
     d96:	1f 92       	push	r1
     d98:	0f 92       	push	r0
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	0f 92       	push	r0
     d9e:	11 24       	eor	r1, r1
     da0:	2f 93       	push	r18
     da2:	3f 93       	push	r19
     da4:	4f 93       	push	r20
     da6:	5f 93       	push	r21
     da8:	6f 93       	push	r22
     daa:	7f 93       	push	r23
     dac:	8f 93       	push	r24
     dae:	9f 93       	push	r25
     db0:	af 93       	push	r26
     db2:	bf 93       	push	r27
     db4:	ef 93       	push	r30
     db6:	ff 93       	push	r31
    T1_CMPB_PTR_TO_FUN();
     db8:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <T1_CMPB_PTR_TO_FUN>
     dbc:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <T1_CMPB_PTR_TO_FUN+0x1>
     dc0:	09 95       	icall
}
     dc2:	ff 91       	pop	r31
     dc4:	ef 91       	pop	r30
     dc6:	bf 91       	pop	r27
     dc8:	af 91       	pop	r26
     dca:	9f 91       	pop	r25
     dcc:	8f 91       	pop	r24
     dce:	7f 91       	pop	r23
     dd0:	6f 91       	pop	r22
     dd2:	5f 91       	pop	r21
     dd4:	4f 91       	pop	r20
     dd6:	3f 91       	pop	r19
     dd8:	2f 91       	pop	r18
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	0f 90       	pop	r0
     de0:	1f 90       	pop	r1
     de2:	18 95       	reti

00000de4 <__vector_4>:

ISR(TIMER2_COMP_vect) {
     de4:	1f 92       	push	r1
     de6:	0f 92       	push	r0
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	0f 92       	push	r0
     dec:	11 24       	eor	r1, r1
     dee:	2f 93       	push	r18
     df0:	3f 93       	push	r19
     df2:	4f 93       	push	r20
     df4:	5f 93       	push	r21
     df6:	6f 93       	push	r22
     df8:	7f 93       	push	r23
     dfa:	8f 93       	push	r24
     dfc:	9f 93       	push	r25
     dfe:	af 93       	push	r26
     e00:	bf 93       	push	r27
     e02:	ef 93       	push	r30
     e04:	ff 93       	push	r31
    T2_CMP_PTR_TO_FUN();
     e06:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <T2_CMP_PTR_TO_FUN>
     e0a:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <T2_CMP_PTR_TO_FUN+0x1>
     e0e:	09 95       	icall
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	0f 90       	pop	r0
     e2e:	1f 90       	pop	r1
     e30:	18 95       	reti

00000e32 <__subsf3>:
     e32:	50 58       	subi	r21, 0x80	; 128

00000e34 <__addsf3>:
     e34:	bb 27       	eor	r27, r27
     e36:	aa 27       	eor	r26, r26
     e38:	0e 94 31 07 	call	0xe62	; 0xe62 <__addsf3x>
     e3c:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__fp_round>
     e40:	0e 94 b4 08 	call	0x1168	; 0x1168 <__fp_pscA>
     e44:	38 f0       	brcs	.+14     	; 0xe54 <__addsf3+0x20>
     e46:	0e 94 bb 08 	call	0x1176	; 0x1176 <__fp_pscB>
     e4a:	20 f0       	brcs	.+8      	; 0xe54 <__addsf3+0x20>
     e4c:	39 f4       	brne	.+14     	; 0xe5c <__addsf3+0x28>
     e4e:	9f 3f       	cpi	r25, 0xFF	; 255
     e50:	19 f4       	brne	.+6      	; 0xe58 <__addsf3+0x24>
     e52:	26 f4       	brtc	.+8      	; 0xe5c <__addsf3+0x28>
     e54:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__fp_nan>
     e58:	0e f4       	brtc	.+2      	; 0xe5c <__addsf3+0x28>
     e5a:	e0 95       	com	r30
     e5c:	e7 fb       	bst	r30, 7
     e5e:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__fp_inf>

00000e62 <__addsf3x>:
     e62:	e9 2f       	mov	r30, r25
     e64:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__fp_split3>
     e68:	58 f3       	brcs	.-42     	; 0xe40 <__addsf3+0xc>
     e6a:	ba 17       	cp	r27, r26
     e6c:	62 07       	cpc	r22, r18
     e6e:	73 07       	cpc	r23, r19
     e70:	84 07       	cpc	r24, r20
     e72:	95 07       	cpc	r25, r21
     e74:	20 f0       	brcs	.+8      	; 0xe7e <__addsf3x+0x1c>
     e76:	79 f4       	brne	.+30     	; 0xe96 <__addsf3x+0x34>
     e78:	a6 f5       	brtc	.+104    	; 0xee2 <__addsf3x+0x80>
     e7a:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__fp_zero>
     e7e:	0e f4       	brtc	.+2      	; 0xe82 <__addsf3x+0x20>
     e80:	e0 95       	com	r30
     e82:	0b 2e       	mov	r0, r27
     e84:	ba 2f       	mov	r27, r26
     e86:	a0 2d       	mov	r26, r0
     e88:	0b 01       	movw	r0, r22
     e8a:	b9 01       	movw	r22, r18
     e8c:	90 01       	movw	r18, r0
     e8e:	0c 01       	movw	r0, r24
     e90:	ca 01       	movw	r24, r20
     e92:	a0 01       	movw	r20, r0
     e94:	11 24       	eor	r1, r1
     e96:	ff 27       	eor	r31, r31
     e98:	59 1b       	sub	r21, r25
     e9a:	99 f0       	breq	.+38     	; 0xec2 <__addsf3x+0x60>
     e9c:	59 3f       	cpi	r21, 0xF9	; 249
     e9e:	50 f4       	brcc	.+20     	; 0xeb4 <__addsf3x+0x52>
     ea0:	50 3e       	cpi	r21, 0xE0	; 224
     ea2:	68 f1       	brcs	.+90     	; 0xefe <__addsf3x+0x9c>
     ea4:	1a 16       	cp	r1, r26
     ea6:	f0 40       	sbci	r31, 0x00	; 0
     ea8:	a2 2f       	mov	r26, r18
     eaa:	23 2f       	mov	r18, r19
     eac:	34 2f       	mov	r19, r20
     eae:	44 27       	eor	r20, r20
     eb0:	58 5f       	subi	r21, 0xF8	; 248
     eb2:	f3 cf       	rjmp	.-26     	; 0xe9a <__addsf3x+0x38>
     eb4:	46 95       	lsr	r20
     eb6:	37 95       	ror	r19
     eb8:	27 95       	ror	r18
     eba:	a7 95       	ror	r26
     ebc:	f0 40       	sbci	r31, 0x00	; 0
     ebe:	53 95       	inc	r21
     ec0:	c9 f7       	brne	.-14     	; 0xeb4 <__addsf3x+0x52>
     ec2:	7e f4       	brtc	.+30     	; 0xee2 <__addsf3x+0x80>
     ec4:	1f 16       	cp	r1, r31
     ec6:	ba 0b       	sbc	r27, r26
     ec8:	62 0b       	sbc	r22, r18
     eca:	73 0b       	sbc	r23, r19
     ecc:	84 0b       	sbc	r24, r20
     ece:	ba f0       	brmi	.+46     	; 0xefe <__addsf3x+0x9c>
     ed0:	91 50       	subi	r25, 0x01	; 1
     ed2:	a1 f0       	breq	.+40     	; 0xefc <__addsf3x+0x9a>
     ed4:	ff 0f       	add	r31, r31
     ed6:	bb 1f       	adc	r27, r27
     ed8:	66 1f       	adc	r22, r22
     eda:	77 1f       	adc	r23, r23
     edc:	88 1f       	adc	r24, r24
     ede:	c2 f7       	brpl	.-16     	; 0xed0 <__addsf3x+0x6e>
     ee0:	0e c0       	rjmp	.+28     	; 0xefe <__addsf3x+0x9c>
     ee2:	ba 0f       	add	r27, r26
     ee4:	62 1f       	adc	r22, r18
     ee6:	73 1f       	adc	r23, r19
     ee8:	84 1f       	adc	r24, r20
     eea:	48 f4       	brcc	.+18     	; 0xefe <__addsf3x+0x9c>
     eec:	87 95       	ror	r24
     eee:	77 95       	ror	r23
     ef0:	67 95       	ror	r22
     ef2:	b7 95       	ror	r27
     ef4:	f7 95       	ror	r31
     ef6:	9e 3f       	cpi	r25, 0xFE	; 254
     ef8:	08 f0       	brcs	.+2      	; 0xefc <__addsf3x+0x9a>
     efa:	b0 cf       	rjmp	.-160    	; 0xe5c <__addsf3+0x28>
     efc:	93 95       	inc	r25
     efe:	88 0f       	add	r24, r24
     f00:	08 f0       	brcs	.+2      	; 0xf04 <__addsf3x+0xa2>
     f02:	99 27       	eor	r25, r25
     f04:	ee 0f       	add	r30, r30
     f06:	97 95       	ror	r25
     f08:	87 95       	ror	r24
     f0a:	08 95       	ret

00000f0c <ceil>:
     f0c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_trunc>
     f10:	90 f0       	brcs	.+36     	; 0xf36 <ceil+0x2a>
     f12:	9f 37       	cpi	r25, 0x7F	; 127
     f14:	48 f4       	brcc	.+18     	; 0xf28 <ceil+0x1c>
     f16:	91 11       	cpse	r25, r1
     f18:	16 f4       	brtc	.+4      	; 0xf1e <ceil+0x12>
     f1a:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_szero>
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	80 e8       	ldi	r24, 0x80	; 128
     f24:	9f e3       	ldi	r25, 0x3F	; 63
     f26:	08 95       	ret
     f28:	26 f0       	brts	.+8      	; 0xf32 <ceil+0x26>
     f2a:	1b 16       	cp	r1, r27
     f2c:	61 1d       	adc	r22, r1
     f2e:	71 1d       	adc	r23, r1
     f30:	81 1d       	adc	r24, r1
     f32:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__fp_mintl>
     f36:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_mpack>

00000f3a <__divsf3>:
     f3a:	0e 94 b1 07 	call	0xf62	; 0xf62 <__divsf3x>
     f3e:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__fp_round>
     f42:	0e 94 bb 08 	call	0x1176	; 0x1176 <__fp_pscB>
     f46:	58 f0       	brcs	.+22     	; 0xf5e <__divsf3+0x24>
     f48:	0e 94 b4 08 	call	0x1168	; 0x1168 <__fp_pscA>
     f4c:	40 f0       	brcs	.+16     	; 0xf5e <__divsf3+0x24>
     f4e:	29 f4       	brne	.+10     	; 0xf5a <__divsf3+0x20>
     f50:	5f 3f       	cpi	r21, 0xFF	; 255
     f52:	29 f0       	breq	.+10     	; 0xf5e <__divsf3+0x24>
     f54:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__fp_inf>
     f58:	51 11       	cpse	r21, r1
     f5a:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_szero>
     f5e:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__fp_nan>

00000f62 <__divsf3x>:
     f62:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__fp_split3>
     f66:	68 f3       	brcs	.-38     	; 0xf42 <__divsf3+0x8>

00000f68 <__divsf3_pse>:
     f68:	99 23       	and	r25, r25
     f6a:	b1 f3       	breq	.-20     	; 0xf58 <__divsf3+0x1e>
     f6c:	55 23       	and	r21, r21
     f6e:	91 f3       	breq	.-28     	; 0xf54 <__divsf3+0x1a>
     f70:	95 1b       	sub	r25, r21
     f72:	55 0b       	sbc	r21, r21
     f74:	bb 27       	eor	r27, r27
     f76:	aa 27       	eor	r26, r26
     f78:	62 17       	cp	r22, r18
     f7a:	73 07       	cpc	r23, r19
     f7c:	84 07       	cpc	r24, r20
     f7e:	38 f0       	brcs	.+14     	; 0xf8e <__divsf3_pse+0x26>
     f80:	9f 5f       	subi	r25, 0xFF	; 255
     f82:	5f 4f       	sbci	r21, 0xFF	; 255
     f84:	22 0f       	add	r18, r18
     f86:	33 1f       	adc	r19, r19
     f88:	44 1f       	adc	r20, r20
     f8a:	aa 1f       	adc	r26, r26
     f8c:	a9 f3       	breq	.-22     	; 0xf78 <__divsf3_pse+0x10>
     f8e:	35 d0       	rcall	.+106    	; 0xffa <__divsf3_pse+0x92>
     f90:	0e 2e       	mov	r0, r30
     f92:	3a f0       	brmi	.+14     	; 0xfa2 <__divsf3_pse+0x3a>
     f94:	e0 e8       	ldi	r30, 0x80	; 128
     f96:	32 d0       	rcall	.+100    	; 0xffc <__divsf3_pse+0x94>
     f98:	91 50       	subi	r25, 0x01	; 1
     f9a:	50 40       	sbci	r21, 0x00	; 0
     f9c:	e6 95       	lsr	r30
     f9e:	00 1c       	adc	r0, r0
     fa0:	ca f7       	brpl	.-14     	; 0xf94 <__divsf3_pse+0x2c>
     fa2:	2b d0       	rcall	.+86     	; 0xffa <__divsf3_pse+0x92>
     fa4:	fe 2f       	mov	r31, r30
     fa6:	29 d0       	rcall	.+82     	; 0xffa <__divsf3_pse+0x92>
     fa8:	66 0f       	add	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	88 1f       	adc	r24, r24
     fae:	bb 1f       	adc	r27, r27
     fb0:	26 17       	cp	r18, r22
     fb2:	37 07       	cpc	r19, r23
     fb4:	48 07       	cpc	r20, r24
     fb6:	ab 07       	cpc	r26, r27
     fb8:	b0 e8       	ldi	r27, 0x80	; 128
     fba:	09 f0       	breq	.+2      	; 0xfbe <__divsf3_pse+0x56>
     fbc:	bb 0b       	sbc	r27, r27
     fbe:	80 2d       	mov	r24, r0
     fc0:	bf 01       	movw	r22, r30
     fc2:	ff 27       	eor	r31, r31
     fc4:	93 58       	subi	r25, 0x83	; 131
     fc6:	5f 4f       	sbci	r21, 0xFF	; 255
     fc8:	3a f0       	brmi	.+14     	; 0xfd8 <__divsf3_pse+0x70>
     fca:	9e 3f       	cpi	r25, 0xFE	; 254
     fcc:	51 05       	cpc	r21, r1
     fce:	78 f0       	brcs	.+30     	; 0xfee <__divsf3_pse+0x86>
     fd0:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__fp_inf>
     fd4:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_szero>
     fd8:	5f 3f       	cpi	r21, 0xFF	; 255
     fda:	e4 f3       	brlt	.-8      	; 0xfd4 <__divsf3_pse+0x6c>
     fdc:	98 3e       	cpi	r25, 0xE8	; 232
     fde:	d4 f3       	brlt	.-12     	; 0xfd4 <__divsf3_pse+0x6c>
     fe0:	86 95       	lsr	r24
     fe2:	77 95       	ror	r23
     fe4:	67 95       	ror	r22
     fe6:	b7 95       	ror	r27
     fe8:	f7 95       	ror	r31
     fea:	9f 5f       	subi	r25, 0xFF	; 255
     fec:	c9 f7       	brne	.-14     	; 0xfe0 <__divsf3_pse+0x78>
     fee:	88 0f       	add	r24, r24
     ff0:	91 1d       	adc	r25, r1
     ff2:	96 95       	lsr	r25
     ff4:	87 95       	ror	r24
     ff6:	97 f9       	bld	r25, 7
     ff8:	08 95       	ret
     ffa:	e1 e0       	ldi	r30, 0x01	; 1
     ffc:	66 0f       	add	r22, r22
     ffe:	77 1f       	adc	r23, r23
    1000:	88 1f       	adc	r24, r24
    1002:	bb 1f       	adc	r27, r27
    1004:	62 17       	cp	r22, r18
    1006:	73 07       	cpc	r23, r19
    1008:	84 07       	cpc	r24, r20
    100a:	ba 07       	cpc	r27, r26
    100c:	20 f0       	brcs	.+8      	; 0x1016 <__divsf3_pse+0xae>
    100e:	62 1b       	sub	r22, r18
    1010:	73 0b       	sbc	r23, r19
    1012:	84 0b       	sbc	r24, r20
    1014:	ba 0b       	sbc	r27, r26
    1016:	ee 1f       	adc	r30, r30
    1018:	88 f7       	brcc	.-30     	; 0xffc <__divsf3_pse+0x94>
    101a:	e0 95       	com	r30
    101c:	08 95       	ret

0000101e <__fixsfsi>:
    101e:	0e 94 16 08 	call	0x102c	; 0x102c <__fixunssfsi>
    1022:	68 94       	set
    1024:	b1 11       	cpse	r27, r1
    1026:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_szero>
    102a:	08 95       	ret

0000102c <__fixunssfsi>:
    102c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__fp_splitA>
    1030:	88 f0       	brcs	.+34     	; 0x1054 <__fixunssfsi+0x28>
    1032:	9f 57       	subi	r25, 0x7F	; 127
    1034:	98 f0       	brcs	.+38     	; 0x105c <__fixunssfsi+0x30>
    1036:	b9 2f       	mov	r27, r25
    1038:	99 27       	eor	r25, r25
    103a:	b7 51       	subi	r27, 0x17	; 23
    103c:	b0 f0       	brcs	.+44     	; 0x106a <__fixunssfsi+0x3e>
    103e:	e1 f0       	breq	.+56     	; 0x1078 <__fixunssfsi+0x4c>
    1040:	66 0f       	add	r22, r22
    1042:	77 1f       	adc	r23, r23
    1044:	88 1f       	adc	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	1a f0       	brmi	.+6      	; 0x1050 <__fixunssfsi+0x24>
    104a:	ba 95       	dec	r27
    104c:	c9 f7       	brne	.-14     	; 0x1040 <__fixunssfsi+0x14>
    104e:	14 c0       	rjmp	.+40     	; 0x1078 <__fixunssfsi+0x4c>
    1050:	b1 30       	cpi	r27, 0x01	; 1
    1052:	91 f0       	breq	.+36     	; 0x1078 <__fixunssfsi+0x4c>
    1054:	0e 94 0d 09 	call	0x121a	; 0x121a <__fp_zero>
    1058:	b1 e0       	ldi	r27, 0x01	; 1
    105a:	08 95       	ret
    105c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__fp_zero>
    1060:	67 2f       	mov	r22, r23
    1062:	78 2f       	mov	r23, r24
    1064:	88 27       	eor	r24, r24
    1066:	b8 5f       	subi	r27, 0xF8	; 248
    1068:	39 f0       	breq	.+14     	; 0x1078 <__fixunssfsi+0x4c>
    106a:	b9 3f       	cpi	r27, 0xF9	; 249
    106c:	cc f3       	brlt	.-14     	; 0x1060 <__fixunssfsi+0x34>
    106e:	86 95       	lsr	r24
    1070:	77 95       	ror	r23
    1072:	67 95       	ror	r22
    1074:	b3 95       	inc	r27
    1076:	d9 f7       	brne	.-10     	; 0x106e <__fixunssfsi+0x42>
    1078:	3e f4       	brtc	.+14     	; 0x1088 <__fixunssfsi+0x5c>
    107a:	90 95       	com	r25
    107c:	80 95       	com	r24
    107e:	70 95       	com	r23
    1080:	61 95       	neg	r22
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	8f 4f       	sbci	r24, 0xFF	; 255
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	08 95       	ret

0000108a <__floatunsisf>:
    108a:	e8 94       	clt
    108c:	09 c0       	rjmp	.+18     	; 0x10a0 <__floatsisf+0x12>

0000108e <__floatsisf>:
    108e:	97 fb       	bst	r25, 7
    1090:	3e f4       	brtc	.+14     	; 0x10a0 <__floatsisf+0x12>
    1092:	90 95       	com	r25
    1094:	80 95       	com	r24
    1096:	70 95       	com	r23
    1098:	61 95       	neg	r22
    109a:	7f 4f       	sbci	r23, 0xFF	; 255
    109c:	8f 4f       	sbci	r24, 0xFF	; 255
    109e:	9f 4f       	sbci	r25, 0xFF	; 255
    10a0:	99 23       	and	r25, r25
    10a2:	a9 f0       	breq	.+42     	; 0x10ce <__floatsisf+0x40>
    10a4:	f9 2f       	mov	r31, r25
    10a6:	96 e9       	ldi	r25, 0x96	; 150
    10a8:	bb 27       	eor	r27, r27
    10aa:	93 95       	inc	r25
    10ac:	f6 95       	lsr	r31
    10ae:	87 95       	ror	r24
    10b0:	77 95       	ror	r23
    10b2:	67 95       	ror	r22
    10b4:	b7 95       	ror	r27
    10b6:	f1 11       	cpse	r31, r1
    10b8:	f8 cf       	rjmp	.-16     	; 0x10aa <__floatsisf+0x1c>
    10ba:	fa f4       	brpl	.+62     	; 0x10fa <__floatsisf+0x6c>
    10bc:	bb 0f       	add	r27, r27
    10be:	11 f4       	brne	.+4      	; 0x10c4 <__floatsisf+0x36>
    10c0:	60 ff       	sbrs	r22, 0
    10c2:	1b c0       	rjmp	.+54     	; 0x10fa <__floatsisf+0x6c>
    10c4:	6f 5f       	subi	r22, 0xFF	; 255
    10c6:	7f 4f       	sbci	r23, 0xFF	; 255
    10c8:	8f 4f       	sbci	r24, 0xFF	; 255
    10ca:	9f 4f       	sbci	r25, 0xFF	; 255
    10cc:	16 c0       	rjmp	.+44     	; 0x10fa <__floatsisf+0x6c>
    10ce:	88 23       	and	r24, r24
    10d0:	11 f0       	breq	.+4      	; 0x10d6 <__floatsisf+0x48>
    10d2:	96 e9       	ldi	r25, 0x96	; 150
    10d4:	11 c0       	rjmp	.+34     	; 0x10f8 <__floatsisf+0x6a>
    10d6:	77 23       	and	r23, r23
    10d8:	21 f0       	breq	.+8      	; 0x10e2 <__floatsisf+0x54>
    10da:	9e e8       	ldi	r25, 0x8E	; 142
    10dc:	87 2f       	mov	r24, r23
    10de:	76 2f       	mov	r23, r22
    10e0:	05 c0       	rjmp	.+10     	; 0x10ec <__floatsisf+0x5e>
    10e2:	66 23       	and	r22, r22
    10e4:	71 f0       	breq	.+28     	; 0x1102 <__floatsisf+0x74>
    10e6:	96 e8       	ldi	r25, 0x86	; 134
    10e8:	86 2f       	mov	r24, r22
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	2a f0       	brmi	.+10     	; 0x10fa <__floatsisf+0x6c>
    10f0:	9a 95       	dec	r25
    10f2:	66 0f       	add	r22, r22
    10f4:	77 1f       	adc	r23, r23
    10f6:	88 1f       	adc	r24, r24
    10f8:	da f7       	brpl	.-10     	; 0x10f0 <__floatsisf+0x62>
    10fa:	88 0f       	add	r24, r24
    10fc:	96 95       	lsr	r25
    10fe:	87 95       	ror	r24
    1100:	97 f9       	bld	r25, 7
    1102:	08 95       	ret

00001104 <__fp_inf>:
    1104:	97 f9       	bld	r25, 7
    1106:	9f 67       	ori	r25, 0x7F	; 127
    1108:	80 e8       	ldi	r24, 0x80	; 128
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	08 95       	ret

00001110 <__fp_mintl>:
    1110:	88 23       	and	r24, r24
    1112:	71 f4       	brne	.+28     	; 0x1130 <__fp_mintl+0x20>
    1114:	77 23       	and	r23, r23
    1116:	21 f0       	breq	.+8      	; 0x1120 <__fp_mintl+0x10>
    1118:	98 50       	subi	r25, 0x08	; 8
    111a:	87 2b       	or	r24, r23
    111c:	76 2f       	mov	r23, r22
    111e:	07 c0       	rjmp	.+14     	; 0x112e <__fp_mintl+0x1e>
    1120:	66 23       	and	r22, r22
    1122:	11 f4       	brne	.+4      	; 0x1128 <__fp_mintl+0x18>
    1124:	99 27       	eor	r25, r25
    1126:	0d c0       	rjmp	.+26     	; 0x1142 <__fp_mintl+0x32>
    1128:	90 51       	subi	r25, 0x10	; 16
    112a:	86 2b       	or	r24, r22
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	2a f0       	brmi	.+10     	; 0x113c <__fp_mintl+0x2c>
    1132:	9a 95       	dec	r25
    1134:	66 0f       	add	r22, r22
    1136:	77 1f       	adc	r23, r23
    1138:	88 1f       	adc	r24, r24
    113a:	da f7       	brpl	.-10     	; 0x1132 <__fp_mintl+0x22>
    113c:	88 0f       	add	r24, r24
    113e:	96 95       	lsr	r25
    1140:	87 95       	ror	r24
    1142:	97 f9       	bld	r25, 7
    1144:	08 95       	ret

00001146 <__fp_mpack>:
    1146:	9f 3f       	cpi	r25, 0xFF	; 255
    1148:	31 f0       	breq	.+12     	; 0x1156 <__fp_mpack_finite+0xc>

0000114a <__fp_mpack_finite>:
    114a:	91 50       	subi	r25, 0x01	; 1
    114c:	20 f4       	brcc	.+8      	; 0x1156 <__fp_mpack_finite+0xc>
    114e:	87 95       	ror	r24
    1150:	77 95       	ror	r23
    1152:	67 95       	ror	r22
    1154:	b7 95       	ror	r27
    1156:	88 0f       	add	r24, r24
    1158:	91 1d       	adc	r25, r1
    115a:	96 95       	lsr	r25
    115c:	87 95       	ror	r24
    115e:	97 f9       	bld	r25, 7
    1160:	08 95       	ret

00001162 <__fp_nan>:
    1162:	9f ef       	ldi	r25, 0xFF	; 255
    1164:	80 ec       	ldi	r24, 0xC0	; 192
    1166:	08 95       	ret

00001168 <__fp_pscA>:
    1168:	00 24       	eor	r0, r0
    116a:	0a 94       	dec	r0
    116c:	16 16       	cp	r1, r22
    116e:	17 06       	cpc	r1, r23
    1170:	18 06       	cpc	r1, r24
    1172:	09 06       	cpc	r0, r25
    1174:	08 95       	ret

00001176 <__fp_pscB>:
    1176:	00 24       	eor	r0, r0
    1178:	0a 94       	dec	r0
    117a:	12 16       	cp	r1, r18
    117c:	13 06       	cpc	r1, r19
    117e:	14 06       	cpc	r1, r20
    1180:	05 06       	cpc	r0, r21
    1182:	08 95       	ret

00001184 <__fp_round>:
    1184:	09 2e       	mov	r0, r25
    1186:	03 94       	inc	r0
    1188:	00 0c       	add	r0, r0
    118a:	11 f4       	brne	.+4      	; 0x1190 <__fp_round+0xc>
    118c:	88 23       	and	r24, r24
    118e:	52 f0       	brmi	.+20     	; 0x11a4 <__fp_round+0x20>
    1190:	bb 0f       	add	r27, r27
    1192:	40 f4       	brcc	.+16     	; 0x11a4 <__fp_round+0x20>
    1194:	bf 2b       	or	r27, r31
    1196:	11 f4       	brne	.+4      	; 0x119c <__fp_round+0x18>
    1198:	60 ff       	sbrs	r22, 0
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <__fp_round+0x20>
    119c:	6f 5f       	subi	r22, 0xFF	; 255
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	8f 4f       	sbci	r24, 0xFF	; 255
    11a2:	9f 4f       	sbci	r25, 0xFF	; 255
    11a4:	08 95       	ret

000011a6 <__fp_split3>:
    11a6:	57 fd       	sbrc	r21, 7
    11a8:	90 58       	subi	r25, 0x80	; 128
    11aa:	44 0f       	add	r20, r20
    11ac:	55 1f       	adc	r21, r21
    11ae:	59 f0       	breq	.+22     	; 0x11c6 <__fp_splitA+0x10>
    11b0:	5f 3f       	cpi	r21, 0xFF	; 255
    11b2:	71 f0       	breq	.+28     	; 0x11d0 <__fp_splitA+0x1a>
    11b4:	47 95       	ror	r20

000011b6 <__fp_splitA>:
    11b6:	88 0f       	add	r24, r24
    11b8:	97 fb       	bst	r25, 7
    11ba:	99 1f       	adc	r25, r25
    11bc:	61 f0       	breq	.+24     	; 0x11d6 <__fp_splitA+0x20>
    11be:	9f 3f       	cpi	r25, 0xFF	; 255
    11c0:	79 f0       	breq	.+30     	; 0x11e0 <__fp_splitA+0x2a>
    11c2:	87 95       	ror	r24
    11c4:	08 95       	ret
    11c6:	12 16       	cp	r1, r18
    11c8:	13 06       	cpc	r1, r19
    11ca:	14 06       	cpc	r1, r20
    11cc:	55 1f       	adc	r21, r21
    11ce:	f2 cf       	rjmp	.-28     	; 0x11b4 <__fp_split3+0xe>
    11d0:	46 95       	lsr	r20
    11d2:	f1 df       	rcall	.-30     	; 0x11b6 <__fp_splitA>
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <__fp_splitA+0x30>
    11d6:	16 16       	cp	r1, r22
    11d8:	17 06       	cpc	r1, r23
    11da:	18 06       	cpc	r1, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	f1 cf       	rjmp	.-30     	; 0x11c2 <__fp_splitA+0xc>
    11e0:	86 95       	lsr	r24
    11e2:	71 05       	cpc	r23, r1
    11e4:	61 05       	cpc	r22, r1
    11e6:	08 94       	sec
    11e8:	08 95       	ret

000011ea <__fp_trunc>:
    11ea:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__fp_splitA>
    11ee:	a0 f0       	brcs	.+40     	; 0x1218 <__fp_trunc+0x2e>
    11f0:	be e7       	ldi	r27, 0x7E	; 126
    11f2:	b9 17       	cp	r27, r25
    11f4:	88 f4       	brcc	.+34     	; 0x1218 <__fp_trunc+0x2e>
    11f6:	bb 27       	eor	r27, r27
    11f8:	9f 38       	cpi	r25, 0x8F	; 143
    11fa:	60 f4       	brcc	.+24     	; 0x1214 <__fp_trunc+0x2a>
    11fc:	16 16       	cp	r1, r22
    11fe:	b1 1d       	adc	r27, r1
    1200:	67 2f       	mov	r22, r23
    1202:	78 2f       	mov	r23, r24
    1204:	88 27       	eor	r24, r24
    1206:	98 5f       	subi	r25, 0xF8	; 248
    1208:	f7 cf       	rjmp	.-18     	; 0x11f8 <__fp_trunc+0xe>
    120a:	86 95       	lsr	r24
    120c:	77 95       	ror	r23
    120e:	67 95       	ror	r22
    1210:	b1 1d       	adc	r27, r1
    1212:	93 95       	inc	r25
    1214:	96 39       	cpi	r25, 0x96	; 150
    1216:	c8 f3       	brcs	.-14     	; 0x120a <__fp_trunc+0x20>
    1218:	08 95       	ret

0000121a <__fp_zero>:
    121a:	e8 94       	clt

0000121c <__fp_szero>:
    121c:	bb 27       	eor	r27, r27
    121e:	66 27       	eor	r22, r22
    1220:	77 27       	eor	r23, r23
    1222:	cb 01       	movw	r24, r22
    1224:	97 f9       	bld	r25, 7
    1226:	08 95       	ret

00001228 <__mulsf3>:
    1228:	0e 94 27 09 	call	0x124e	; 0x124e <__mulsf3x>
    122c:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__fp_round>
    1230:	0e 94 b4 08 	call	0x1168	; 0x1168 <__fp_pscA>
    1234:	38 f0       	brcs	.+14     	; 0x1244 <__mulsf3+0x1c>
    1236:	0e 94 bb 08 	call	0x1176	; 0x1176 <__fp_pscB>
    123a:	20 f0       	brcs	.+8      	; 0x1244 <__mulsf3+0x1c>
    123c:	95 23       	and	r25, r21
    123e:	11 f0       	breq	.+4      	; 0x1244 <__mulsf3+0x1c>
    1240:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__fp_inf>
    1244:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__fp_nan>
    1248:	11 24       	eor	r1, r1
    124a:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_szero>

0000124e <__mulsf3x>:
    124e:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__fp_split3>
    1252:	70 f3       	brcs	.-36     	; 0x1230 <__mulsf3+0x8>

00001254 <__mulsf3_pse>:
    1254:	95 9f       	mul	r25, r21
    1256:	c1 f3       	breq	.-16     	; 0x1248 <__mulsf3+0x20>
    1258:	95 0f       	add	r25, r21
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	55 1f       	adc	r21, r21
    125e:	62 9f       	mul	r22, r18
    1260:	f0 01       	movw	r30, r0
    1262:	72 9f       	mul	r23, r18
    1264:	bb 27       	eor	r27, r27
    1266:	f0 0d       	add	r31, r0
    1268:	b1 1d       	adc	r27, r1
    126a:	63 9f       	mul	r22, r19
    126c:	aa 27       	eor	r26, r26
    126e:	f0 0d       	add	r31, r0
    1270:	b1 1d       	adc	r27, r1
    1272:	aa 1f       	adc	r26, r26
    1274:	64 9f       	mul	r22, r20
    1276:	66 27       	eor	r22, r22
    1278:	b0 0d       	add	r27, r0
    127a:	a1 1d       	adc	r26, r1
    127c:	66 1f       	adc	r22, r22
    127e:	82 9f       	mul	r24, r18
    1280:	22 27       	eor	r18, r18
    1282:	b0 0d       	add	r27, r0
    1284:	a1 1d       	adc	r26, r1
    1286:	62 1f       	adc	r22, r18
    1288:	73 9f       	mul	r23, r19
    128a:	b0 0d       	add	r27, r0
    128c:	a1 1d       	adc	r26, r1
    128e:	62 1f       	adc	r22, r18
    1290:	83 9f       	mul	r24, r19
    1292:	a0 0d       	add	r26, r0
    1294:	61 1d       	adc	r22, r1
    1296:	22 1f       	adc	r18, r18
    1298:	74 9f       	mul	r23, r20
    129a:	33 27       	eor	r19, r19
    129c:	a0 0d       	add	r26, r0
    129e:	61 1d       	adc	r22, r1
    12a0:	23 1f       	adc	r18, r19
    12a2:	84 9f       	mul	r24, r20
    12a4:	60 0d       	add	r22, r0
    12a6:	21 1d       	adc	r18, r1
    12a8:	82 2f       	mov	r24, r18
    12aa:	76 2f       	mov	r23, r22
    12ac:	6a 2f       	mov	r22, r26
    12ae:	11 24       	eor	r1, r1
    12b0:	9f 57       	subi	r25, 0x7F	; 127
    12b2:	50 40       	sbci	r21, 0x00	; 0
    12b4:	9a f0       	brmi	.+38     	; 0x12dc <__mulsf3_pse+0x88>
    12b6:	f1 f0       	breq	.+60     	; 0x12f4 <__mulsf3_pse+0xa0>
    12b8:	88 23       	and	r24, r24
    12ba:	4a f0       	brmi	.+18     	; 0x12ce <__mulsf3_pse+0x7a>
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	bb 1f       	adc	r27, r27
    12c2:	66 1f       	adc	r22, r22
    12c4:	77 1f       	adc	r23, r23
    12c6:	88 1f       	adc	r24, r24
    12c8:	91 50       	subi	r25, 0x01	; 1
    12ca:	50 40       	sbci	r21, 0x00	; 0
    12cc:	a9 f7       	brne	.-22     	; 0x12b8 <__mulsf3_pse+0x64>
    12ce:	9e 3f       	cpi	r25, 0xFE	; 254
    12d0:	51 05       	cpc	r21, r1
    12d2:	80 f0       	brcs	.+32     	; 0x12f4 <__mulsf3_pse+0xa0>
    12d4:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__fp_inf>
    12d8:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_szero>
    12dc:	5f 3f       	cpi	r21, 0xFF	; 255
    12de:	e4 f3       	brlt	.-8      	; 0x12d8 <__mulsf3_pse+0x84>
    12e0:	98 3e       	cpi	r25, 0xE8	; 232
    12e2:	d4 f3       	brlt	.-12     	; 0x12d8 <__mulsf3_pse+0x84>
    12e4:	86 95       	lsr	r24
    12e6:	77 95       	ror	r23
    12e8:	67 95       	ror	r22
    12ea:	b7 95       	ror	r27
    12ec:	f7 95       	ror	r31
    12ee:	e7 95       	ror	r30
    12f0:	9f 5f       	subi	r25, 0xFF	; 255
    12f2:	c1 f7       	brne	.-16     	; 0x12e4 <__mulsf3_pse+0x90>
    12f4:	fe 2b       	or	r31, r30
    12f6:	88 0f       	add	r24, r24
    12f8:	91 1d       	adc	r25, r1
    12fa:	96 95       	lsr	r25
    12fc:	87 95       	ror	r24
    12fe:	97 f9       	bld	r25, 7
    1300:	08 95       	ret

00001302 <_exit>:
    1302:	f8 94       	cli

00001304 <__stop_program>:
    1304:	ff cf       	rjmp	.-2      	; 0x1304 <__stop_program>
