
On-demand Traffic Light Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001718  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00001718  000017ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800072  00800072  000017be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019c4  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aab  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001335  00000000  00000000  00003e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000668  00000000  00000000  00005190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087b  00000000  00000000  000057f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018e7  00000000  00000000  00006073  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000795a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 96 03 	jmp	0x72c	; 0x72c <__vector_1>
       8:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_2>
       c:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_3>
      10:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__vector_4>
      14:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__vector_7>
      20:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__vector_8>
      24:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__vector_9>
      28:	0c 94 86 08 	jmp	0x110c	; 0x110c <__vector_10>
      2c:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cf 01 	call	0x39e	; 0x39e <main>
      8a:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <stopwacth_INT_fun>:
	}
}


void stopwacth_INT_fun(void){
	sw_n_overflow++;
      92:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <sw_n_overflow>
      96:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <sw_n_overflow+0x1>
      9a:	01 96       	adiw	r24, 0x01	; 1
      9c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <sw_n_overflow+0x1>
      a0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <sw_n_overflow>
	SET_BIT(TIFR_Reg, 0);
      a4:	88 b7       	in	r24, 0x38	; 56
      a6:	81 60       	ori	r24, 0x01	; 1
      a8:	88 bf       	out	0x38, r24	; 56
      aa:	08 95       	ret

000000ac <button_INT_fun>:

	}
}

void button_INT_fun(void){
	if (INT_logical_state == RISING_EDGE) {
      ac:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <INT_logical_state>
      b0:	83 30       	cpi	r24, 0x03	; 3
      b2:	41 f4       	brne	.+16     	; 0xc4 <button_INT_fun+0x18>
		stopwatch_start(& stopwacth_timer);
      b4:	84 e6       	ldi	r24, 0x64	; 100
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	0e 94 93 06 	call	0xd26	; 0xd26 <stopwatch_start>
		INT_logical_state = FALLING_EDGE;
      bc:	82 e0       	ldi	r24, 0x02	; 2
      be:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <INT_logical_state>
      c2:	08 95       	ret
	}else if (INT_logical_state == FALLING_EDGE) {
      c4:	82 30       	cpi	r24, 0x02	; 2
      c6:	e9 f4       	brne	.+58     	; 0x102 <button_INT_fun+0x56>
		stopwatch_stop(& stopwacth_timer, & sw_timer_value);
      c8:	62 e7       	ldi	r22, 0x72	; 114
      ca:	70 e0       	ldi	r23, 0x00	; 0
      cc:	84 e6       	ldi	r24, 0x64	; 100
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <stopwatch_stop>
		if (sw_timer_value < 1000){
      d4:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
      d8:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
      dc:	88 3e       	cpi	r24, 0xE8	; 232
      de:	93 40       	sbci	r25, 0x03	; 3
      e0:	68 f4       	brcc	.+26     	; 0xfc <button_INT_fun+0x50>
			if(mode == PEDESTRIANS_MODE || cars_state == CARS_RED_STATE) return;
      e2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <mode>
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	61 f0       	breq	.+24     	; 0x102 <button_INT_fun+0x56>
      ea:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <cars_state>
      ee:	81 30       	cpi	r24, 0x01	; 1
      f0:	41 f0       	breq	.+16     	; 0x102 <button_INT_fun+0x56>
			timer_flag = FALSE;
      f2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timer_flag>
			mode = PEDESTRIANS_MODE;
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <mode>
		}
		INT_logical_state = RISING_EDGE;
      fc:	83 e0       	ldi	r24, 0x03	; 3
      fe:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <INT_logical_state>
     102:	08 95       	ret

00000104 <app_init>:
ST_TIMER_t delay_timer = {TIMER1, PRESCALER_1024, NONE, NULLPTR};
ST_TIMER_t stopwacth_timer = {TIMER0, PRESCALER_1024, OVF_MODE, &stopwacth_INT_fun};
ST_EXT_INT_t interrupt = {INTERRUPT0, ANY_LOGICAL_CHANGE, & button_INT_fun};

void app_init() {
	LED_init(CARS, GREEN);
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	0e 94 98 01 	call	0x330	; 0x330 <LED_init>
	LED_init(CARS, YELLOW);
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	0e 94 98 01 	call	0x330	; 0x330 <LED_init>
	LED_init(CARS, RED);
     114:	62 e0       	ldi	r22, 0x02	; 2
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	0e 94 98 01 	call	0x330	; 0x330 <LED_init>

	LED_init(PEDESTRIANS, GREEN);
     11c:	60 e0       	ldi	r22, 0x00	; 0
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	0e 94 98 01 	call	0x330	; 0x330 <LED_init>
	LED_init(PEDESTRIANS, YELLOW);
     124:	61 e0       	ldi	r22, 0x01	; 1
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	0e 94 98 01 	call	0x330	; 0x330 <LED_init>
	LED_init(PEDESTRIANS, RED);
     12c:	62 e0       	ldi	r22, 0x02	; 2
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	0e 94 98 01 	call	0x330	; 0x330 <LED_init>

	LED_init(DEBUG_LED_PORT, DEBUG_LED_PIN);
     134:	62 e0       	ldi	r22, 0x02	; 2
     136:	82 e0       	ldi	r24, 0x02	; 2
     138:	0e 94 98 01 	call	0x330	; 0x330 <LED_init>

	timer_init(& delay_timer);
     13c:	8a e6       	ldi	r24, 0x6A	; 106
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 95 04 	call	0x92a	; 0x92a <timer_init>
	timer_init(& stopwacth_timer);
     144:	84 e6       	ldi	r24, 0x64	; 100
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	0e 94 95 04 	call	0x92a	; 0x92a <timer_init>

	EXT_INT_init(& interrupt);
     14c:	80 e6       	ldi	r24, 0x60	; 96
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 37 03 	call	0x66e	; 0x66e <EXT_INT_init>
     154:	08 95       	ret

00000156 <blinking_leds>:
		}
		INT_logical_state = RISING_EDGE;
	}
}

void blinking_leds() {
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
	for(int i = 0; (i < 10); i++){
     15e:	00 e0       	ldi	r16, 0x00	; 0
     160:	10 e0       	ldi	r17, 0x00	; 0
     162:	16 c0       	rjmp	.+44     	; 0x190 <blinking_leds+0x3a>
		LED_toggle(CARS, YELLOW);
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	0e 94 c2 01 	call	0x384	; 0x384 <LED_toggle>
		LED_toggle(PEDESTRIANS, YELLOW);
     16c:	61 e0       	ldi	r22, 0x01	; 1
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	0e 94 c2 01 	call	0x384	; 0x384 <LED_toggle>
		delay_start(delay_timer.timerSelect, 500, delay_timer.prescaler);
     174:	ca e6       	ldi	r28, 0x6A	; 106
     176:	d0 e0       	ldi	r29, 0x00	; 0
     178:	49 81       	ldd	r20, Y+1	; 0x01
     17a:	5a 81       	ldd	r21, Y+2	; 0x02
     17c:	64 ef       	ldi	r22, 0xF4	; 244
     17e:	71 e0       	ldi	r23, 0x01	; 1
     180:	88 81       	ld	r24, Y
     182:	0e 94 c9 04 	call	0x992	; 0x992 <delay_start>
		delay_stop(delay_timer.timerSelect);
     186:	88 81       	ld	r24, Y
     188:	0e 94 62 06 	call	0xcc4	; 0xcc4 <delay_stop>
		INT_logical_state = RISING_EDGE;
	}
}

void blinking_leds() {
	for(int i = 0; (i < 10); i++){
     18c:	0f 5f       	subi	r16, 0xFF	; 255
     18e:	1f 4f       	sbci	r17, 0xFF	; 255
     190:	0a 30       	cpi	r16, 0x0A	; 10
     192:	11 05       	cpc	r17, r1
     194:	3c f3       	brlt	.-50     	; 0x164 <blinking_leds+0xe>
		LED_toggle(CARS, YELLOW);
		LED_toggle(PEDESTRIANS, YELLOW);
		delay_start(delay_timer.timerSelect, 500, delay_timer.prescaler);
		delay_stop(delay_timer.timerSelect);
	}
}
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	1f 91       	pop	r17
     19c:	0f 91       	pop	r16
     19e:	08 95       	ret

000001a0 <app_start>:
	EXT_INT_init(& interrupt);
}

void app_start() {
	while(1) {
		if (mode == CARS_MODE){
     1a0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <mode>
     1a4:	81 11       	cpse	r24, r1
     1a6:	6c c0       	rjmp	.+216    	; 0x280 <app_start+0xe0>
			LED_ON(DEBUG_LED_PORT, DEBUG_LED_PIN);
     1a8:	62 e0       	ldi	r22, 0x02	; 2
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_ON>

			LED_ON(CARS, GREEN);
     1b0:	60 e0       	ldi	r22, 0x00	; 0
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_ON>
			LED_OFF(CARS, YELLOW);
     1b8:	61 e0       	ldi	r22, 0x01	; 1
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
			LED_OFF(CARS, RED);
     1c0:	62 e0       	ldi	r22, 0x02	; 2
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>

			LED_OFF(PEDESTRIANS, GREEN);
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
			LED_OFF(PEDESTRIANS, YELLOW);
     1d0:	61 e0       	ldi	r22, 0x01	; 1
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
			LED_ON(PEDESTRIANS, RED);
     1d8:	62 e0       	ldi	r22, 0x02	; 2
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_ON>

			delay_start(delay_timer.timerSelect, 5000, delay_timer.prescaler);
     1e0:	ca e6       	ldi	r28, 0x6A	; 106
     1e2:	d0 e0       	ldi	r29, 0x00	; 0
     1e4:	49 81       	ldd	r20, Y+1	; 0x01
     1e6:	5a 81       	ldd	r21, Y+2	; 0x02
     1e8:	68 e8       	ldi	r22, 0x88	; 136
     1ea:	73 e1       	ldi	r23, 0x13	; 19
     1ec:	88 81       	ld	r24, Y
     1ee:	0e 94 c9 04 	call	0x992	; 0x992 <delay_start>
			delay_stop(delay_timer.timerSelect);
     1f2:	88 81       	ld	r24, Y
     1f4:	0e 94 62 06 	call	0xcc4	; 0xcc4 <delay_stop>
			
			LED_OFF(CARS, GREEN);
     1f8:	60 e0       	ldi	r22, 0x00	; 0
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
			LED_OFF(PEDESTRIANS, RED);
     200:	62 e0       	ldi	r22, 0x02	; 2
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>

			if (mode != CARS_MODE) continue;
     208:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <mode>
     20c:	81 11       	cpse	r24, r1
     20e:	c8 cf       	rjmp	.-112    	; 0x1a0 <app_start>

			cars_state = CARS_RED_STATE;
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <cars_state>

			blinking_leds();
     216:	0e 94 ab 00 	call	0x156	; 0x156 <blinking_leds>

			LED_OFF(CARS, GREEN);
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
			LED_OFF(CARS, YELLOW);
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
			LED_ON(CARS, RED);
     22a:	62 e0       	ldi	r22, 0x02	; 2
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_ON>

			LED_ON(PEDESTRIANS, GREEN);
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_ON>
			LED_OFF(PEDESTRIANS, YELLOW);
     23a:	61 e0       	ldi	r22, 0x01	; 1
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
			LED_OFF(PEDESTRIANS, RED);
     242:	62 e0       	ldi	r22, 0x02	; 2
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>

			delay_start(delay_timer.timerSelect, 5000, delay_timer.prescaler);
     24a:	49 81       	ldd	r20, Y+1	; 0x01
     24c:	5a 81       	ldd	r21, Y+2	; 0x02
     24e:	68 e8       	ldi	r22, 0x88	; 136
     250:	73 e1       	ldi	r23, 0x13	; 19
     252:	88 81       	ld	r24, Y
     254:	0e 94 c9 04 	call	0x992	; 0x992 <delay_start>
			delay_stop(delay_timer.timerSelect);
     258:	88 81       	ld	r24, Y
     25a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <delay_stop>
			
			LED_OFF(CARS, RED);
     25e:	62 e0       	ldi	r22, 0x02	; 2
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
			LED_OFF(PEDESTRIANS, GREEN);
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
			
			cars_state = CARS_GREEN_STATE;
     26e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <cars_state>

			blinking_leds();
     272:	0e 94 ab 00 	call	0x156	; 0x156 <blinking_leds>
			
			if (mode != CARS_MODE) continue;
     276:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <mode>
     27a:	81 11       	cpse	r24, r1
     27c:	91 cf       	rjmp	.-222    	; 0x1a0 <app_start>
     27e:	53 c0       	rjmp	.+166    	; 0x326 <app_start+0x186>
			
		} else {
			if (cars_state == CARS_GREEN_STATE) {
     280:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <cars_state>
     284:	81 11       	cpse	r24, r1
     286:	4f c0       	rjmp	.+158    	; 0x326 <app_start+0x186>
				LED_OFF(DEBUG_LED_PORT, DEBUG_LED_PIN);
     288:	62 e0       	ldi	r22, 0x02	; 2
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>

				LED_OFF(CARS, GREEN);
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
				LED_OFF(CARS, YELLOW);
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
				LED_OFF(CARS, RED);
     2a0:	62 e0       	ldi	r22, 0x02	; 2
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>

				LED_OFF(PEDESTRIANS, GREEN);
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
				LED_OFF(PEDESTRIANS, YELLOW);
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
				LED_OFF(PEDESTRIANS, RED);
     2b8:	62 e0       	ldi	r22, 0x02	; 2
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>

				blinking_leds();
     2c0:	0e 94 ab 00 	call	0x156	; 0x156 <blinking_leds>

				LED_OFF(CARS, GREEN);
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
				LED_OFF(CARS, YELLOW);
     2cc:	61 e0       	ldi	r22, 0x01	; 1
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
				LED_ON(CARS, RED);
     2d4:	62 e0       	ldi	r22, 0x02	; 2
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_ON>

				LED_ON(PEDESTRIANS, GREEN);
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_ON>
				LED_OFF(PEDESTRIANS, YELLOW);
     2e4:	61 e0       	ldi	r22, 0x01	; 1
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
				LED_OFF(PEDESTRIANS, RED);
     2ec:	62 e0       	ldi	r22, 0x02	; 2
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>

				cars_state = CARS_RED_STATE;
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <cars_state>

				delay_start(delay_timer.timerSelect, 5000, delay_timer.prescaler);
     2fa:	ca e6       	ldi	r28, 0x6A	; 106
     2fc:	d0 e0       	ldi	r29, 0x00	; 0
     2fe:	49 81       	ldd	r20, Y+1	; 0x01
     300:	5a 81       	ldd	r21, Y+2	; 0x02
     302:	68 e8       	ldi	r22, 0x88	; 136
     304:	73 e1       	ldi	r23, 0x13	; 19
     306:	88 81       	ld	r24, Y
     308:	0e 94 c9 04 	call	0x992	; 0x992 <delay_start>
				delay_stop(delay_timer.timerSelect);
     30c:	88 81       	ld	r24, Y
     30e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <delay_stop>

				LED_OFF(CARS, RED);
     312:	62 e0       	ldi	r22, 0x02	; 2
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>
				LED_OFF(PEDESTRIANS, GREEN);
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	0e 94 b4 01 	call	0x368	; 0x368 <LED_OFF>

				blinking_leds();
     322:	0e 94 ab 00 	call	0x156	; 0x156 <blinking_leds>
						
			}
		}
		mode = CARS_MODE;
     326:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <mode>
		cars_state = CARS_GREEN_STATE;
     32a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <cars_state>
     32e:	38 cf       	rjmp	.-400    	; 0x1a0 <app_start>

00000330 <LED_init>:
#include "led.h"

EN_LED_ERROR LED_init(uint8_t ledPort, uint8_t ledPin){
	EN_DIO_ERROR error;

	error = DIO_init(ledPort, ledPin, OUTPUT);
     330:	41 e0       	ldi	r20, 0x01	; 1
     332:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_init>

	switch (error) {
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	19 f0       	breq	.+6      	; 0x340 <LED_init+0x10>
     33a:	82 30       	cpi	r24, 0x02	; 2
     33c:	29 f0       	breq	.+10     	; 0x348 <LED_init+0x18>
     33e:	02 c0       	rjmp	.+4      	; 0x344 <LED_init+0x14>
		case INVALID_PORT: return INVALID_LED_PORT;
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	08 95       	ret
		case INVALID_PIN: return INVALID_LED_PIN;
		default: return LED_OK;
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	08 95       	ret

	error = DIO_init(ledPort, ledPin, OUTPUT);

	switch (error) {
		case INVALID_PORT: return INVALID_LED_PORT;
		case INVALID_PIN: return INVALID_LED_PIN;
     348:	82 e0       	ldi	r24, 0x02	; 2
		default: return LED_OK;
	}
}
     34a:	08 95       	ret

0000034c <LED_ON>:

EN_LED_ERROR LED_ON(uint8_t ledPort, uint8_t ledPin){
	EN_DIO_ERROR error;

	error = DIO_write(ledPort, ledPin, HIGH);
     34c:	41 e0       	ldi	r20, 0x01	; 1
     34e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_write>

	switch (error) {
     352:	81 30       	cpi	r24, 0x01	; 1
     354:	19 f0       	breq	.+6      	; 0x35c <LED_ON+0x10>
     356:	82 30       	cpi	r24, 0x02	; 2
     358:	29 f0       	breq	.+10     	; 0x364 <LED_ON+0x18>
     35a:	02 c0       	rjmp	.+4      	; 0x360 <LED_ON+0x14>
		case INVALID_PORT: return INVALID_LED_PORT;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	08 95       	ret
		case INVALID_PIN: return INVALID_LED_PIN;
		default: return LED_OK;
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	08 95       	ret

	error = DIO_write(ledPort, ledPin, HIGH);

	switch (error) {
		case INVALID_PORT: return INVALID_LED_PORT;
		case INVALID_PIN: return INVALID_LED_PIN;
     364:	82 e0       	ldi	r24, 0x02	; 2
		default: return LED_OK;
	}
}
     366:	08 95       	ret

00000368 <LED_OFF>:

EN_LED_ERROR LED_OFF(uint8_t ledPort, uint8_t ledPin){
	EN_DIO_ERROR error;

	error = DIO_write(ledPort, ledPin, LOW);
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_write>

	switch (error) {
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	19 f0       	breq	.+6      	; 0x378 <LED_OFF+0x10>
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	29 f0       	breq	.+10     	; 0x380 <LED_OFF+0x18>
     376:	02 c0       	rjmp	.+4      	; 0x37c <LED_OFF+0x14>
		case INVALID_PORT: return INVALID_LED_PORT;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	08 95       	ret
		case INVALID_PIN: return INVALID_LED_PIN;
		default: return LED_OK;
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	08 95       	ret

	error = DIO_write(ledPort, ledPin, LOW);

	switch (error) {
		case INVALID_PORT: return INVALID_LED_PORT;
		case INVALID_PIN: return INVALID_LED_PIN;
     380:	82 e0       	ldi	r24, 0x02	; 2
		default: return LED_OK;
	}
}
     382:	08 95       	ret

00000384 <LED_toggle>:

EN_LED_ERROR LED_toggle(uint8_t ledPort, uint8_t ledPin){
	EN_DIO_ERROR error;

	error = DIO_toggle(ledPort, ledPin);
     384:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <DIO_toggle>

	switch (error) {
     388:	81 30       	cpi	r24, 0x01	; 1
     38a:	19 f0       	breq	.+6      	; 0x392 <LED_toggle+0xe>
     38c:	82 30       	cpi	r24, 0x02	; 2
     38e:	29 f0       	breq	.+10     	; 0x39a <LED_toggle+0x16>
     390:	02 c0       	rjmp	.+4      	; 0x396 <LED_toggle+0x12>
		case INVALID_PORT: return INVALID_LED_PORT;
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	08 95       	ret
		case INVALID_PIN: return INVALID_LED_PIN;
		default: return LED_OK;
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	08 95       	ret

	error = DIO_toggle(ledPort, ledPin);

	switch (error) {
		case INVALID_PORT: return INVALID_LED_PORT;
		case INVALID_PIN: return INVALID_LED_PIN;
     39a:	82 e0       	ldi	r24, 0x02	; 2
		default: return LED_OK;
	}
     39c:	08 95       	ret

0000039e <main>:
#include "./Application/app.h"

int main(void) {

    /* Replace with your application code */
	app_init();
     39e:	0e 94 82 00 	call	0x104	; 0x104 <app_init>
	app_start();
     3a2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <app_start>
  
}
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	08 95       	ret

000003ac <DIO_init>:

#include "DIO.h"

EN_DIO_ERROR DIO_init(uint8_t port, uint8_t pin, uint8_t direction){
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7) {
     3ac:	68 30       	cpi	r22, 0x08	; 8
     3ae:	08 f0       	brcs	.+2      	; 0x3b2 <DIO_init+0x6>
     3b0:	78 c0       	rjmp	.+240    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		if (direction == OUTPUT) {
     3b2:	41 30       	cpi	r20, 0x01	; 1
     3b4:	c1 f5       	brne	.+112    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
			/* Check on the Required PORT Number */
			switch (port) {
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	91 f0       	breq	.+36     	; 0x3de <DIO_init+0x32>
     3ba:	28 f0       	brcs	.+10     	; 0x3c6 <DIO_init+0x1a>
     3bc:	82 30       	cpi	r24, 0x02	; 2
     3be:	d9 f0       	breq	.+54     	; 0x3f6 <DIO_init+0x4a>
     3c0:	83 30       	cpi	r24, 0x03	; 3
     3c2:	29 f1       	breq	.+74     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     3c4:	70 c0       	rjmp	.+224    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
				case PORTA: SET_BIT(DDRA_Reg, pin); break;
     3c6:	2a b3       	in	r18, 0x1a	; 26
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_init+0x26>
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	6a 95       	dec	r22
     3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_init+0x22>
     3d6:	82 2b       	or	r24, r18
     3d8:	8a bb       	out	0x1a, r24	; 26
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     3da:	80 e0       	ldi	r24, 0x00	; 0
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7) {
		if (direction == OUTPUT) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(DDRA_Reg, pin); break;
     3dc:	08 95       	ret
				case PORTB: SET_BIT(DDRB_Reg, pin); break;
     3de:	27 b3       	in	r18, 0x17	; 23
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_init+0x3e>
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	6a 95       	dec	r22
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_init+0x3a>
     3ee:	82 2b       	or	r24, r18
     3f0:	87 bb       	out	0x17, r24	; 23
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     3f2:	80 e0       	ldi	r24, 0x00	; 0
	if (pin <= PIN7) {
		if (direction == OUTPUT) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(DDRA_Reg, pin); break;
				case PORTB: SET_BIT(DDRB_Reg, pin); break;
     3f4:	08 95       	ret
				case PORTC: SET_BIT(DDRC_Reg, pin); break;
     3f6:	24 b3       	in	r18, 0x14	; 20
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	6a 95       	dec	r22
     404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_init+0x52>
     406:	82 2b       	or	r24, r18
     408:	84 bb       	out	0x14, r24	; 20
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     40a:	80 e0       	ldi	r24, 0x00	; 0
		if (direction == OUTPUT) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(DDRA_Reg, pin); break;
				case PORTB: SET_BIT(DDRB_Reg, pin); break;
				case PORTC: SET_BIT(DDRC_Reg, pin); break;
     40c:	08 95       	ret
				case PORTD: SET_BIT(DDRD_Reg, pin); break;
     40e:	21 b3       	in	r18, 0x11	; 17
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	6a 95       	dec	r22
     41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     41e:	82 2b       	or	r24, r18
     420:	81 bb       	out	0x11, r24	; 17
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     422:	80 e0       	ldi	r24, 0x00	; 0
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(DDRA_Reg, pin); break;
				case PORTB: SET_BIT(DDRB_Reg, pin); break;
				case PORTC: SET_BIT(DDRC_Reg, pin); break;
				case PORTD: SET_BIT(DDRD_Reg, pin); break;
     424:	08 95       	ret
				default: return INVALID_PORT;
			}
		} else if (direction == INPUT) {
     426:	41 11       	cpse	r20, r1
     428:	40 c0       	rjmp	.+128    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
			/* Check on the Required PORT Number */
			switch (port) {
     42a:	81 30       	cpi	r24, 0x01	; 1
     42c:	99 f0       	breq	.+38     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     42e:	28 f0       	brcs	.+10     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     430:	82 30       	cpi	r24, 0x02	; 2
     432:	e9 f0       	breq	.+58     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     434:	83 30       	cpi	r24, 0x03	; 3
     436:	41 f1       	breq	.+80     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     438:	3a c0       	rjmp	.+116    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
				case PORTA: CLR_BIT(DDRA_Reg, pin); break;
     43a:	2a b3       	in	r18, 0x1a	; 26
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	6a 95       	dec	r22
     448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     44a:	80 95       	com	r24
     44c:	82 23       	and	r24, r18
     44e:	8a bb       	out	0x1a, r24	; 26
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     450:	80 e0       	ldi	r24, 0x00	; 0
				default: return INVALID_PORT;
			}
		} else if (direction == INPUT) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(DDRA_Reg, pin); break;
     452:	08 95       	ret
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
     454:	27 b3       	in	r18, 0x17	; 23
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	02 c0       	rjmp	.+4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	6a 95       	dec	r22
     462:	e2 f7       	brpl	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     464:	80 95       	com	r24
     466:	82 23       	and	r24, r18
     468:	87 bb       	out	0x17, r24	; 23
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     46a:	80 e0       	ldi	r24, 0x00	; 0
			}
		} else if (direction == INPUT) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(DDRA_Reg, pin); break;
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
     46c:	08 95       	ret
				case PORTC: CLR_BIT(DDRC_Reg, pin); break;
     46e:	24 b3       	in	r18, 0x14	; 20
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	6a 95       	dec	r22
     47c:	e2 f7       	brpl	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     47e:	80 95       	com	r24
     480:	82 23       	and	r24, r18
     482:	84 bb       	out	0x14, r24	; 20
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     484:	80 e0       	ldi	r24, 0x00	; 0
		} else if (direction == INPUT) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(DDRA_Reg, pin); break;
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
				case PORTC: CLR_BIT(DDRC_Reg, pin); break;
     486:	08 95       	ret
				case PORTD: CLR_BIT(DDRD_Reg, pin); break;
     488:	21 b3       	in	r18, 0x11	; 17
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	02 c0       	rjmp	.+4      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	6a 95       	dec	r22
     496:	e2 f7       	brpl	.-8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     498:	80 95       	com	r24
     49a:	82 23       	and	r24, r18
     49c:	81 bb       	out	0x11, r24	; 17
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
     49e:	80 e0       	ldi	r24, 0x00	; 0
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(DDRA_Reg, pin); break;
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
				case PORTC: CLR_BIT(DDRC_Reg, pin); break;
				case PORTD: CLR_BIT(DDRD_Reg, pin); break;
     4a0:	08 95       	ret
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	08 95       	ret
			switch (port) {
				case PORTA: SET_BIT(DDRA_Reg, pin); break;
				case PORTB: SET_BIT(DDRB_Reg, pin); break;
				case PORTC: SET_BIT(DDRC_Reg, pin); break;
				case PORTD: SET_BIT(DDRD_Reg, pin); break;
				default: return INVALID_PORT;
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	08 95       	ret
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
				case PORTC: CLR_BIT(DDRC_Reg, pin); break;
				case PORTD: CLR_BIT(DDRD_Reg, pin); break;
				default: return INVALID_PORT;
			}
		} else return INVALID_DIR;
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	08 95       	ret
			switch (port) {
				case PORTA: CLR_BIT(DDRA_Reg, pin); break;
				case PORTB: CLR_BIT(DDRB_Reg, pin); break;
				case PORTC: CLR_BIT(DDRC_Reg, pin); break;
				case PORTD: CLR_BIT(DDRD_Reg, pin); break;
				default: return INVALID_PORT;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
			}
		} else return INVALID_DIR;
	} else return INVALID_PIN;

	return DIO_OK;
}
     4b0:	08 95       	ret

000004b2 <DIO_write>:

EN_DIO_ERROR DIO_write(uint8_t port, uint8_t pin, uint8_t value){
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7) {
     4b2:	68 30       	cpi	r22, 0x08	; 8
     4b4:	08 f0       	brcs	.+2      	; 0x4b8 <DIO_write+0x6>
     4b6:	78 c0       	rjmp	.+240    	; 0x5a8 <DIO_write+0xf6>
		if (value == HIGH) {
     4b8:	41 30       	cpi	r20, 0x01	; 1
     4ba:	c1 f5       	brne	.+112    	; 0x52c <DIO_write+0x7a>
			/* Check on the Required PORT Number */
			switch (port) {
     4bc:	81 30       	cpi	r24, 0x01	; 1
     4be:	91 f0       	breq	.+36     	; 0x4e4 <DIO_write+0x32>
     4c0:	28 f0       	brcs	.+10     	; 0x4cc <DIO_write+0x1a>
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	d9 f0       	breq	.+54     	; 0x4fc <DIO_write+0x4a>
     4c6:	83 30       	cpi	r24, 0x03	; 3
     4c8:	29 f1       	breq	.+74     	; 0x514 <DIO_write+0x62>
     4ca:	70 c0       	rjmp	.+224    	; 0x5ac <DIO_write+0xfa>
				case PORTA: SET_BIT(PORTA_Reg, pin); break;
     4cc:	2b b3       	in	r18, 0x1b	; 27
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_write+0x26>
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	6a 95       	dec	r22
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_write+0x22>
     4dc:	82 2b       	or	r24, r18
     4de:	8b bb       	out	0x1b, r24	; 27
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     4e0:	80 e0       	ldi	r24, 0x00	; 0
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7) {
		if (value == HIGH) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(PORTA_Reg, pin); break;
     4e2:	08 95       	ret
				case PORTB: SET_BIT(PORTB_Reg, pin); break;
     4e4:	28 b3       	in	r18, 0x18	; 24
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_write+0x3e>
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	6a 95       	dec	r22
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_write+0x3a>
     4f4:	82 2b       	or	r24, r18
     4f6:	88 bb       	out	0x18, r24	; 24
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     4f8:	80 e0       	ldi	r24, 0x00	; 0
	if (pin <= PIN7) {
		if (value == HIGH) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(PORTA_Reg, pin); break;
				case PORTB: SET_BIT(PORTB_Reg, pin); break;
     4fa:	08 95       	ret
				case PORTC: SET_BIT(PORTC_Reg, pin); break;
     4fc:	25 b3       	in	r18, 0x15	; 21
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_write+0x56>
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	6a 95       	dec	r22
     50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_write+0x52>
     50c:	82 2b       	or	r24, r18
     50e:	85 bb       	out	0x15, r24	; 21
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     510:	80 e0       	ldi	r24, 0x00	; 0
		if (value == HIGH) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(PORTA_Reg, pin); break;
				case PORTB: SET_BIT(PORTB_Reg, pin); break;
				case PORTC: SET_BIT(PORTC_Reg, pin); break;
     512:	08 95       	ret
				case PORTD: SET_BIT(PORTD_Reg, pin); break;
     514:	22 b3       	in	r18, 0x12	; 18
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_write+0x6e>
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	6a 95       	dec	r22
     522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_write+0x6a>
     524:	82 2b       	or	r24, r18
     526:	82 bb       	out	0x12, r24	; 18
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     528:	80 e0       	ldi	r24, 0x00	; 0
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: SET_BIT(PORTA_Reg, pin); break;
				case PORTB: SET_BIT(PORTB_Reg, pin); break;
				case PORTC: SET_BIT(PORTC_Reg, pin); break;
				case PORTD: SET_BIT(PORTD_Reg, pin); break;
     52a:	08 95       	ret
				default: return INVALID_PORT;

			}	
		} else if (value == LOW) {
     52c:	41 11       	cpse	r20, r1
     52e:	40 c0       	rjmp	.+128    	; 0x5b0 <DIO_write+0xfe>
			/* Check on the Required PORT Number */
			switch (port) {
     530:	81 30       	cpi	r24, 0x01	; 1
     532:	99 f0       	breq	.+38     	; 0x55a <DIO_write+0xa8>
     534:	28 f0       	brcs	.+10     	; 0x540 <DIO_write+0x8e>
     536:	82 30       	cpi	r24, 0x02	; 2
     538:	e9 f0       	breq	.+58     	; 0x574 <DIO_write+0xc2>
     53a:	83 30       	cpi	r24, 0x03	; 3
     53c:	41 f1       	breq	.+80     	; 0x58e <DIO_write+0xdc>
     53e:	3a c0       	rjmp	.+116    	; 0x5b4 <DIO_write+0x102>
				case PORTA: CLR_BIT(PORTA_Reg, pin); break;
     540:	2b b3       	in	r18, 0x1b	; 27
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_write+0x9a>
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	6a 95       	dec	r22
     54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_write+0x96>
     550:	80 95       	com	r24
     552:	82 23       	and	r24, r18
     554:	8b bb       	out	0x1b, r24	; 27
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     556:	80 e0       	ldi	r24, 0x00	; 0

			}	
		} else if (value == LOW) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(PORTA_Reg, pin); break;
     558:	08 95       	ret
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
     55a:	28 b3       	in	r18, 0x18	; 24
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_write+0xb4>
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	6a 95       	dec	r22
     568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_write+0xb0>
     56a:	80 95       	com	r24
     56c:	82 23       	and	r24, r18
     56e:	88 bb       	out	0x18, r24	; 24
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     570:	80 e0       	ldi	r24, 0x00	; 0
			}	
		} else if (value == LOW) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(PORTA_Reg, pin); break;
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
     572:	08 95       	ret
				case PORTC: CLR_BIT(PORTC_Reg, pin); break;
     574:	25 b3       	in	r18, 0x15	; 21
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_write+0xce>
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	6a 95       	dec	r22
     582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_write+0xca>
     584:	80 95       	com	r24
     586:	82 23       	and	r24, r18
     588:	85 bb       	out	0x15, r24	; 21
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     58a:	80 e0       	ldi	r24, 0x00	; 0
		} else if (value == LOW) {
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(PORTA_Reg, pin); break;
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
				case PORTC: CLR_BIT(PORTC_Reg, pin); break;
     58c:	08 95       	ret
				case PORTD: CLR_BIT(PORTD_Reg, pin); break;
     58e:	22 b3       	in	r18, 0x12	; 18
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_write+0xe8>
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	6a 95       	dec	r22
     59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_write+0xe4>
     59e:	80 95       	com	r24
     5a0:	82 23       	and	r24, r18
     5a2:	82 bb       	out	0x12, r24	; 18
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
     5a4:	80 e0       	ldi	r24, 0x00	; 0
			/* Check on the Required PORT Number */
			switch (port) {
				case PORTA: CLR_BIT(PORTA_Reg, pin); break;
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
				case PORTC: CLR_BIT(PORTC_Reg, pin); break;
				case PORTD: CLR_BIT(PORTD_Reg, pin); break;
     5a6:	08 95       	ret
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	08 95       	ret
			switch (port) {
				case PORTA: SET_BIT(PORTA_Reg, pin); break;
				case PORTB: SET_BIT(PORTB_Reg, pin); break;
				case PORTC: SET_BIT(PORTC_Reg, pin); break;
				case PORTD: SET_BIT(PORTD_Reg, pin); break;
				default: return INVALID_PORT;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	08 95       	ret
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
				case PORTC: CLR_BIT(PORTC_Reg, pin); break;
				case PORTD: CLR_BIT(PORTD_Reg, pin); break;
				default: return INVALID_PORT;
			}
		} else return INVALID_VALUE;
     5b0:	84 e0       	ldi	r24, 0x04	; 4
     5b2:	08 95       	ret
			switch (port) {
				case PORTA: CLR_BIT(PORTA_Reg, pin); break;
				case PORTB: CLR_BIT(PORTB_Reg, pin); break;
				case PORTC: CLR_BIT(PORTC_Reg, pin); break;
				case PORTD: CLR_BIT(PORTD_Reg, pin); break;
				default: return INVALID_PORT;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
			}
		} else return INVALID_VALUE;
	} else return INVALID_PIN;

	return DIO_OK;
}
     5b6:	08 95       	ret

000005b8 <DIO_toggle>:

EN_DIO_ERROR DIO_toggle(uint8_t port, uint8_t pin){
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7){
     5b8:	68 30       	cpi	r22, 0x08	; 8
     5ba:	c0 f5       	brcc	.+112    	; 0x62c <DIO_toggle+0x74>
		/* Check on the Required PORT Number */
		switch(port){
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	91 f0       	breq	.+36     	; 0x5e4 <DIO_toggle+0x2c>
     5c0:	28 f0       	brcs	.+10     	; 0x5cc <DIO_toggle+0x14>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	d9 f0       	breq	.+54     	; 0x5fc <DIO_toggle+0x44>
     5c6:	83 30       	cpi	r24, 0x03	; 3
     5c8:	29 f1       	breq	.+74     	; 0x614 <DIO_toggle+0x5c>
     5ca:	32 c0       	rjmp	.+100    	; 0x630 <DIO_toggle+0x78>
			case PORTA: TOG_BIT(PORTA_Reg, pin); break;
     5cc:	2b b3       	in	r18, 0x1b	; 27
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_toggle+0x20>
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	6a 95       	dec	r22
     5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_toggle+0x1c>
     5dc:	82 27       	eor	r24, r18
     5de:	8b bb       	out	0x1b, r24	; 27
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
			default: return INVALID_PORT;
		}
	} else return INVALID_PIN;

	return DIO_OK;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
EN_DIO_ERROR DIO_toggle(uint8_t port, uint8_t pin){
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7){
		/* Check on the Required PORT Number */
		switch(port){
			case PORTA: TOG_BIT(PORTA_Reg, pin); break;
     5e2:	08 95       	ret
			case PORTB: TOG_BIT(PORTB_Reg, pin); break;
     5e4:	28 b3       	in	r18, 0x18	; 24
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_toggle+0x38>
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	6a 95       	dec	r22
     5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_toggle+0x34>
     5f4:	82 27       	eor	r24, r18
     5f6:	88 bb       	out	0x18, r24	; 24
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
			default: return INVALID_PORT;
		}
	} else return INVALID_PIN;

	return DIO_OK;
     5f8:	80 e0       	ldi	r24, 0x00	; 0
	/* Make sure that the Pin is in the valid range */
	if (pin <= PIN7){
		/* Check on the Required PORT Number */
		switch(port){
			case PORTA: TOG_BIT(PORTA_Reg, pin); break;
			case PORTB: TOG_BIT(PORTB_Reg, pin); break;
     5fa:	08 95       	ret
			case PORTC: TOG_BIT(PORTC_Reg, pin); break;
     5fc:	25 b3       	in	r18, 0x15	; 21
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_toggle+0x50>
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	6a 95       	dec	r22
     60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_toggle+0x4c>
     60c:	82 27       	eor	r24, r18
     60e:	85 bb       	out	0x15, r24	; 21
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
			default: return INVALID_PORT;
		}
	} else return INVALID_PIN;

	return DIO_OK;
     610:	80 e0       	ldi	r24, 0x00	; 0
	if (pin <= PIN7){
		/* Check on the Required PORT Number */
		switch(port){
			case PORTA: TOG_BIT(PORTA_Reg, pin); break;
			case PORTB: TOG_BIT(PORTB_Reg, pin); break;
			case PORTC: TOG_BIT(PORTC_Reg, pin); break;
     612:	08 95       	ret
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
     614:	22 b3       	in	r18, 0x12	; 18
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_toggle+0x68>
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	6a 95       	dec	r22
     622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_toggle+0x64>
     624:	82 27       	eor	r24, r18
     626:	82 bb       	out	0x12, r24	; 18
			default: return INVALID_PORT;
		}
	} else return INVALID_PIN;

	return DIO_OK;
     628:	80 e0       	ldi	r24, 0x00	; 0
		/* Check on the Required PORT Number */
		switch(port){
			case PORTA: TOG_BIT(PORTA_Reg, pin); break;
			case PORTB: TOG_BIT(PORTB_Reg, pin); break;
			case PORTC: TOG_BIT(PORTC_Reg, pin); break;
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
     62a:	08 95       	ret
			default: return INVALID_PORT;
		}
	} else return INVALID_PIN;
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	08 95       	ret
		switch(port){
			case PORTA: TOG_BIT(PORTA_Reg, pin); break;
			case PORTB: TOG_BIT(PORTB_Reg, pin); break;
			case PORTC: TOG_BIT(PORTC_Reg, pin); break;
			case PORTD: TOG_BIT(PORTD_Reg, pin); break;
			default: return INVALID_PORT;
     630:	81 e0       	ldi	r24, 0x01	; 1
		}
	} else return INVALID_PIN;

	return DIO_OK;
}
     632:	08 95       	ret

00000634 <set_INT_FUN>:
static void (* EXT_INT1_PTR_TO_FUN) (void) = NULLPTR;
static void (* EXT_INT2_PTR_TO_FUN) (void) = NULLPTR;

//////////////////////////// private function ////////////////////////////

void set_INT_FUN(ST_EXT_INT_t * interrupt){
     634:	fc 01       	movw	r30, r24
	switch (interrupt->interruptPinSelect) {
     636:	90 81       	ld	r25, Z
     638:	91 30       	cpi	r25, 0x01	; 1
     63a:	59 f0       	breq	.+22     	; 0x652 <set_INT_FUN+0x1e>
     63c:	18 f0       	brcs	.+6      	; 0x644 <set_INT_FUN+0x10>
     63e:	92 30       	cpi	r25, 0x02	; 2
     640:	79 f0       	breq	.+30     	; 0x660 <set_INT_FUN+0x2c>
     642:	08 95       	ret
		case INTERRUPT0:
		EXT_INT0_PTR_TO_FUN = interrupt->callbackFunction;
     644:	82 81       	ldd	r24, Z+2	; 0x02
     646:	93 81       	ldd	r25, Z+3	; 0x03
     648:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <EXT_INT0_PTR_TO_FUN+0x1>
     64c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <EXT_INT0_PTR_TO_FUN>
		break;
     650:	08 95       	ret
		case INTERRUPT1:
		EXT_INT1_PTR_TO_FUN = interrupt->callbackFunction;
     652:	82 81       	ldd	r24, Z+2	; 0x02
     654:	93 81       	ldd	r25, Z+3	; 0x03
     656:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <EXT_INT1_PTR_TO_FUN+0x1>
     65a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <EXT_INT1_PTR_TO_FUN>
		break;
     65e:	08 95       	ret
		case INTERRUPT2:
		EXT_INT2_PTR_TO_FUN = interrupt->callbackFunction;
     660:	82 81       	ldd	r24, Z+2	; 0x02
     662:	93 81       	ldd	r25, Z+3	; 0x03
     664:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <EXT_INT2_PTR_TO_FUN+0x1>
     668:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <EXT_INT2_PTR_TO_FUN>
     66c:	08 95       	ret

0000066e <EXT_INT_init>:
//////////////////////////// public functions ////////////////////////////

EN_INTERRUPT_ERROR EXT_INT_init(ST_EXT_INT_t * interrupt){

    /* setting the global interrupt flag */
    sei();
     66e:	78 94       	sei

    /* Make sure that the interrupt is in the valid range */
    switch (interrupt->interruptPinSelect) {
     670:	fc 01       	movw	r30, r24
     672:	20 81       	ld	r18, Z
     674:	21 30       	cpi	r18, 0x01	; 1
     676:	09 f1       	breq	.+66     	; 0x6ba <EXT_INT_init+0x4c>
     678:	18 f0       	brcs	.+6      	; 0x680 <EXT_INT_init+0x12>
     67a:	22 30       	cpi	r18, 0x02	; 2
     67c:	d9 f1       	breq	.+118    	; 0x6f4 <EXT_INT_init+0x86>
     67e:	4e c0       	rjmp	.+156    	; 0x71c <EXT_INT_init+0xae>
        case INTERRUPT0:
            SET_BIT(GICR_Reg, 6); // activating interrupt 0
     680:	2b b7       	in	r18, 0x3b	; 59
     682:	20 64       	ori	r18, 0x40	; 64
     684:	2b bf       	out	0x3b, r18	; 59
            switch (interrupt->senseControl) {
     686:	fc 01       	movw	r30, r24
     688:	21 81       	ldd	r18, Z+1	; 0x01
     68a:	21 30       	cpi	r18, 0x01	; 1
     68c:	51 f0       	breq	.+20     	; 0x6a2 <EXT_INT_init+0x34>
     68e:	28 f0       	brcs	.+10     	; 0x69a <EXT_INT_init+0x2c>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	59 f0       	breq	.+22     	; 0x6aa <EXT_INT_init+0x3c>
     694:	23 30       	cpi	r18, 0x03	; 3
     696:	69 f0       	breq	.+26     	; 0x6b2 <EXT_INT_init+0x44>
     698:	43 c0       	rjmp	.+134    	; 0x720 <EXT_INT_init+0xb2>
                case LOW_LEVEL: MCUCR_Reg &= 0xFC; break;
     69a:	25 b7       	in	r18, 0x35	; 53
     69c:	2c 7f       	andi	r18, 0xFC	; 252
     69e:	25 bf       	out	0x35, r18	; 53
     6a0:	39 c0       	rjmp	.+114    	; 0x714 <EXT_INT_init+0xa6>
                case ANY_LOGICAL_CHANGE: SET_BIT(MCUCR_Reg, 0); break;
     6a2:	25 b7       	in	r18, 0x35	; 53
     6a4:	21 60       	ori	r18, 0x01	; 1
     6a6:	25 bf       	out	0x35, r18	; 53
     6a8:	35 c0       	rjmp	.+106    	; 0x714 <EXT_INT_init+0xa6>
                case FALLING_EDGE: SET_BIT(MCUCR_Reg, 1); break;
     6aa:	25 b7       	in	r18, 0x35	; 53
     6ac:	22 60       	ori	r18, 0x02	; 2
     6ae:	25 bf       	out	0x35, r18	; 53
     6b0:	31 c0       	rjmp	.+98     	; 0x714 <EXT_INT_init+0xa6>
                case RISING_EDGE: MCUCR_Reg |= 0x03; break;
     6b2:	25 b7       	in	r18, 0x35	; 53
     6b4:	23 60       	ori	r18, 0x03	; 3
     6b6:	25 bf       	out	0x35, r18	; 53
     6b8:	2d c0       	rjmp	.+90     	; 0x714 <EXT_INT_init+0xa6>
                default: return INVALID_SENSE_CONTROL;
            }
            break;
        case INTERRUPT1:
            SET_BIT(GICR_Reg, 7); // activating interrupt 1
     6ba:	2b b7       	in	r18, 0x3b	; 59
     6bc:	20 68       	ori	r18, 0x80	; 128
     6be:	2b bf       	out	0x3b, r18	; 59
            switch (interrupt->senseControl) {
     6c0:	fc 01       	movw	r30, r24
     6c2:	21 81       	ldd	r18, Z+1	; 0x01
     6c4:	21 30       	cpi	r18, 0x01	; 1
     6c6:	51 f0       	breq	.+20     	; 0x6dc <EXT_INT_init+0x6e>
     6c8:	28 f0       	brcs	.+10     	; 0x6d4 <EXT_INT_init+0x66>
     6ca:	22 30       	cpi	r18, 0x02	; 2
     6cc:	59 f0       	breq	.+22     	; 0x6e4 <EXT_INT_init+0x76>
     6ce:	23 30       	cpi	r18, 0x03	; 3
     6d0:	69 f0       	breq	.+26     	; 0x6ec <EXT_INT_init+0x7e>
     6d2:	28 c0       	rjmp	.+80     	; 0x724 <EXT_INT_init+0xb6>
                case LOW_LEVEL: MCUCR_Reg &= 0xF3; break;
     6d4:	25 b7       	in	r18, 0x35	; 53
     6d6:	23 7f       	andi	r18, 0xF3	; 243
     6d8:	25 bf       	out	0x35, r18	; 53
     6da:	1c c0       	rjmp	.+56     	; 0x714 <EXT_INT_init+0xa6>
                case ANY_LOGICAL_CHANGE: SET_BIT(MCUCR_Reg, 2); break;
     6dc:	25 b7       	in	r18, 0x35	; 53
     6de:	24 60       	ori	r18, 0x04	; 4
     6e0:	25 bf       	out	0x35, r18	; 53
     6e2:	18 c0       	rjmp	.+48     	; 0x714 <EXT_INT_init+0xa6>
                case FALLING_EDGE: SET_BIT(MCUCR_Reg, 3); break;
     6e4:	25 b7       	in	r18, 0x35	; 53
     6e6:	28 60       	ori	r18, 0x08	; 8
     6e8:	25 bf       	out	0x35, r18	; 53
     6ea:	14 c0       	rjmp	.+40     	; 0x714 <EXT_INT_init+0xa6>
                case RISING_EDGE: MCUCR_Reg |= 0x0C; break;
     6ec:	25 b7       	in	r18, 0x35	; 53
     6ee:	2c 60       	ori	r18, 0x0C	; 12
     6f0:	25 bf       	out	0x35, r18	; 53
     6f2:	10 c0       	rjmp	.+32     	; 0x714 <EXT_INT_init+0xa6>
                default: return INVALID_SENSE_CONTROL;
            }
            break;
        case INTERRUPT2:
            SET_BIT(GICR_Reg, 5); // activating interrupt 2
     6f4:	2b b7       	in	r18, 0x3b	; 59
     6f6:	20 62       	ori	r18, 0x20	; 32
     6f8:	2b bf       	out	0x3b, r18	; 59
            switch (interrupt->senseControl) {
     6fa:	fc 01       	movw	r30, r24
     6fc:	21 81       	ldd	r18, Z+1	; 0x01
     6fe:	22 30       	cpi	r18, 0x02	; 2
     700:	31 f0       	breq	.+12     	; 0x70e <EXT_INT_init+0xa0>
     702:	23 30       	cpi	r18, 0x03	; 3
     704:	89 f4       	brne	.+34     	; 0x728 <EXT_INT_init+0xba>
                case RISING_EDGE: SET_BIT(MCUCSR_Reg, 6); break;
     706:	24 b7       	in	r18, 0x34	; 52
     708:	20 64       	ori	r18, 0x40	; 64
     70a:	24 bf       	out	0x34, r18	; 52
     70c:	03 c0       	rjmp	.+6      	; 0x714 <EXT_INT_init+0xa6>
                case FALLING_EDGE: CLR_BIT(MCUCSR_Reg, 6); break;
     70e:	24 b7       	in	r18, 0x34	; 52
     710:	2f 7b       	andi	r18, 0xBF	; 191
     712:	24 bf       	out	0x34, r18	; 52
                default: return INVALID_SENSE_CONTROL;
            }
            break;
        default: return INVALID_INTERRUPT_SELECT;
    }
    set_INT_FUN(interrupt);
     714:	0e 94 1a 03 	call	0x634	; 0x634 <set_INT_FUN>
    return INTERRUPT_OK;
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	08 95       	ret
                case RISING_EDGE: SET_BIT(MCUCSR_Reg, 6); break;
                case FALLING_EDGE: CLR_BIT(MCUCSR_Reg, 6); break;
                default: return INVALID_SENSE_CONTROL;
            }
            break;
        default: return INVALID_INTERRUPT_SELECT;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	08 95       	ret
            switch (interrupt->senseControl) {
                case LOW_LEVEL: MCUCR_Reg &= 0xFC; break;
                case ANY_LOGICAL_CHANGE: SET_BIT(MCUCR_Reg, 0); break;
                case FALLING_EDGE: SET_BIT(MCUCR_Reg, 1); break;
                case RISING_EDGE: MCUCR_Reg |= 0x03; break;
                default: return INVALID_SENSE_CONTROL;
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	08 95       	ret
            switch (interrupt->senseControl) {
                case LOW_LEVEL: MCUCR_Reg &= 0xF3; break;
                case ANY_LOGICAL_CHANGE: SET_BIT(MCUCR_Reg, 2); break;
                case FALLING_EDGE: SET_BIT(MCUCR_Reg, 3); break;
                case RISING_EDGE: MCUCR_Reg |= 0x0C; break;
                default: return INVALID_SENSE_CONTROL;
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	08 95       	ret
        case INTERRUPT2:
            SET_BIT(GICR_Reg, 5); // activating interrupt 2
            switch (interrupt->senseControl) {
                case RISING_EDGE: SET_BIT(MCUCSR_Reg, 6); break;
                case FALLING_EDGE: CLR_BIT(MCUCSR_Reg, 6); break;
                default: return INVALID_SENSE_CONTROL;
     728:	82 e0       	ldi	r24, 0x02	; 2
            break;
        default: return INVALID_INTERRUPT_SELECT;
    }
    set_INT_FUN(interrupt);
    return INTERRUPT_OK;
}
     72a:	08 95       	ret

0000072c <__vector_1>:
//////////////////////////////////////////////////////////////////////////

///////////////////////////// ISR functions //////////////////////////////


ISR(INT0_vect) {
     72c:	1f 92       	push	r1
     72e:	0f 92       	push	r0
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	0f 92       	push	r0
     734:	11 24       	eor	r1, r1
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	7f 93       	push	r23
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	ef 93       	push	r30
     74c:	ff 93       	push	r31
    EXT_INT0_PTR_TO_FUN();
     74e:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <EXT_INT0_PTR_TO_FUN>
     752:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <EXT_INT0_PTR_TO_FUN+0x1>
     756:	09 95       	icall
}
     758:	ff 91       	pop	r31
     75a:	ef 91       	pop	r30
     75c:	bf 91       	pop	r27
     75e:	af 91       	pop	r26
     760:	9f 91       	pop	r25
     762:	8f 91       	pop	r24
     764:	7f 91       	pop	r23
     766:	6f 91       	pop	r22
     768:	5f 91       	pop	r21
     76a:	4f 91       	pop	r20
     76c:	3f 91       	pop	r19
     76e:	2f 91       	pop	r18
     770:	0f 90       	pop	r0
     772:	0f be       	out	0x3f, r0	; 63
     774:	0f 90       	pop	r0
     776:	1f 90       	pop	r1
     778:	18 95       	reti

0000077a <__vector_2>:

ISR(INT1_vect) {
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	3f 93       	push	r19
     788:	4f 93       	push	r20
     78a:	5f 93       	push	r21
     78c:	6f 93       	push	r22
     78e:	7f 93       	push	r23
     790:	8f 93       	push	r24
     792:	9f 93       	push	r25
     794:	af 93       	push	r26
     796:	bf 93       	push	r27
     798:	ef 93       	push	r30
     79a:	ff 93       	push	r31
    EXT_INT1_PTR_TO_FUN();
     79c:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <EXT_INT1_PTR_TO_FUN>
     7a0:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <EXT_INT1_PTR_TO_FUN+0x1>
     7a4:	09 95       	icall
}
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	7f 91       	pop	r23
     7b4:	6f 91       	pop	r22
     7b6:	5f 91       	pop	r21
     7b8:	4f 91       	pop	r20
     7ba:	3f 91       	pop	r19
     7bc:	2f 91       	pop	r18
     7be:	0f 90       	pop	r0
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <__vector_3>:

ISR(INT2_vect) {
     7c8:	1f 92       	push	r1
     7ca:	0f 92       	push	r0
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	0f 92       	push	r0
     7d0:	11 24       	eor	r1, r1
     7d2:	2f 93       	push	r18
     7d4:	3f 93       	push	r19
     7d6:	4f 93       	push	r20
     7d8:	5f 93       	push	r21
     7da:	6f 93       	push	r22
     7dc:	7f 93       	push	r23
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	af 93       	push	r26
     7e4:	bf 93       	push	r27
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
    EXT_INT2_PTR_TO_FUN();
     7ea:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <EXT_INT2_PTR_TO_FUN>
     7ee:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <EXT_INT2_PTR_TO_FUN+0x1>
     7f2:	09 95       	icall
     7f4:	ff 91       	pop	r31
     7f6:	ef 91       	pop	r30
     7f8:	bf 91       	pop	r27
     7fa:	af 91       	pop	r26
     7fc:	9f 91       	pop	r25
     7fe:	8f 91       	pop	r24
     800:	7f 91       	pop	r23
     802:	6f 91       	pop	r22
     804:	5f 91       	pop	r21
     806:	4f 91       	pop	r20
     808:	3f 91       	pop	r19
     80a:	2f 91       	pop	r18
     80c:	0f 90       	pop	r0
     80e:	0f be       	out	0x3f, r0	; 63
     810:	0f 90       	pop	r0
     812:	1f 90       	pop	r1
     814:	18 95       	reti

00000816 <set_TIMER_OVF_INT_fun>:
static void (* T1_CMPB_PTR_TO_FUN) (void) = NULLPTR;
static void (* T2_CMP_PTR_TO_FUN) (void) = NULLPTR;

//////////////////////////// private functions ///////////////////////////

void set_TIMER_OVF_INT_fun(ST_TIMER_t * timer){
     816:	fc 01       	movw	r30, r24
	switch (timer->timerSelect) {
     818:	90 81       	ld	r25, Z
     81a:	91 30       	cpi	r25, 0x01	; 1
     81c:	59 f0       	breq	.+22     	; 0x834 <set_TIMER_OVF_INT_fun+0x1e>
     81e:	18 f0       	brcs	.+6      	; 0x826 <set_TIMER_OVF_INT_fun+0x10>
     820:	92 30       	cpi	r25, 0x02	; 2
     822:	79 f0       	breq	.+30     	; 0x842 <set_TIMER_OVF_INT_fun+0x2c>
     824:	08 95       	ret
		case TIMER0:
			T0_OVF_PTR_TO_FUN = timer->callbackFunction;
     826:	84 81       	ldd	r24, Z+4	; 0x04
     828:	95 81       	ldd	r25, Z+5	; 0x05
     82a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <T0_OVF_PTR_TO_FUN+0x1>
     82e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <T0_OVF_PTR_TO_FUN>
			break;
     832:	08 95       	ret
		case TIMER1:
			T1_OVF_PTR_TO_FUN = timer->callbackFunction;
     834:	84 81       	ldd	r24, Z+4	; 0x04
     836:	95 81       	ldd	r25, Z+5	; 0x05
     838:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <T1_OVF_PTR_TO_FUN+0x1>
     83c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <T1_OVF_PTR_TO_FUN>
			break;
     840:	08 95       	ret
		case TIMER2:
			T2_OVF_PTR_TO_FUN = timer->callbackFunction;
     842:	84 81       	ldd	r24, Z+4	; 0x04
     844:	95 81       	ldd	r25, Z+5	; 0x05
     846:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <T2_OVF_PTR_TO_FUN+0x1>
     84a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <T2_OVF_PTR_TO_FUN>
     84e:	08 95       	ret

00000850 <set_TIMER_CMP_INT_fun>:
			break;
	}
}

void set_TIMER_CMP_INT_fun(ST_TIMER_t * timer){
     850:	fc 01       	movw	r30, r24
	switch (timer->timerSelect) {
     852:	90 81       	ld	r25, Z
     854:	91 30       	cpi	r25, 0x01	; 1
     856:	59 f0       	breq	.+22     	; 0x86e <__stack+0xf>
     858:	18 f0       	brcs	.+6      	; 0x860 <__stack+0x1>
     85a:	92 30       	cpi	r25, 0x02	; 2
     85c:	99 f0       	breq	.+38     	; 0x884 <__stack+0x25>
     85e:	08 95       	ret
		case TIMER0:
			T0_CMP_PTR_TO_FUN = timer->callbackFunction;
     860:	84 81       	ldd	r24, Z+4	; 0x04
     862:	95 81       	ldd	r25, Z+5	; 0x05
     864:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <T0_CMP_PTR_TO_FUN+0x1>
     868:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <T0_CMP_PTR_TO_FUN>
			break;
     86c:	08 95       	ret
		case TIMER1:
			T1_CMPA_PTR_TO_FUN = timer->callbackFunction;
     86e:	84 81       	ldd	r24, Z+4	; 0x04
     870:	95 81       	ldd	r25, Z+5	; 0x05
     872:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <T1_CMPA_PTR_TO_FUN+0x1>
     876:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <T1_CMPA_PTR_TO_FUN>
			T1_CMPB_PTR_TO_FUN = timer->callbackFunction;
     87a:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <T1_CMPB_PTR_TO_FUN+0x1>
     87e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <T1_CMPB_PTR_TO_FUN>
			break;
     882:	08 95       	ret
		case TIMER2:
			T2_CMP_PTR_TO_FUN = timer->callbackFunction;
     884:	84 81       	ldd	r24, Z+4	; 0x04
     886:	95 81       	ldd	r25, Z+5	; 0x05
     888:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <T2_CMP_PTR_TO_FUN+0x1>
     88c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <T2_CMP_PTR_TO_FUN>
     890:	08 95       	ret

00000892 <set_timer_init_value>:
}

void set_timer_init_value(uint8_t timer, uint16_t value) {
	
	/* Make sure that the timer is in the valid range */
	switch (timer) {
     892:	81 30       	cpi	r24, 0x01	; 1
     894:	31 f0       	breq	.+12     	; 0x8a2 <set_timer_init_value+0x10>
     896:	18 f0       	brcs	.+6      	; 0x89e <set_timer_init_value+0xc>
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	31 f0       	breq	.+12     	; 0x8a8 <set_timer_init_value+0x16>
     89c:	08 95       	ret
		case TIMER0:
		TCNT0_Reg = (uint8_t) value;
     89e:	62 bf       	out	0x32, r22	; 50
		break;
     8a0:	08 95       	ret
		case TIMER1:
		TCNT1H_Reg = (uint8_t) (value >> 8);
     8a2:	7d bd       	out	0x2d, r23	; 45
		TCNT1L_Reg = (uint8_t) value;
     8a4:	6c bd       	out	0x2c, r22	; 44
		break;
     8a6:	08 95       	ret
		case TIMER2:
		TCNT2_Reg = (uint8_t) value;
     8a8:	64 bd       	out	0x24, r22	; 36
     8aa:	08 95       	ret

000008ac <T0_TIMSK_init>:
		break;
	}
}

void T0_TIMSK_init(uint8_t interrupt_mode){
	if (interrupt_mode == OVF_MODE) SET_BIT(TIMSK_Reg, 0);
     8ac:	81 11       	cpse	r24, r1
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <T0_TIMSK_init+0xc>
     8b0:	89 b7       	in	r24, 0x39	; 57
     8b2:	81 60       	ori	r24, 0x01	; 1
     8b4:	89 bf       	out	0x39, r24	; 57
     8b6:	08 95       	ret
	else if (interrupt_mode == CMP_MODE) SET_BIT(TIMSK_Reg, 1);
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	21 f4       	brne	.+8      	; 0x8c4 <T0_TIMSK_init+0x18>
     8bc:	89 b7       	in	r24, 0x39	; 57
     8be:	82 60       	ori	r24, 0x02	; 2
     8c0:	89 bf       	out	0x39, r24	; 57
     8c2:	08 95       	ret
	else {
		CLR_BIT(TIMSK_Reg, 0);
     8c4:	89 b7       	in	r24, 0x39	; 57
     8c6:	8e 7f       	andi	r24, 0xFE	; 254
     8c8:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK_Reg, 1);
     8ca:	89 b7       	in	r24, 0x39	; 57
     8cc:	8d 7f       	andi	r24, 0xFD	; 253
     8ce:	89 bf       	out	0x39, r24	; 57
     8d0:	08 95       	ret

000008d2 <T1_TIMSK_init>:
	}
}

void T1_TIMSK_init(uint8_t interrupt_mode){
	if (interrupt_mode == OVF_MODE) {
     8d2:	81 11       	cpse	r24, r1
     8d4:	04 c0       	rjmp	.+8      	; 0x8de <T1_TIMSK_init+0xc>
		SET_BIT(TIMSK_Reg, 2);
     8d6:	89 b7       	in	r24, 0x39	; 57
     8d8:	84 60       	ori	r24, 0x04	; 4
     8da:	89 bf       	out	0x39, r24	; 57
     8dc:	08 95       	ret
	}else if (interrupt_mode == CMP_MODE) {
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	39 f4       	brne	.+14     	; 0x8f0 <T1_TIMSK_init+0x1e>
		SET_BIT(TIMSK_Reg, 3);
     8e2:	89 b7       	in	r24, 0x39	; 57
     8e4:	88 60       	ori	r24, 0x08	; 8
     8e6:	89 bf       	out	0x39, r24	; 57
		SET_BIT(TIMSK_Reg, 4);
     8e8:	89 b7       	in	r24, 0x39	; 57
     8ea:	80 61       	ori	r24, 0x10	; 16
     8ec:	89 bf       	out	0x39, r24	; 57
     8ee:	08 95       	ret
	}else {
		CLR_BIT(TIMSK_Reg, 2);
     8f0:	89 b7       	in	r24, 0x39	; 57
     8f2:	8b 7f       	andi	r24, 0xFB	; 251
     8f4:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK_Reg, 3);
     8f6:	89 b7       	in	r24, 0x39	; 57
     8f8:	87 7f       	andi	r24, 0xF7	; 247
     8fa:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK_Reg, 4);
     8fc:	89 b7       	in	r24, 0x39	; 57
     8fe:	8f 7e       	andi	r24, 0xEF	; 239
     900:	89 bf       	out	0x39, r24	; 57
     902:	08 95       	ret

00000904 <T2_TIMSK_init>:
	}
}

void T2_TIMSK_init(uint8_t interrupt_mode){
	if (interrupt_mode == OVF_MODE) {
     904:	81 11       	cpse	r24, r1
     906:	04 c0       	rjmp	.+8      	; 0x910 <T2_TIMSK_init+0xc>
		SET_BIT(TIMSK_Reg, 6);
     908:	89 b7       	in	r24, 0x39	; 57
     90a:	80 64       	ori	r24, 0x40	; 64
     90c:	89 bf       	out	0x39, r24	; 57
     90e:	08 95       	ret
	}else if (interrupt_mode == CMP_MODE) {
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	21 f4       	brne	.+8      	; 0x91c <T2_TIMSK_init+0x18>
		SET_BIT(TIMSK_Reg, 7);
     914:	89 b7       	in	r24, 0x39	; 57
     916:	80 68       	ori	r24, 0x80	; 128
     918:	89 bf       	out	0x39, r24	; 57
     91a:	08 95       	ret
	}else {
		CLR_BIT(TIMSK_Reg, 6);
     91c:	89 b7       	in	r24, 0x39	; 57
     91e:	8f 7b       	andi	r24, 0xBF	; 191
     920:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK_Reg, 7);
     922:	89 b7       	in	r24, 0x39	; 57
     924:	8f 77       	andi	r24, 0x7F	; 127
     926:	89 bf       	out	0x39, r24	; 57
     928:	08 95       	ret

0000092a <timer_init>:

//////////////////////////////////////////////////////////////////////////

//////////////////////////// public functions ////////////////////////////

EN_TIMER_ERROR timer_init(ST_TIMER_t * timer) {
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	ec 01       	movw	r28, r24

	if (timer->interrupt_mode == OVF_MODE) {
     930:	8b 81       	ldd	r24, Y+3	; 0x03
     932:	81 11       	cpse	r24, r1
     934:	05 c0       	rjmp	.+10     	; 0x940 <timer_init+0x16>
		sei();
     936:	78 94       	sei
		set_TIMER_OVF_INT_fun(timer);
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 0b 04 	call	0x816	; 0x816 <set_TIMER_OVF_INT_fun>
     93e:	09 c0       	rjmp	.+18     	; 0x952 <timer_init+0x28>
	}else if(timer->interrupt_mode == CMP_MODE) {
     940:	81 30       	cpi	r24, 0x01	; 1
     942:	29 f4       	brne	.+10     	; 0x94e <timer_init+0x24>
		sei();
     944:	78 94       	sei
		set_TIMER_CMP_INT_fun(timer);
     946:	ce 01       	movw	r24, r28
     948:	0e 94 28 04 	call	0x850	; 0x850 <set_TIMER_CMP_INT_fun>
     94c:	02 c0       	rjmp	.+4      	; 0x952 <timer_init+0x28>
	}else if (timer->interrupt_mode != NONE) return INVALID_INTERRUPT_MODE;
     94e:	82 30       	cpi	r24, 0x02	; 2
     950:	d1 f4       	brne	.+52     	; 0x986 <timer_init+0x5c>

	/* Activating normal mode */
	switch (timer->timerSelect) {
     952:	88 81       	ld	r24, Y
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	51 f0       	breq	.+20     	; 0x96c <timer_init+0x42>
     958:	18 f0       	brcs	.+6      	; 0x960 <timer_init+0x36>
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	71 f0       	breq	.+28     	; 0x97a <timer_init+0x50>
     95e:	15 c0       	rjmp	.+42     	; 0x98a <timer_init+0x60>
		case TIMER0: 
			TCCR0_Reg = 0x00;
     960:	13 be       	out	0x33, r1	; 51
			T0_TIMSK_init(timer->interrupt_mode);
     962:	8b 81       	ldd	r24, Y+3	; 0x03
     964:	0e 94 56 04 	call	0x8ac	; 0x8ac <T0_TIMSK_init>
			T2_TIMSK_init(timer->interrupt_mode);
			break;
		default: return INVALID_TIMER_SELECT;
	}

	return TIMER_OK;
     968:	80 e0       	ldi	r24, 0x00	; 0
	/* Activating normal mode */
	switch (timer->timerSelect) {
		case TIMER0: 
			TCCR0_Reg = 0x00;
			T0_TIMSK_init(timer->interrupt_mode);
			break;
     96a:	10 c0       	rjmp	.+32     	; 0x98c <timer_init+0x62>
		case TIMER1: 
			TCCR1A_Reg = 0x00;
     96c:	1f bc       	out	0x2f, r1	; 47
			TCCR1B_Reg = 0x00;
     96e:	1e bc       	out	0x2e, r1	; 46
			T1_TIMSK_init(timer->interrupt_mode);
     970:	8b 81       	ldd	r24, Y+3	; 0x03
     972:	0e 94 69 04 	call	0x8d2	; 0x8d2 <T1_TIMSK_init>
			T2_TIMSK_init(timer->interrupt_mode);
			break;
		default: return INVALID_TIMER_SELECT;
	}

	return TIMER_OK;
     976:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case TIMER1: 
			TCCR1A_Reg = 0x00;
			TCCR1B_Reg = 0x00;
			T1_TIMSK_init(timer->interrupt_mode);
			break;
     978:	09 c0       	rjmp	.+18     	; 0x98c <timer_init+0x62>
		case TIMER2: 
			TCCR2_Reg = 0x00;
     97a:	15 bc       	out	0x25, r1	; 37
			T2_TIMSK_init(timer->interrupt_mode);
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	0e 94 82 04 	call	0x904	; 0x904 <T2_TIMSK_init>
			break;
		default: return INVALID_TIMER_SELECT;
	}

	return TIMER_OK;
     982:	80 e0       	ldi	r24, 0x00	; 0
			T1_TIMSK_init(timer->interrupt_mode);
			break;
		case TIMER2: 
			TCCR2_Reg = 0x00;
			T2_TIMSK_init(timer->interrupt_mode);
			break;
     984:	03 c0       	rjmp	.+6      	; 0x98c <timer_init+0x62>
		sei();
		set_TIMER_OVF_INT_fun(timer);
	}else if(timer->interrupt_mode == CMP_MODE) {
		sei();
		set_TIMER_CMP_INT_fun(timer);
	}else if (timer->interrupt_mode != NONE) return INVALID_INTERRUPT_MODE;
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	01 c0       	rjmp	.+2      	; 0x98c <timer_init+0x62>
			break;
		case TIMER2: 
			TCCR2_Reg = 0x00;
			T2_TIMSK_init(timer->interrupt_mode);
			break;
		default: return INVALID_TIMER_SELECT;
     98a:	81 e0       	ldi	r24, 0x01	; 1
	}

	return TIMER_OK;
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <delay_start>:

EN_TIMER_ERROR delay_start(uint8_t timer, uint16_t delay_ms, uint16_t prescaler) {
     992:	3f 92       	push	r3
     994:	4f 92       	push	r4
     996:	5f 92       	push	r5
     998:	6f 92       	push	r6
     99a:	7f 92       	push	r7
     99c:	8f 92       	push	r8
     99e:	9f 92       	push	r9
     9a0:	af 92       	push	r10
     9a2:	bf 92       	push	r11
     9a4:	cf 92       	push	r12
     9a6:	df 92       	push	r13
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
	/* Make sure that the prescaler is in the valid range */
	switch (prescaler) {
     9b4:	40 34       	cpi	r20, 0x40	; 64
     9b6:	51 05       	cpc	r21, r1
     9b8:	91 f0       	breq	.+36     	; 0x9de <delay_start+0x4c>
     9ba:	40 f4       	brcc	.+16     	; 0x9cc <delay_start+0x3a>
     9bc:	41 30       	cpi	r20, 0x01	; 1
     9be:	51 05       	cpc	r21, r1
     9c0:	71 f0       	breq	.+28     	; 0x9de <delay_start+0x4c>
     9c2:	48 30       	cpi	r20, 0x08	; 8
     9c4:	51 05       	cpc	r21, r1
     9c6:	09 f0       	breq	.+2      	; 0x9ca <delay_start+0x38>
     9c8:	66 c1       	rjmp	.+716    	; 0xc96 <delay_start+0x304>
     9ca:	09 c0       	rjmp	.+18     	; 0x9de <delay_start+0x4c>
     9cc:	41 15       	cp	r20, r1
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	59 07       	cpc	r21, r25
     9d2:	29 f0       	breq	.+10     	; 0x9de <delay_start+0x4c>
     9d4:	41 15       	cp	r20, r1
     9d6:	94 e0       	ldi	r25, 0x04	; 4
     9d8:	59 07       	cpc	r21, r25
     9da:	09 f0       	breq	.+2      	; 0x9de <delay_start+0x4c>
     9dc:	5c c1       	rjmp	.+696    	; 0xc96 <delay_start+0x304>
     9de:	8a 01       	movw	r16, r20
     9e0:	eb 01       	movw	r28, r22
     9e2:	38 2e       	mov	r3, r24
		case PRESCALER_1024: break;
		default: return INVALID_PRESCALER; // wrong prescaler
	}

	 /* getting the number of overflows */
	double t_max_delay = 0.0, t_tick = (1000.0 * prescaler) / F_CPU; // t_tick [ in milli seconds ]
     9e4:	ba 01       	movw	r22, r20
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 4e 0a 	call	0x149c	; 0x149c <__floatunsisf>
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	4a e7       	ldi	r20, 0x7A	; 122
     9f4:	54 e4       	ldi	r21, 0x44	; 68
     9f6:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	34 e2       	ldi	r19, 0x24	; 36
     9fe:	44 e7       	ldi	r20, 0x74	; 116
     a00:	59 e4       	ldi	r21, 0x49	; 73
     a02:	0e 94 a6 09 	call	0x134c	; 0x134c <__divsf3>
     a06:	6b 01       	movw	r12, r22
     a08:	7c 01       	movw	r14, r24
	uint16_t n_overflows = 0, t_initial = 0;
	timer_flag = TRUE;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <timer_flag>

	/* Make sure that the timer is in the valid range */
	switch (timer) {
     a10:	38 16       	cp	r3, r24
     a12:	c1 f1       	breq	.+112    	; 0xa84 <delay_start+0xf2>
     a14:	38 16       	cp	r3, r24
     a16:	18 f0       	brcs	.+6      	; 0xa1e <delay_start+0x8c>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	38 12       	cpse	r3, r24
     a1c:	3e c1       	rjmp	.+636    	; 0xc9a <delay_start+0x308>
		case TIMER0:
		case TIMER2: 
			t_max_delay = 256.0 * t_tick; // 2^8 = 256
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e8       	ldi	r20, 0x80	; 128
     a24:	53 e4       	ldi	r21, 0x43	; 67
     a26:	c7 01       	movw	r24, r14
     a28:	b6 01       	movw	r22, r12
     a2a:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     a2e:	2b 01       	movw	r4, r22
     a30:	3c 01       	movw	r6, r24
			n_overflows = ceil(delay_ms / t_max_delay);
     a32:	be 01       	movw	r22, r28
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 4e 0a 	call	0x149c	; 0x149c <__floatunsisf>
     a3c:	4b 01       	movw	r8, r22
     a3e:	5c 01       	movw	r10, r24
     a40:	a3 01       	movw	r20, r6
     a42:	92 01       	movw	r18, r4
     a44:	0e 94 a6 09 	call	0x134c	; 0x134c <__divsf3>
     a48:	0e 94 8f 09 	call	0x131e	; 0x131e <ceil>
     a4c:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixunssfsi>
     a50:	eb 01       	movw	r28, r22
			t_initial = (int) (256.0 - delay_ms / (t_tick * n_overflows));// 2^8 = 256
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 4e 0a 	call	0x149c	; 0x149c <__floatunsisf>
     a5a:	a7 01       	movw	r20, r14
     a5c:	96 01       	movw	r18, r12
     a5e:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     a62:	9b 01       	movw	r18, r22
     a64:	ac 01       	movw	r20, r24
     a66:	c5 01       	movw	r24, r10
     a68:	b4 01       	movw	r22, r8
     a6a:	0e 94 a6 09 	call	0x134c	; 0x134c <__divsf3>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	80 e8       	ldi	r24, 0x80	; 128
     a78:	93 e4       	ldi	r25, 0x43	; 67
     a7a:	0e 94 22 09 	call	0x1244	; 0x1244 <__subsf3>
     a7e:	0e 94 18 0a 	call	0x1430	; 0x1430 <__fixsfsi>
			break;
     a82:	32 c0       	rjmp	.+100    	; 0xae8 <delay_start+0x156>
		case TIMER1:
			t_max_delay = 65536.0 * t_tick; // 2^16 = 65536
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 e8       	ldi	r20, 0x80	; 128
     a8a:	57 e4       	ldi	r21, 0x47	; 71
     a8c:	c7 01       	movw	r24, r14
     a8e:	b6 01       	movw	r22, r12
     a90:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     a94:	2b 01       	movw	r4, r22
     a96:	3c 01       	movw	r6, r24
			n_overflows = ceil(delay_ms / t_max_delay);
     a98:	be 01       	movw	r22, r28
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 4e 0a 	call	0x149c	; 0x149c <__floatunsisf>
     aa2:	4b 01       	movw	r8, r22
     aa4:	5c 01       	movw	r10, r24
     aa6:	a3 01       	movw	r20, r6
     aa8:	92 01       	movw	r18, r4
     aaa:	0e 94 a6 09 	call	0x134c	; 0x134c <__divsf3>
     aae:	0e 94 8f 09 	call	0x131e	; 0x131e <ceil>
     ab2:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixunssfsi>
     ab6:	eb 01       	movw	r28, r22
			t_initial = (int) (65536.0 - delay_ms / (t_tick * n_overflows)); // 2^16 = 65536
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 4e 0a 	call	0x149c	; 0x149c <__floatunsisf>
     ac0:	a7 01       	movw	r20, r14
     ac2:	96 01       	movw	r18, r12
     ac4:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     ac8:	9b 01       	movw	r18, r22
     aca:	ac 01       	movw	r20, r24
     acc:	c5 01       	movw	r24, r10
     ace:	b4 01       	movw	r22, r8
     ad0:	0e 94 a6 09 	call	0x134c	; 0x134c <__divsf3>
     ad4:	9b 01       	movw	r18, r22
     ad6:	ac 01       	movw	r20, r24
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	80 e8       	ldi	r24, 0x80	; 128
     ade:	97 e4       	ldi	r25, 0x47	; 71
     ae0:	0e 94 22 09 	call	0x1244	; 0x1244 <__subsf3>
     ae4:	0e 94 18 0a 	call	0x1430	; 0x1430 <__fixsfsi>
			break;
		default: return INVALID_TIMER_SELECT; /* ERROR invalid input (timer) */ 
	}
	
	/* setting the initial value */
	set_timer_init_value(timer, t_initial);
     ae8:	83 2d       	mov	r24, r3
     aea:	0e 94 49 04 	call	0x892	; 0x892 <set_timer_init_value>
	
	switch (timer) {
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	39 16       	cp	r3, r25
     af2:	09 f4       	brne	.+2      	; 0xaf6 <delay_start+0x164>
     af4:	4a c0       	rjmp	.+148    	; 0xb8a <delay_start+0x1f8>
     af6:	39 16       	cp	r3, r25
     af8:	28 f0       	brcs	.+10     	; 0xb04 <delay_start+0x172>
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	38 16       	cp	r3, r24
     afe:	09 f4       	brne	.+2      	; 0xb02 <delay_start+0x170>
     b00:	87 c0       	rjmp	.+270    	; 0xc10 <delay_start+0x27e>
     b02:	cd c0       	rjmp	.+410    	; 0xc9e <delay_start+0x30c>
		case TIMER0:
			switch (prescaler) {
     b04:	00 34       	cpi	r16, 0x40	; 64
     b06:	11 05       	cpc	r17, r1
     b08:	d1 f0       	breq	.+52     	; 0xb3e <delay_start+0x1ac>
     b0a:	38 f4       	brcc	.+14     	; 0xb1a <delay_start+0x188>
     b0c:	01 30       	cpi	r16, 0x01	; 1
     b0e:	11 05       	cpc	r17, r1
     b10:	61 f0       	breq	.+24     	; 0xb2a <delay_start+0x198>
     b12:	08 30       	cpi	r16, 0x08	; 8
     b14:	11 05       	cpc	r17, r1
     b16:	69 f0       	breq	.+26     	; 0xb32 <delay_start+0x1a0>
     b18:	0f c0       	rjmp	.+30     	; 0xb38 <delay_start+0x1a6>
     b1a:	01 15       	cp	r16, r1
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	19 07       	cpc	r17, r25
     b20:	a9 f0       	breq	.+42     	; 0xb4c <delay_start+0x1ba>
     b22:	01 15       	cp	r16, r1
     b24:	14 40       	sbci	r17, 0x04	; 4
     b26:	b1 f0       	breq	.+44     	; 0xb54 <delay_start+0x1c2>
     b28:	07 c0       	rjmp	.+14     	; 0xb38 <delay_start+0x1a6>
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
     b2a:	83 b7       	in	r24, 0x33	; 51
     b2c:	81 60       	ori	r24, 0x01	; 1
     b2e:	83 bf       	out	0x33, r24	; 51
     b30:	03 c0       	rjmp	.+6      	; 0xb38 <delay_start+0x1a6>
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
     b32:	83 b7       	in	r24, 0x33	; 51
     b34:	82 60       	ori	r24, 0x02	; 2
     b36:	83 bf       	out	0x33, r24	; 51
	}

	return TIMER_OK;
}

EN_TIMER_ERROR delay_start(uint8_t timer, uint16_t delay_ms, uint16_t prescaler) {
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	21 c0       	rjmp	.+66     	; 0xb80 <delay_start+0x1ee>
	switch (timer) {
		case TIMER0:
			switch (prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 1); break;
     b3e:	83 b7       	in	r24, 0x33	; 51
     b40:	81 60       	ori	r24, 0x01	; 1
     b42:	83 bf       	out	0x33, r24	; 51
     b44:	83 b7       	in	r24, 0x33	; 51
     b46:	82 60       	ori	r24, 0x02	; 2
     b48:	83 bf       	out	0x33, r24	; 51
     b4a:	f6 cf       	rjmp	.-20     	; 0xb38 <delay_start+0x1a6>
				case PRESCALER_256: SET_BIT(TCCR0_Reg, 2); break;
     b4c:	83 b7       	in	r24, 0x33	; 51
     b4e:	84 60       	ori	r24, 0x04	; 4
     b50:	83 bf       	out	0x33, r24	; 51
     b52:	f2 cf       	rjmp	.-28     	; 0xb38 <delay_start+0x1a6>
				case PRESCALER_1024: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 2); break;
     b54:	83 b7       	in	r24, 0x33	; 51
     b56:	81 60       	ori	r24, 0x01	; 1
     b58:	83 bf       	out	0x33, r24	; 51
     b5a:	83 b7       	in	r24, 0x33	; 51
     b5c:	84 60       	ori	r24, 0x04	; 4
     b5e:	83 bf       	out	0x33, r24	; 51
     b60:	eb cf       	rjmp	.-42     	; 0xb38 <delay_start+0x1a6>
			}
			for (uint16_t i = 0; (i < n_overflows); i++) {
				while((READ_BIT(TIFR_Reg, 0) == 0) && timer_flag); 
     b62:	08 b6       	in	r0, 0x38	; 56
     b64:	00 fc       	sbrc	r0, 0
     b66:	04 c0       	rjmp	.+8      	; 0xb70 <delay_start+0x1de>
     b68:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timer_flag>
     b6c:	81 11       	cpse	r24, r1
     b6e:	f9 cf       	rjmp	.-14     	; 0xb62 <delay_start+0x1d0>
				SET_BIT(TIFR_Reg, 0);
     b70:	88 b7       	in	r24, 0x38	; 56
     b72:	81 60       	ori	r24, 0x01	; 1
     b74:	88 bf       	out	0x38, r24	; 56
				timer_flag = TRUE;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <timer_flag>
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR0_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 2); break;
			}
			for (uint16_t i = 0; (i < n_overflows); i++) {
     b7c:	2f 5f       	subi	r18, 0xFF	; 255
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	2c 17       	cp	r18, r28
     b82:	3d 07       	cpc	r19, r29
     b84:	70 f3       	brcs	.-36     	; 0xb62 <delay_start+0x1d0>
				timer_flag = TRUE;
			}
			break;
		default: return INVALID_TIMER_SELECT; /* ERROR invalid input (timer) */
	}
	return TIMER_OK;
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	8b c0       	rjmp	.+278    	; 0xca0 <delay_start+0x30e>
				SET_BIT(TIFR_Reg, 0);
				timer_flag = TRUE;
			}
			break;
		case TIMER1:
			switch (prescaler) {
     b8a:	00 34       	cpi	r16, 0x40	; 64
     b8c:	11 05       	cpc	r17, r1
     b8e:	d1 f0       	breq	.+52     	; 0xbc4 <delay_start+0x232>
     b90:	38 f4       	brcc	.+14     	; 0xba0 <delay_start+0x20e>
     b92:	01 30       	cpi	r16, 0x01	; 1
     b94:	11 05       	cpc	r17, r1
     b96:	61 f0       	breq	.+24     	; 0xbb0 <delay_start+0x21e>
     b98:	08 30       	cpi	r16, 0x08	; 8
     b9a:	11 05       	cpc	r17, r1
     b9c:	69 f0       	breq	.+26     	; 0xbb8 <delay_start+0x226>
     b9e:	0f c0       	rjmp	.+30     	; 0xbbe <delay_start+0x22c>
     ba0:	01 15       	cp	r16, r1
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	19 07       	cpc	r17, r25
     ba6:	a9 f0       	breq	.+42     	; 0xbd2 <delay_start+0x240>
     ba8:	01 15       	cp	r16, r1
     baa:	14 40       	sbci	r17, 0x04	; 4
     bac:	b1 f0       	breq	.+44     	; 0xbda <delay_start+0x248>
     bae:	07 c0       	rjmp	.+14     	; 0xbbe <delay_start+0x22c>
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
     bb0:	8e b5       	in	r24, 0x2e	; 46
     bb2:	81 60       	ori	r24, 0x01	; 1
     bb4:	8e bd       	out	0x2e, r24	; 46
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <delay_start+0x22c>
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
     bb8:	8e b5       	in	r24, 0x2e	; 46
     bba:	82 60       	ori	r24, 0x02	; 2
     bbc:	8e bd       	out	0x2e, r24	; 46
	}

	return TIMER_OK;
}

EN_TIMER_ERROR delay_start(uint8_t timer, uint16_t delay_ms, uint16_t prescaler) {
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	21 c0       	rjmp	.+66     	; 0xc06 <delay_start+0x274>
			break;
		case TIMER1:
			switch (prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 1); break;
     bc4:	8e b5       	in	r24, 0x2e	; 46
     bc6:	81 60       	ori	r24, 0x01	; 1
     bc8:	8e bd       	out	0x2e, r24	; 46
     bca:	8e b5       	in	r24, 0x2e	; 46
     bcc:	82 60       	ori	r24, 0x02	; 2
     bce:	8e bd       	out	0x2e, r24	; 46
     bd0:	f6 cf       	rjmp	.-20     	; 0xbbe <delay_start+0x22c>
				case PRESCALER_256: SET_BIT(TCCR1B_Reg, 2); break;
     bd2:	8e b5       	in	r24, 0x2e	; 46
     bd4:	84 60       	ori	r24, 0x04	; 4
     bd6:	8e bd       	out	0x2e, r24	; 46
     bd8:	f2 cf       	rjmp	.-28     	; 0xbbe <delay_start+0x22c>
				case PRESCALER_1024: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 2); break;
     bda:	8e b5       	in	r24, 0x2e	; 46
     bdc:	81 60       	ori	r24, 0x01	; 1
     bde:	8e bd       	out	0x2e, r24	; 46
     be0:	8e b5       	in	r24, 0x2e	; 46
     be2:	84 60       	ori	r24, 0x04	; 4
     be4:	8e bd       	out	0x2e, r24	; 46
     be6:	eb cf       	rjmp	.-42     	; 0xbbe <delay_start+0x22c>
			}
			for (uint16_t i = 0; (i < n_overflows); i++) {
				while((READ_BIT(TIFR_Reg, 2) == 0) && timer_flag); 
     be8:	08 b6       	in	r0, 0x38	; 56
     bea:	02 fc       	sbrc	r0, 2
     bec:	04 c0       	rjmp	.+8      	; 0xbf6 <delay_start+0x264>
     bee:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timer_flag>
     bf2:	81 11       	cpse	r24, r1
     bf4:	f9 cf       	rjmp	.-14     	; 0xbe8 <delay_start+0x256>
				SET_BIT(TIFR_Reg, 2);
     bf6:	88 b7       	in	r24, 0x38	; 56
     bf8:	84 60       	ori	r24, 0x04	; 4
     bfa:	88 bf       	out	0x38, r24	; 56
				timer_flag = TRUE;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <timer_flag>
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR1B_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 2); break;
			}
			for (uint16_t i = 0; (i < n_overflows); i++) {
     c02:	2f 5f       	subi	r18, 0xFF	; 255
     c04:	3f 4f       	sbci	r19, 0xFF	; 255
     c06:	2c 17       	cp	r18, r28
     c08:	3d 07       	cpc	r19, r29
     c0a:	70 f3       	brcs	.-36     	; 0xbe8 <delay_start+0x256>
				timer_flag = TRUE;
			}
			break;
		default: return INVALID_TIMER_SELECT; /* ERROR invalid input (timer) */
	}
	return TIMER_OK;
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	48 c0       	rjmp	.+144    	; 0xca0 <delay_start+0x30e>
				SET_BIT(TIFR_Reg, 2);
				timer_flag = TRUE;
			}
			break;
		case TIMER2:
			switch (prescaler) {
     c10:	00 34       	cpi	r16, 0x40	; 64
     c12:	11 05       	cpc	r17, r1
     c14:	d1 f0       	breq	.+52     	; 0xc4a <delay_start+0x2b8>
     c16:	38 f4       	brcc	.+14     	; 0xc26 <delay_start+0x294>
     c18:	01 30       	cpi	r16, 0x01	; 1
     c1a:	11 05       	cpc	r17, r1
     c1c:	61 f0       	breq	.+24     	; 0xc36 <delay_start+0x2a4>
     c1e:	08 30       	cpi	r16, 0x08	; 8
     c20:	11 05       	cpc	r17, r1
     c22:	69 f0       	breq	.+26     	; 0xc3e <delay_start+0x2ac>
     c24:	0f c0       	rjmp	.+30     	; 0xc44 <delay_start+0x2b2>
     c26:	01 15       	cp	r16, r1
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	19 07       	cpc	r17, r25
     c2c:	a9 f0       	breq	.+42     	; 0xc58 <delay_start+0x2c6>
     c2e:	01 15       	cp	r16, r1
     c30:	14 40       	sbci	r17, 0x04	; 4
     c32:	b1 f0       	breq	.+44     	; 0xc60 <delay_start+0x2ce>
     c34:	07 c0       	rjmp	.+14     	; 0xc44 <delay_start+0x2b2>
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
     c36:	85 b5       	in	r24, 0x25	; 37
     c38:	81 60       	ori	r24, 0x01	; 1
     c3a:	85 bd       	out	0x25, r24	; 37
     c3c:	03 c0       	rjmp	.+6      	; 0xc44 <delay_start+0x2b2>
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
     c3e:	85 b5       	in	r24, 0x25	; 37
     c40:	82 60       	ori	r24, 0x02	; 2
     c42:	85 bd       	out	0x25, r24	; 37
	}

	return TIMER_OK;
}

EN_TIMER_ERROR delay_start(uint8_t timer, uint16_t delay_ms, uint16_t prescaler) {
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	21 c0       	rjmp	.+66     	; 0xc8c <delay_start+0x2fa>
			break;
		case TIMER2:
			switch (prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 1); break;
     c4a:	85 b5       	in	r24, 0x25	; 37
     c4c:	81 60       	ori	r24, 0x01	; 1
     c4e:	85 bd       	out	0x25, r24	; 37
     c50:	85 b5       	in	r24, 0x25	; 37
     c52:	82 60       	ori	r24, 0x02	; 2
     c54:	85 bd       	out	0x25, r24	; 37
     c56:	f6 cf       	rjmp	.-20     	; 0xc44 <delay_start+0x2b2>
				case PRESCALER_256: SET_BIT(TCCR2_Reg, 2); break;
     c58:	85 b5       	in	r24, 0x25	; 37
     c5a:	84 60       	ori	r24, 0x04	; 4
     c5c:	85 bd       	out	0x25, r24	; 37
     c5e:	f2 cf       	rjmp	.-28     	; 0xc44 <delay_start+0x2b2>
				case PRESCALER_1024: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 2); break;
     c60:	85 b5       	in	r24, 0x25	; 37
     c62:	81 60       	ori	r24, 0x01	; 1
     c64:	85 bd       	out	0x25, r24	; 37
     c66:	85 b5       	in	r24, 0x25	; 37
     c68:	84 60       	ori	r24, 0x04	; 4
     c6a:	85 bd       	out	0x25, r24	; 37
     c6c:	eb cf       	rjmp	.-42     	; 0xc44 <delay_start+0x2b2>
			}
			for (uint16_t i = 0; (i < n_overflows); i++) {
				while((READ_BIT(TIFR_Reg, 6) == 0) && timer_flag); 
     c6e:	08 b6       	in	r0, 0x38	; 56
     c70:	06 fc       	sbrc	r0, 6
     c72:	04 c0       	rjmp	.+8      	; 0xc7c <delay_start+0x2ea>
     c74:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timer_flag>
     c78:	81 11       	cpse	r24, r1
     c7a:	f9 cf       	rjmp	.-14     	; 0xc6e <delay_start+0x2dc>
				SET_BIT(TIFR_Reg, 6);
     c7c:	88 b7       	in	r24, 0x38	; 56
     c7e:	80 64       	ori	r24, 0x40	; 64
     c80:	88 bf       	out	0x38, r24	; 56
				timer_flag = TRUE;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <timer_flag>
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR2_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 2); break;
			}
			for (uint16_t i = 0; (i < n_overflows); i++) {
     c88:	2f 5f       	subi	r18, 0xFF	; 255
     c8a:	3f 4f       	sbci	r19, 0xFF	; 255
     c8c:	2c 17       	cp	r18, r28
     c8e:	3d 07       	cpc	r19, r29
     c90:	70 f3       	brcs	.-36     	; 0xc6e <delay_start+0x2dc>
				timer_flag = TRUE;
			}
			break;
		default: return INVALID_TIMER_SELECT; /* ERROR invalid input (timer) */
	}
	return TIMER_OK;
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	05 c0       	rjmp	.+10     	; 0xca0 <delay_start+0x30e>
		case NO_PRESCALER: break;
		case PRESCALER_8: break;
		case PRESCALER_64: break;
		case PRESCALER_256: break;
		case PRESCALER_1024: break;
		default: return INVALID_PRESCALER; // wrong prescaler
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	03 c0       	rjmp	.+6      	; 0xca0 <delay_start+0x30e>
		case TIMER1:
			t_max_delay = 65536.0 * t_tick; // 2^16 = 65536
			n_overflows = ceil(delay_ms / t_max_delay);
			t_initial = (int) (65536.0 - delay_ms / (t_tick * n_overflows)); // 2^16 = 65536
			break;
		default: return INVALID_TIMER_SELECT; /* ERROR invalid input (timer) */ 
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	01 c0       	rjmp	.+2      	; 0xca0 <delay_start+0x30e>
				while((READ_BIT(TIFR_Reg, 6) == 0) && timer_flag); 
				SET_BIT(TIFR_Reg, 6);
				timer_flag = TRUE;
			}
			break;
		default: return INVALID_TIMER_SELECT; /* ERROR invalid input (timer) */
     c9e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return TIMER_OK;
}
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	df 90       	pop	r13
     cae:	cf 90       	pop	r12
     cb0:	bf 90       	pop	r11
     cb2:	af 90       	pop	r10
     cb4:	9f 90       	pop	r9
     cb6:	8f 90       	pop	r8
     cb8:	7f 90       	pop	r7
     cba:	6f 90       	pop	r6
     cbc:	5f 90       	pop	r5
     cbe:	4f 90       	pop	r4
     cc0:	3f 90       	pop	r3
     cc2:	08 95       	ret

00000cc4 <delay_stop>:

EN_TIMER_ERROR delay_stop(uint8_t timer) {

		/* Reseting to normal mode */
		switch (timer) {
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	41 f0       	breq	.+16     	; 0xcd8 <delay_stop+0x14>
     cc8:	18 f0       	brcs	.+6      	; 0xcd0 <delay_stop+0xc>
     cca:	82 30       	cpi	r24, 0x02	; 2
     ccc:	59 f0       	breq	.+22     	; 0xce4 <delay_stop+0x20>
     cce:	0e c0       	rjmp	.+28     	; 0xcec <delay_stop+0x28>
			case TIMER0: 
				TCCR0_Reg = 0x00; 
     cd0:	13 be       	out	0x33, r1	; 51
				TCNT0_Reg = 0x00;
     cd2:	12 be       	out	0x32, r1	; 50
				TCCR2_Reg = 0x00; 
				TCNT2_Reg = 0x00;
				break;
			default: return INVALID_TIMER_SELECT;
		}
		return TIMER_OK;
     cd4:	80 e0       	ldi	r24, 0x00	; 0
		/* Reseting to normal mode */
		switch (timer) {
			case TIMER0: 
				TCCR0_Reg = 0x00; 
				TCNT0_Reg = 0x00;
				break;
     cd6:	08 95       	ret
			case TIMER1: 
				TCCR1A_Reg = 0x00; 
     cd8:	1f bc       	out	0x2f, r1	; 47
				TCCR1B_Reg = 0x00; 
     cda:	1e bc       	out	0x2e, r1	; 46
				TCNT1H_Reg = 0x00;
     cdc:	1d bc       	out	0x2d, r1	; 45
				TCNT1L_Reg = 0x00;
     cde:	1c bc       	out	0x2c, r1	; 44
				TCCR2_Reg = 0x00; 
				TCNT2_Reg = 0x00;
				break;
			default: return INVALID_TIMER_SELECT;
		}
		return TIMER_OK;
     ce0:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER1: 
				TCCR1A_Reg = 0x00; 
				TCCR1B_Reg = 0x00; 
				TCNT1H_Reg = 0x00;
				TCNT1L_Reg = 0x00;
				break;
     ce2:	08 95       	ret
			case TIMER2: 
				TCCR2_Reg = 0x00; 
     ce4:	15 bc       	out	0x25, r1	; 37
				TCNT2_Reg = 0x00;
     ce6:	14 bc       	out	0x24, r1	; 36
				break;
			default: return INVALID_TIMER_SELECT;
		}
		return TIMER_OK;
     ce8:	80 e0       	ldi	r24, 0x00	; 0
				TCNT1L_Reg = 0x00;
				break;
			case TIMER2: 
				TCCR2_Reg = 0x00; 
				TCNT2_Reg = 0x00;
				break;
     cea:	08 95       	ret
			default: return INVALID_TIMER_SELECT;
     cec:	81 e0       	ldi	r24, 0x01	; 1
		}
		return TIMER_OK;
}
     cee:	08 95       	ret

00000cf0 <get_timer_value>:
uint16_t get_timer_value(uint8_t timer) {
	
	uint16_t result = 0, M = 0, L = 0;
	
	/* Make sure that the timer is in the valid range */
	if (timer <= TIMER2) {
     cf0:	83 30       	cpi	r24, 0x03	; 3
     cf2:	98 f4       	brcc	.+38     	; 0xd1a <get_timer_value+0x2a>
		switch (timer) {
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	39 f0       	breq	.+14     	; 0xd06 <get_timer_value+0x16>
     cf8:	18 f0       	brcs	.+6      	; 0xd00 <get_timer_value+0x10>
     cfa:	82 30       	cpi	r24, 0x02	; 2
     cfc:	59 f0       	breq	.+22     	; 0xd14 <get_timer_value+0x24>
     cfe:	10 c0       	rjmp	.+32     	; 0xd20 <get_timer_value+0x30>
			/* getting the value */
			case TIMER0: result = (uint16_t) TCNT0_Reg & 0x00FF; break;
     d00:	82 b7       	in	r24, 0x32	; 50
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	08 95       	ret
			case TIMER1: 
				M = TCNT1H_Reg & 0x00FF;
     d06:	8d b5       	in	r24, 0x2d	; 45
     d08:	90 e0       	ldi	r25, 0x00	; 0
				L = TCNT1L_Reg & 0x00FF;
     d0a:	2c b5       	in	r18, 0x2c	; 44
				result = (M << 8) | L;
     d0c:	98 2f       	mov	r25, r24
     d0e:	88 27       	eor	r24, r24
     d10:	82 2b       	or	r24, r18
				break;
     d12:	08 95       	ret
			case TIMER2: result = (uint16_t) TCNT2_Reg & 0x00FF; break;
     d14:	84 b5       	in	r24, 0x24	; 36
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	08 95       	ret
		return TIMER_OK;
}

uint16_t get_timer_value(uint8_t timer) {
	
	uint16_t result = 0, M = 0, L = 0;
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	08 95       	ret
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
				break;
			case TIMER2: result = (uint16_t) TCNT2_Reg & 0x00FF; break;
		}
	} else { /* ERROR invalid input (timer) */ }
	return result;
}
     d24:	08 95       	ret

00000d26 <stopwatch_start>:

EN_TIMER_ERROR stopwatch_start(ST_TIMER_t * timer){
     d26:	fc 01       	movw	r30, r24
	switch (timer->timerSelect) {
     d28:	90 81       	ld	r25, Z
     d2a:	91 30       	cpi	r25, 0x01	; 1
     d2c:	c1 f1       	breq	.+112    	; 0xd9e <stopwatch_start+0x78>
     d2e:	20 f0       	brcs	.+8      	; 0xd38 <stopwatch_start+0x12>
     d30:	92 30       	cpi	r25, 0x02	; 2
     d32:	09 f4       	brne	.+2      	; 0xd36 <stopwatch_start+0x10>
     d34:	67 c0       	rjmp	.+206    	; 0xe04 <stopwatch_start+0xde>
     d36:	99 c0       	rjmp	.+306    	; 0xe6a <stopwatch_start+0x144>
		case TIMER0:
			switch (timer->prescaler) {
     d38:	81 81       	ldd	r24, Z+1	; 0x01
     d3a:	92 81       	ldd	r25, Z+2	; 0x02
     d3c:	80 34       	cpi	r24, 0x40	; 64
     d3e:	91 05       	cpc	r25, r1
     d40:	c9 f0       	breq	.+50     	; 0xd74 <stopwatch_start+0x4e>
     d42:	30 f4       	brcc	.+12     	; 0xd50 <stopwatch_start+0x2a>
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	91 05       	cpc	r25, r1
     d48:	59 f0       	breq	.+22     	; 0xd60 <stopwatch_start+0x3a>
     d4a:	08 97       	sbiw	r24, 0x08	; 8
     d4c:	71 f0       	breq	.+28     	; 0xd6a <stopwatch_start+0x44>
     d4e:	8f c0       	rjmp	.+286    	; 0xe6e <stopwatch_start+0x148>
     d50:	81 15       	cp	r24, r1
     d52:	21 e0       	ldi	r18, 0x01	; 1
     d54:	92 07       	cpc	r25, r18
     d56:	b1 f0       	breq	.+44     	; 0xd84 <stopwatch_start+0x5e>
     d58:	81 15       	cp	r24, r1
     d5a:	94 40       	sbci	r25, 0x04	; 4
     d5c:	c1 f0       	breq	.+48     	; 0xd8e <stopwatch_start+0x68>
     d5e:	87 c0       	rjmp	.+270    	; 0xe6e <stopwatch_start+0x148>
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
     d60:	83 b7       	in	r24, 0x33	; 51
     d62:	81 60       	ori	r24, 0x01	; 1
     d64:	83 bf       	out	0x33, r24	; 51
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     d66:	80 e0       	ldi	r24, 0x00	; 0

EN_TIMER_ERROR stopwatch_start(ST_TIMER_t * timer){
	switch (timer->timerSelect) {
		case TIMER0:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
     d68:	08 95       	ret
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
     d6a:	83 b7       	in	r24, 0x33	; 51
     d6c:	82 60       	ori	r24, 0x02	; 2
     d6e:	83 bf       	out	0x33, r24	; 51
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     d70:	80 e0       	ldi	r24, 0x00	; 0
EN_TIMER_ERROR stopwatch_start(ST_TIMER_t * timer){
	switch (timer->timerSelect) {
		case TIMER0:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
     d72:	08 95       	ret
				case PRESCALER_64: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 1); break;
     d74:	83 b7       	in	r24, 0x33	; 51
     d76:	81 60       	ori	r24, 0x01	; 1
     d78:	83 bf       	out	0x33, r24	; 51
     d7a:	83 b7       	in	r24, 0x33	; 51
     d7c:	82 60       	ori	r24, 0x02	; 2
     d7e:	83 bf       	out	0x33, r24	; 51
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     d80:	80 e0       	ldi	r24, 0x00	; 0
	switch (timer->timerSelect) {
		case TIMER0:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 1); break;
     d82:	08 95       	ret
				case PRESCALER_256: SET_BIT(TCCR0_Reg, 2); break;
     d84:	83 b7       	in	r24, 0x33	; 51
     d86:	84 60       	ori	r24, 0x04	; 4
     d88:	83 bf       	out	0x33, r24	; 51
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     d8a:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER0:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR0_Reg, 2); break;
     d8c:	08 95       	ret
				case PRESCALER_1024: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 2); break;
     d8e:	83 b7       	in	r24, 0x33	; 51
     d90:	81 60       	ori	r24, 0x01	; 1
     d92:	83 bf       	out	0x33, r24	; 51
     d94:	83 b7       	in	r24, 0x33	; 51
     d96:	84 60       	ori	r24, 0x04	; 4
     d98:	83 bf       	out	0x33, r24	; 51
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     d9a:	80 e0       	ldi	r24, 0x00	; 0
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR0_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 2); break;
     d9c:	08 95       	ret
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		case TIMER1:
			switch (timer->prescaler) {
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	92 81       	ldd	r25, Z+2	; 0x02
     da2:	80 34       	cpi	r24, 0x40	; 64
     da4:	91 05       	cpc	r25, r1
     da6:	c9 f0       	breq	.+50     	; 0xdda <stopwatch_start+0xb4>
     da8:	30 f4       	brcc	.+12     	; 0xdb6 <stopwatch_start+0x90>
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	91 05       	cpc	r25, r1
     dae:	59 f0       	breq	.+22     	; 0xdc6 <stopwatch_start+0xa0>
     db0:	08 97       	sbiw	r24, 0x08	; 8
     db2:	71 f0       	breq	.+28     	; 0xdd0 <stopwatch_start+0xaa>
     db4:	5e c0       	rjmp	.+188    	; 0xe72 <stopwatch_start+0x14c>
     db6:	81 15       	cp	r24, r1
     db8:	21 e0       	ldi	r18, 0x01	; 1
     dba:	92 07       	cpc	r25, r18
     dbc:	b1 f0       	breq	.+44     	; 0xdea <stopwatch_start+0xc4>
     dbe:	81 15       	cp	r24, r1
     dc0:	94 40       	sbci	r25, 0x04	; 4
     dc2:	c1 f0       	breq	.+48     	; 0xdf4 <stopwatch_start+0xce>
     dc4:	56 c0       	rjmp	.+172    	; 0xe72 <stopwatch_start+0x14c>
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
     dc6:	8e b5       	in	r24, 0x2e	; 46
     dc8:	81 60       	ori	r24, 0x01	; 1
     dca:	8e bd       	out	0x2e, r24	; 46
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     dcc:	80 e0       	ldi	r24, 0x00	; 0
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		case TIMER1:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
     dce:	08 95       	ret
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
     dd0:	8e b5       	in	r24, 0x2e	; 46
     dd2:	82 60       	ori	r24, 0x02	; 2
     dd4:	8e bd       	out	0x2e, r24	; 46
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     dd6:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
		case TIMER1:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
     dd8:	08 95       	ret
				case PRESCALER_64: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 1); break;
     dda:	8e b5       	in	r24, 0x2e	; 46
     ddc:	81 60       	ori	r24, 0x01	; 1
     dde:	8e bd       	out	0x2e, r24	; 46
     de0:	8e b5       	in	r24, 0x2e	; 46
     de2:	82 60       	ori	r24, 0x02	; 2
     de4:	8e bd       	out	0x2e, r24	; 46
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     de6:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case TIMER1:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 1); break;
     de8:	08 95       	ret
				case PRESCALER_256: SET_BIT(TCCR1B_Reg, 2); break;
     dea:	8e b5       	in	r24, 0x2e	; 46
     dec:	84 60       	ori	r24, 0x04	; 4
     dee:	8e bd       	out	0x2e, r24	; 46
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     df0:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER1:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR1B_Reg, 2); break;
     df2:	08 95       	ret
				case PRESCALER_1024: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 2); break;
     df4:	8e b5       	in	r24, 0x2e	; 46
     df6:	81 60       	ori	r24, 0x01	; 1
     df8:	8e bd       	out	0x2e, r24	; 46
     dfa:	8e b5       	in	r24, 0x2e	; 46
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8e bd       	out	0x2e, r24	; 46
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     e00:	80 e0       	ldi	r24, 0x00	; 0
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR1B_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 2); break;
     e02:	08 95       	ret
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		case TIMER2:
			switch (timer->prescaler) {
     e04:	81 81       	ldd	r24, Z+1	; 0x01
     e06:	92 81       	ldd	r25, Z+2	; 0x02
     e08:	80 34       	cpi	r24, 0x40	; 64
     e0a:	91 05       	cpc	r25, r1
     e0c:	c9 f0       	breq	.+50     	; 0xe40 <stopwatch_start+0x11a>
     e0e:	30 f4       	brcc	.+12     	; 0xe1c <stopwatch_start+0xf6>
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	91 05       	cpc	r25, r1
     e14:	59 f0       	breq	.+22     	; 0xe2c <stopwatch_start+0x106>
     e16:	08 97       	sbiw	r24, 0x08	; 8
     e18:	71 f0       	breq	.+28     	; 0xe36 <stopwatch_start+0x110>
     e1a:	2d c0       	rjmp	.+90     	; 0xe76 <stopwatch_start+0x150>
     e1c:	81 15       	cp	r24, r1
     e1e:	21 e0       	ldi	r18, 0x01	; 1
     e20:	92 07       	cpc	r25, r18
     e22:	b1 f0       	breq	.+44     	; 0xe50 <stopwatch_start+0x12a>
     e24:	81 15       	cp	r24, r1
     e26:	94 40       	sbci	r25, 0x04	; 4
     e28:	c1 f0       	breq	.+48     	; 0xe5a <stopwatch_start+0x134>
     e2a:	25 c0       	rjmp	.+74     	; 0xe76 <stopwatch_start+0x150>
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
     e2c:	85 b5       	in	r24, 0x25	; 37
     e2e:	81 60       	ori	r24, 0x01	; 1
     e30:	85 bd       	out	0x25, r24	; 37
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     e32:	80 e0       	ldi	r24, 0x00	; 0
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		case TIMER2:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
     e34:	08 95       	ret
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
     e36:	85 b5       	in	r24, 0x25	; 37
     e38:	82 60       	ori	r24, 0x02	; 2
     e3a:	85 bd       	out	0x25, r24	; 37
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     e3c:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
		case TIMER2:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
     e3e:	08 95       	ret
				case PRESCALER_64: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 1); break;
     e40:	85 b5       	in	r24, 0x25	; 37
     e42:	81 60       	ori	r24, 0x01	; 1
     e44:	85 bd       	out	0x25, r24	; 37
     e46:	85 b5       	in	r24, 0x25	; 37
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	85 bd       	out	0x25, r24	; 37
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     e4c:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case TIMER2:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 1); break;
     e4e:	08 95       	ret
				case PRESCALER_256: SET_BIT(TCCR2_Reg, 2); break;
     e50:	85 b5       	in	r24, 0x25	; 37
     e52:	84 60       	ori	r24, 0x04	; 4
     e54:	85 bd       	out	0x25, r24	; 37
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     e56:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER2:
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR2_Reg, 2); break;
     e58:	08 95       	ret
				case PRESCALER_1024: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 2); break;
     e5a:	85 b5       	in	r24, 0x25	; 37
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	85 bd       	out	0x25, r24	; 37
     e60:	85 b5       	in	r24, 0x25	; 37
     e62:	84 60       	ori	r24, 0x04	; 4
     e64:	85 bd       	out	0x25, r24	; 37
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
     e66:	80 e0       	ldi	r24, 0x00	; 0
			switch (timer->prescaler) {
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR2_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 2); break;
     e68:	08 95       	ret
				default: return INVALID_PRESCALER; // wrong prescaler
			}
			break;
		default: return INVALID_TIMER_SELECT;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	08 95       	ret
				case NO_PRESCALER: SET_BIT(TCCR0_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR0_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR0_Reg, 0); SET_BIT(TCCR0_Reg, 2); break;
				default: return INVALID_PRESCALER; // wrong prescaler
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	08 95       	ret
				case NO_PRESCALER: SET_BIT(TCCR1B_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR1B_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR1B_Reg, 0); SET_BIT(TCCR1B_Reg, 2); break;
				default: return INVALID_PRESCALER; // wrong prescaler
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	08 95       	ret
				case NO_PRESCALER: SET_BIT(TCCR2_Reg, 0); break;
				case PRESCALER_8: SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_64: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 1); break;
				case PRESCALER_256: SET_BIT(TCCR2_Reg, 2); break;
				case PRESCALER_1024: SET_BIT(TCCR2_Reg, 0); SET_BIT(TCCR2_Reg, 2); break;
				default: return INVALID_PRESCALER; // wrong prescaler
     e76:	82 e0       	ldi	r24, 0x02	; 2
			}
			break;
		default: return INVALID_TIMER_SELECT;
	}
	return TIMER_OK;
}
     e78:	08 95       	ret

00000e7a <stopwatch_stop>:

EN_TIMER_ERROR stopwatch_stop(ST_TIMER_t * timer, uint16_t * valueRead){
     e7a:	4f 92       	push	r4
     e7c:	5f 92       	push	r5
     e7e:	6f 92       	push	r6
     e80:	7f 92       	push	r7
     e82:	8f 92       	push	r8
     e84:	9f 92       	push	r9
     e86:	af 92       	push	r10
     e88:	bf 92       	push	r11
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	ec 01       	movw	r28, r24
     e98:	7b 01       	movw	r14, r22

	uint16_t timer_value = get_timer_value(timer->timerSelect);
     e9a:	88 81       	ld	r24, Y
     e9c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <get_timer_value>
     ea0:	8c 01       	movw	r16, r24
	double t_max_delay = 0.0, t_tick = (1000.0 * (timer->prescaler)) / F_CPU; // t_tick [ in milli seconds ]
     ea2:	69 81       	ldd	r22, Y+1	; 0x01
     ea4:	7a 81       	ldd	r23, Y+2	; 0x02
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 4e 0a 	call	0x149c	; 0x149c <__floatunsisf>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	4a e7       	ldi	r20, 0x7A	; 122
     eb4:	54 e4       	ldi	r21, 0x44	; 68
     eb6:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	34 e2       	ldi	r19, 0x24	; 36
     ebe:	44 e7       	ldi	r20, 0x74	; 116
     ec0:	59 e4       	ldi	r21, 0x49	; 73
     ec2:	0e 94 a6 09 	call	0x134c	; 0x134c <__divsf3>
     ec6:	4b 01       	movw	r8, r22
     ec8:	5c 01       	movw	r10, r24

	switch (timer->timerSelect) {
     eca:	88 81       	ld	r24, Y
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	a1 f1       	breq	.+104    	; 0xf38 <stopwatch_stop+0xbe>
     ed0:	20 f0       	brcs	.+8      	; 0xeda <stopwatch_stop+0x60>
     ed2:	82 30       	cpi	r24, 0x02	; 2
     ed4:	09 f4       	brne	.+2      	; 0xed8 <stopwatch_stop+0x5e>
     ed6:	61 c0       	rjmp	.+194    	; 0xf9a <stopwatch_stop+0x120>
     ed8:	94 c0       	rjmp	.+296    	; 0x1002 <stopwatch_stop+0x188>
		case TIMER0: 
			TCCR0_Reg = 0x00; 
     eda:	13 be       	out	0x33, r1	; 51
			TCNT0_Reg = 0x00;
     edc:	12 be       	out	0x32, r1	; 50
			t_max_delay = 256.0 * t_tick; // 2^8 = 256
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e8       	ldi	r20, 0x80	; 128
     ee4:	53 e4       	ldi	r21, 0x43	; 67
     ee6:	c5 01       	movw	r24, r10
     ee8:	b4 01       	movw	r22, r8
     eea:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     eee:	2b 01       	movw	r4, r22
     ef0:	3c 01       	movw	r6, r24
			* valueRead = (uint16_t) (sw_n_overflow * t_max_delay + t_tick * timer_value);
     ef2:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <sw_n_overflow>
     ef6:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <sw_n_overflow+0x1>
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 4e 0a 	call	0x149c	; 0x149c <__floatunsisf>
     f02:	a3 01       	movw	r20, r6
     f04:	92 01       	movw	r18, r4
     f06:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     f0a:	2b 01       	movw	r4, r22
     f0c:	3c 01       	movw	r6, r24
     f0e:	b8 01       	movw	r22, r16
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 4e 0a 	call	0x149c	; 0x149c <__floatunsisf>
     f18:	a5 01       	movw	r20, r10
     f1a:	94 01       	movw	r18, r8
     f1c:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     f20:	9b 01       	movw	r18, r22
     f22:	ac 01       	movw	r20, r24
     f24:	c3 01       	movw	r24, r6
     f26:	b2 01       	movw	r22, r4
     f28:	0e 94 23 09 	call	0x1246	; 0x1246 <__addsf3>
     f2c:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixunssfsi>
     f30:	f7 01       	movw	r30, r14
     f32:	71 83       	std	Z+1, r23	; 0x01
     f34:	60 83       	st	Z, r22
			break;
     f36:	5f c0       	rjmp	.+190    	; 0xff6 <stopwatch_stop+0x17c>
		case TIMER1: 
			TCCR1A_Reg = 0x00; 
     f38:	1f bc       	out	0x2f, r1	; 47
			TCCR1B_Reg = 0x00; 
     f3a:	1e bc       	out	0x2e, r1	; 46
			TCNT1H_Reg = 0x00;
     f3c:	1d bc       	out	0x2d, r1	; 45
			TCNT1L_Reg = 0x00;
     f3e:	1c bc       	out	0x2c, r1	; 44
			t_max_delay = 65536.0 * t_tick; // 2^16 = 65536
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e8       	ldi	r20, 0x80	; 128
     f46:	57 e4       	ldi	r21, 0x47	; 71
     f48:	c5 01       	movw	r24, r10
     f4a:	b4 01       	movw	r22, r8
     f4c:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     f50:	2b 01       	movw	r4, r22
     f52:	3c 01       	movw	r6, r24
			* valueRead = (uint16_t) (sw_n_overflow * t_max_delay + t_tick * timer_value);
     f54:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <sw_n_overflow>
     f58:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <sw_n_overflow+0x1>
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 4e 0a 	call	0x149c	; 0x149c <__floatunsisf>
     f64:	a3 01       	movw	r20, r6
     f66:	92 01       	movw	r18, r4
     f68:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     f6c:	2b 01       	movw	r4, r22
     f6e:	3c 01       	movw	r6, r24
     f70:	b8 01       	movw	r22, r16
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 4e 0a 	call	0x149c	; 0x149c <__floatunsisf>
     f7a:	a5 01       	movw	r20, r10
     f7c:	94 01       	movw	r18, r8
     f7e:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     f82:	9b 01       	movw	r18, r22
     f84:	ac 01       	movw	r20, r24
     f86:	c3 01       	movw	r24, r6
     f88:	b2 01       	movw	r22, r4
     f8a:	0e 94 23 09 	call	0x1246	; 0x1246 <__addsf3>
     f8e:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixunssfsi>
     f92:	f7 01       	movw	r30, r14
     f94:	71 83       	std	Z+1, r23	; 0x01
     f96:	60 83       	st	Z, r22
			break;
     f98:	2e c0       	rjmp	.+92     	; 0xff6 <stopwatch_stop+0x17c>
		case TIMER2: 
			TCCR2_Reg = 0x00; 
     f9a:	15 bc       	out	0x25, r1	; 37
			TCNT2_Reg = 0x00;
     f9c:	14 bc       	out	0x24, r1	; 36
			t_max_delay = 256.0 * t_tick; // 2^8 = 256
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e8       	ldi	r20, 0x80	; 128
     fa4:	53 e4       	ldi	r21, 0x43	; 67
     fa6:	c5 01       	movw	r24, r10
     fa8:	b4 01       	movw	r22, r8
     faa:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     fae:	2b 01       	movw	r4, r22
     fb0:	3c 01       	movw	r6, r24
			* valueRead = (uint16_t) (sw_n_overflow * t_max_delay + t_tick * timer_value);
     fb2:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <sw_n_overflow>
     fb6:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <sw_n_overflow+0x1>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 4e 0a 	call	0x149c	; 0x149c <__floatunsisf>
     fc2:	a3 01       	movw	r20, r6
     fc4:	92 01       	movw	r18, r4
     fc6:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     fca:	2b 01       	movw	r4, r22
     fcc:	3c 01       	movw	r6, r24
     fce:	b8 01       	movw	r22, r16
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 4e 0a 	call	0x149c	; 0x149c <__floatunsisf>
     fd8:	a5 01       	movw	r20, r10
     fda:	94 01       	movw	r18, r8
     fdc:	0e 94 1d 0b 	call	0x163a	; 0x163a <__mulsf3>
     fe0:	9b 01       	movw	r18, r22
     fe2:	ac 01       	movw	r20, r24
     fe4:	c3 01       	movw	r24, r6
     fe6:	b2 01       	movw	r22, r4
     fe8:	0e 94 23 09 	call	0x1246	; 0x1246 <__addsf3>
     fec:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixunssfsi>
     ff0:	f7 01       	movw	r30, r14
     ff2:	71 83       	std	Z+1, r23	; 0x01
     ff4:	60 83       	st	Z, r22
			break;
		default: return INVALID_TIMER_SELECT;  /* ERROR invalid input (timer) */
	}
	sw_n_overflow = 0;
     ff6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <sw_n_overflow+0x1>
     ffa:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <sw_n_overflow>
	return TIMER_OK;
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <stopwatch_stop+0x18a>
			TCCR2_Reg = 0x00; 
			TCNT2_Reg = 0x00;
			t_max_delay = 256.0 * t_tick; // 2^8 = 256
			* valueRead = (uint16_t) (sw_n_overflow * t_max_delay + t_tick * timer_value);
			break;
		default: return INVALID_TIMER_SELECT;  /* ERROR invalid input (timer) */
    1002:	81 e0       	ldi	r24, 0x01	; 1
	}
	sw_n_overflow = 0;
	return TIMER_OK;
}
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	bf 90       	pop	r11
    1012:	af 90       	pop	r10
    1014:	9f 90       	pop	r9
    1016:	8f 90       	pop	r8
    1018:	7f 90       	pop	r7
    101a:	6f 90       	pop	r6
    101c:	5f 90       	pop	r5
    101e:	4f 90       	pop	r4
    1020:	08 95       	ret

00001022 <__vector_11>:

//////////////////////////////////////////////////////////////////////////

/////////////////////////// ISR OVF functions ////////////////////////////

ISR(TIMER0_OVF_vect) {
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	0f 92       	push	r0
    102a:	11 24       	eor	r1, r1
    102c:	2f 93       	push	r18
    102e:	3f 93       	push	r19
    1030:	4f 93       	push	r20
    1032:	5f 93       	push	r21
    1034:	6f 93       	push	r22
    1036:	7f 93       	push	r23
    1038:	8f 93       	push	r24
    103a:	9f 93       	push	r25
    103c:	af 93       	push	r26
    103e:	bf 93       	push	r27
    1040:	ef 93       	push	r30
    1042:	ff 93       	push	r31
    T0_OVF_PTR_TO_FUN();
    1044:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <T0_OVF_PTR_TO_FUN>
    1048:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <T0_OVF_PTR_TO_FUN+0x1>
    104c:	09 95       	icall
}
    104e:	ff 91       	pop	r31
    1050:	ef 91       	pop	r30
    1052:	bf 91       	pop	r27
    1054:	af 91       	pop	r26
    1056:	9f 91       	pop	r25
    1058:	8f 91       	pop	r24
    105a:	7f 91       	pop	r23
    105c:	6f 91       	pop	r22
    105e:	5f 91       	pop	r21
    1060:	4f 91       	pop	r20
    1062:	3f 91       	pop	r19
    1064:	2f 91       	pop	r18
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	0f 90       	pop	r0
    106c:	1f 90       	pop	r1
    106e:	18 95       	reti

00001070 <__vector_9>:

ISR(TIMER1_OVF_vect) {
    1070:	1f 92       	push	r1
    1072:	0f 92       	push	r0
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	0f 92       	push	r0
    1078:	11 24       	eor	r1, r1
    107a:	2f 93       	push	r18
    107c:	3f 93       	push	r19
    107e:	4f 93       	push	r20
    1080:	5f 93       	push	r21
    1082:	6f 93       	push	r22
    1084:	7f 93       	push	r23
    1086:	8f 93       	push	r24
    1088:	9f 93       	push	r25
    108a:	af 93       	push	r26
    108c:	bf 93       	push	r27
    108e:	ef 93       	push	r30
    1090:	ff 93       	push	r31
    T1_OVF_PTR_TO_FUN();
    1092:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <T1_OVF_PTR_TO_FUN>
    1096:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <T1_OVF_PTR_TO_FUN+0x1>
    109a:	09 95       	icall
}
    109c:	ff 91       	pop	r31
    109e:	ef 91       	pop	r30
    10a0:	bf 91       	pop	r27
    10a2:	af 91       	pop	r26
    10a4:	9f 91       	pop	r25
    10a6:	8f 91       	pop	r24
    10a8:	7f 91       	pop	r23
    10aa:	6f 91       	pop	r22
    10ac:	5f 91       	pop	r21
    10ae:	4f 91       	pop	r20
    10b0:	3f 91       	pop	r19
    10b2:	2f 91       	pop	r18
    10b4:	0f 90       	pop	r0
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	0f 90       	pop	r0
    10ba:	1f 90       	pop	r1
    10bc:	18 95       	reti

000010be <__vector_5>:

ISR(TIMER2_OVF_vect) {
    10be:	1f 92       	push	r1
    10c0:	0f 92       	push	r0
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	0f 92       	push	r0
    10c6:	11 24       	eor	r1, r1
    10c8:	2f 93       	push	r18
    10ca:	3f 93       	push	r19
    10cc:	4f 93       	push	r20
    10ce:	5f 93       	push	r21
    10d0:	6f 93       	push	r22
    10d2:	7f 93       	push	r23
    10d4:	8f 93       	push	r24
    10d6:	9f 93       	push	r25
    10d8:	af 93       	push	r26
    10da:	bf 93       	push	r27
    10dc:	ef 93       	push	r30
    10de:	ff 93       	push	r31
    T2_OVF_PTR_TO_FUN();
    10e0:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <T2_OVF_PTR_TO_FUN>
    10e4:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <T2_OVF_PTR_TO_FUN+0x1>
    10e8:	09 95       	icall
}
    10ea:	ff 91       	pop	r31
    10ec:	ef 91       	pop	r30
    10ee:	bf 91       	pop	r27
    10f0:	af 91       	pop	r26
    10f2:	9f 91       	pop	r25
    10f4:	8f 91       	pop	r24
    10f6:	7f 91       	pop	r23
    10f8:	6f 91       	pop	r22
    10fa:	5f 91       	pop	r21
    10fc:	4f 91       	pop	r20
    10fe:	3f 91       	pop	r19
    1100:	2f 91       	pop	r18
    1102:	0f 90       	pop	r0
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	0f 90       	pop	r0
    1108:	1f 90       	pop	r1
    110a:	18 95       	reti

0000110c <__vector_10>:

/////////////////////////// ISR CMP functions ////////////////////////////

ISR(TIMER0_COMP_vect) {
    110c:	1f 92       	push	r1
    110e:	0f 92       	push	r0
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	0f 92       	push	r0
    1114:	11 24       	eor	r1, r1
    1116:	2f 93       	push	r18
    1118:	3f 93       	push	r19
    111a:	4f 93       	push	r20
    111c:	5f 93       	push	r21
    111e:	6f 93       	push	r22
    1120:	7f 93       	push	r23
    1122:	8f 93       	push	r24
    1124:	9f 93       	push	r25
    1126:	af 93       	push	r26
    1128:	bf 93       	push	r27
    112a:	ef 93       	push	r30
    112c:	ff 93       	push	r31
    T0_CMP_PTR_TO_FUN();
    112e:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <T0_CMP_PTR_TO_FUN>
    1132:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <T0_CMP_PTR_TO_FUN+0x1>
    1136:	09 95       	icall
}
    1138:	ff 91       	pop	r31
    113a:	ef 91       	pop	r30
    113c:	bf 91       	pop	r27
    113e:	af 91       	pop	r26
    1140:	9f 91       	pop	r25
    1142:	8f 91       	pop	r24
    1144:	7f 91       	pop	r23
    1146:	6f 91       	pop	r22
    1148:	5f 91       	pop	r21
    114a:	4f 91       	pop	r20
    114c:	3f 91       	pop	r19
    114e:	2f 91       	pop	r18
    1150:	0f 90       	pop	r0
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	0f 90       	pop	r0
    1156:	1f 90       	pop	r1
    1158:	18 95       	reti

0000115a <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    115a:	1f 92       	push	r1
    115c:	0f 92       	push	r0
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	0f 92       	push	r0
    1162:	11 24       	eor	r1, r1
    1164:	2f 93       	push	r18
    1166:	3f 93       	push	r19
    1168:	4f 93       	push	r20
    116a:	5f 93       	push	r21
    116c:	6f 93       	push	r22
    116e:	7f 93       	push	r23
    1170:	8f 93       	push	r24
    1172:	9f 93       	push	r25
    1174:	af 93       	push	r26
    1176:	bf 93       	push	r27
    1178:	ef 93       	push	r30
    117a:	ff 93       	push	r31
    T1_CMPA_PTR_TO_FUN();
    117c:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <T1_CMPA_PTR_TO_FUN>
    1180:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <T1_CMPA_PTR_TO_FUN+0x1>
    1184:	09 95       	icall
}
    1186:	ff 91       	pop	r31
    1188:	ef 91       	pop	r30
    118a:	bf 91       	pop	r27
    118c:	af 91       	pop	r26
    118e:	9f 91       	pop	r25
    1190:	8f 91       	pop	r24
    1192:	7f 91       	pop	r23
    1194:	6f 91       	pop	r22
    1196:	5f 91       	pop	r21
    1198:	4f 91       	pop	r20
    119a:	3f 91       	pop	r19
    119c:	2f 91       	pop	r18
    119e:	0f 90       	pop	r0
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	0f 90       	pop	r0
    11a4:	1f 90       	pop	r1
    11a6:	18 95       	reti

000011a8 <__vector_8>:

ISR(TIMER1_COMPB_vect) {
    11a8:	1f 92       	push	r1
    11aa:	0f 92       	push	r0
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	0f 92       	push	r0
    11b0:	11 24       	eor	r1, r1
    11b2:	2f 93       	push	r18
    11b4:	3f 93       	push	r19
    11b6:	4f 93       	push	r20
    11b8:	5f 93       	push	r21
    11ba:	6f 93       	push	r22
    11bc:	7f 93       	push	r23
    11be:	8f 93       	push	r24
    11c0:	9f 93       	push	r25
    11c2:	af 93       	push	r26
    11c4:	bf 93       	push	r27
    11c6:	ef 93       	push	r30
    11c8:	ff 93       	push	r31
    T1_CMPB_PTR_TO_FUN();
    11ca:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <T1_CMPB_PTR_TO_FUN>
    11ce:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <T1_CMPB_PTR_TO_FUN+0x1>
    11d2:	09 95       	icall
}
    11d4:	ff 91       	pop	r31
    11d6:	ef 91       	pop	r30
    11d8:	bf 91       	pop	r27
    11da:	af 91       	pop	r26
    11dc:	9f 91       	pop	r25
    11de:	8f 91       	pop	r24
    11e0:	7f 91       	pop	r23
    11e2:	6f 91       	pop	r22
    11e4:	5f 91       	pop	r21
    11e6:	4f 91       	pop	r20
    11e8:	3f 91       	pop	r19
    11ea:	2f 91       	pop	r18
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	0f 90       	pop	r0
    11f2:	1f 90       	pop	r1
    11f4:	18 95       	reti

000011f6 <__vector_4>:

ISR(TIMER2_COMP_vect) {
    11f6:	1f 92       	push	r1
    11f8:	0f 92       	push	r0
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	0f 92       	push	r0
    11fe:	11 24       	eor	r1, r1
    1200:	2f 93       	push	r18
    1202:	3f 93       	push	r19
    1204:	4f 93       	push	r20
    1206:	5f 93       	push	r21
    1208:	6f 93       	push	r22
    120a:	7f 93       	push	r23
    120c:	8f 93       	push	r24
    120e:	9f 93       	push	r25
    1210:	af 93       	push	r26
    1212:	bf 93       	push	r27
    1214:	ef 93       	push	r30
    1216:	ff 93       	push	r31
    T2_CMP_PTR_TO_FUN();
    1218:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <T2_CMP_PTR_TO_FUN>
    121c:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <T2_CMP_PTR_TO_FUN+0x1>
    1220:	09 95       	icall
    1222:	ff 91       	pop	r31
    1224:	ef 91       	pop	r30
    1226:	bf 91       	pop	r27
    1228:	af 91       	pop	r26
    122a:	9f 91       	pop	r25
    122c:	8f 91       	pop	r24
    122e:	7f 91       	pop	r23
    1230:	6f 91       	pop	r22
    1232:	5f 91       	pop	r21
    1234:	4f 91       	pop	r20
    1236:	3f 91       	pop	r19
    1238:	2f 91       	pop	r18
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	0f 90       	pop	r0
    1240:	1f 90       	pop	r1
    1242:	18 95       	reti

00001244 <__subsf3>:
    1244:	50 58       	subi	r21, 0x80	; 128

00001246 <__addsf3>:
    1246:	bb 27       	eor	r27, r27
    1248:	aa 27       	eor	r26, r26
    124a:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3x>
    124e:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_round>
    1252:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fp_pscA>
    1256:	38 f0       	brcs	.+14     	; 0x1266 <__addsf3+0x20>
    1258:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__fp_pscB>
    125c:	20 f0       	brcs	.+8      	; 0x1266 <__addsf3+0x20>
    125e:	39 f4       	brne	.+14     	; 0x126e <__addsf3+0x28>
    1260:	9f 3f       	cpi	r25, 0xFF	; 255
    1262:	19 f4       	brne	.+6      	; 0x126a <__addsf3+0x24>
    1264:	26 f4       	brtc	.+8      	; 0x126e <__addsf3+0x28>
    1266:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__fp_nan>
    126a:	0e f4       	brtc	.+2      	; 0x126e <__addsf3+0x28>
    126c:	e0 95       	com	r30
    126e:	e7 fb       	bst	r30, 7
    1270:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__fp_inf>

00001274 <__addsf3x>:
    1274:	e9 2f       	mov	r30, r25
    1276:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__fp_split3>
    127a:	58 f3       	brcs	.-42     	; 0x1252 <__addsf3+0xc>
    127c:	ba 17       	cp	r27, r26
    127e:	62 07       	cpc	r22, r18
    1280:	73 07       	cpc	r23, r19
    1282:	84 07       	cpc	r24, r20
    1284:	95 07       	cpc	r25, r21
    1286:	20 f0       	brcs	.+8      	; 0x1290 <__addsf3x+0x1c>
    1288:	79 f4       	brne	.+30     	; 0x12a8 <__addsf3x+0x34>
    128a:	a6 f5       	brtc	.+104    	; 0x12f4 <__addsf3x+0x80>
    128c:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_zero>
    1290:	0e f4       	brtc	.+2      	; 0x1294 <__addsf3x+0x20>
    1292:	e0 95       	com	r30
    1294:	0b 2e       	mov	r0, r27
    1296:	ba 2f       	mov	r27, r26
    1298:	a0 2d       	mov	r26, r0
    129a:	0b 01       	movw	r0, r22
    129c:	b9 01       	movw	r22, r18
    129e:	90 01       	movw	r18, r0
    12a0:	0c 01       	movw	r0, r24
    12a2:	ca 01       	movw	r24, r20
    12a4:	a0 01       	movw	r20, r0
    12a6:	11 24       	eor	r1, r1
    12a8:	ff 27       	eor	r31, r31
    12aa:	59 1b       	sub	r21, r25
    12ac:	99 f0       	breq	.+38     	; 0x12d4 <__addsf3x+0x60>
    12ae:	59 3f       	cpi	r21, 0xF9	; 249
    12b0:	50 f4       	brcc	.+20     	; 0x12c6 <__addsf3x+0x52>
    12b2:	50 3e       	cpi	r21, 0xE0	; 224
    12b4:	68 f1       	brcs	.+90     	; 0x1310 <__addsf3x+0x9c>
    12b6:	1a 16       	cp	r1, r26
    12b8:	f0 40       	sbci	r31, 0x00	; 0
    12ba:	a2 2f       	mov	r26, r18
    12bc:	23 2f       	mov	r18, r19
    12be:	34 2f       	mov	r19, r20
    12c0:	44 27       	eor	r20, r20
    12c2:	58 5f       	subi	r21, 0xF8	; 248
    12c4:	f3 cf       	rjmp	.-26     	; 0x12ac <__addsf3x+0x38>
    12c6:	46 95       	lsr	r20
    12c8:	37 95       	ror	r19
    12ca:	27 95       	ror	r18
    12cc:	a7 95       	ror	r26
    12ce:	f0 40       	sbci	r31, 0x00	; 0
    12d0:	53 95       	inc	r21
    12d2:	c9 f7       	brne	.-14     	; 0x12c6 <__addsf3x+0x52>
    12d4:	7e f4       	brtc	.+30     	; 0x12f4 <__addsf3x+0x80>
    12d6:	1f 16       	cp	r1, r31
    12d8:	ba 0b       	sbc	r27, r26
    12da:	62 0b       	sbc	r22, r18
    12dc:	73 0b       	sbc	r23, r19
    12de:	84 0b       	sbc	r24, r20
    12e0:	ba f0       	brmi	.+46     	; 0x1310 <__addsf3x+0x9c>
    12e2:	91 50       	subi	r25, 0x01	; 1
    12e4:	a1 f0       	breq	.+40     	; 0x130e <__addsf3x+0x9a>
    12e6:	ff 0f       	add	r31, r31
    12e8:	bb 1f       	adc	r27, r27
    12ea:	66 1f       	adc	r22, r22
    12ec:	77 1f       	adc	r23, r23
    12ee:	88 1f       	adc	r24, r24
    12f0:	c2 f7       	brpl	.-16     	; 0x12e2 <__addsf3x+0x6e>
    12f2:	0e c0       	rjmp	.+28     	; 0x1310 <__addsf3x+0x9c>
    12f4:	ba 0f       	add	r27, r26
    12f6:	62 1f       	adc	r22, r18
    12f8:	73 1f       	adc	r23, r19
    12fa:	84 1f       	adc	r24, r20
    12fc:	48 f4       	brcc	.+18     	; 0x1310 <__addsf3x+0x9c>
    12fe:	87 95       	ror	r24
    1300:	77 95       	ror	r23
    1302:	67 95       	ror	r22
    1304:	b7 95       	ror	r27
    1306:	f7 95       	ror	r31
    1308:	9e 3f       	cpi	r25, 0xFE	; 254
    130a:	08 f0       	brcs	.+2      	; 0x130e <__addsf3x+0x9a>
    130c:	b0 cf       	rjmp	.-160    	; 0x126e <__addsf3+0x28>
    130e:	93 95       	inc	r25
    1310:	88 0f       	add	r24, r24
    1312:	08 f0       	brcs	.+2      	; 0x1316 <__addsf3x+0xa2>
    1314:	99 27       	eor	r25, r25
    1316:	ee 0f       	add	r30, r30
    1318:	97 95       	ror	r25
    131a:	87 95       	ror	r24
    131c:	08 95       	ret

0000131e <ceil>:
    131e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__fp_trunc>
    1322:	90 f0       	brcs	.+36     	; 0x1348 <ceil+0x2a>
    1324:	9f 37       	cpi	r25, 0x7F	; 127
    1326:	48 f4       	brcc	.+18     	; 0x133a <ceil+0x1c>
    1328:	91 11       	cpse	r25, r1
    132a:	16 f4       	brtc	.+4      	; 0x1330 <ceil+0x12>
    132c:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__fp_szero>
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	80 e8       	ldi	r24, 0x80	; 128
    1336:	9f e3       	ldi	r25, 0x3F	; 63
    1338:	08 95       	ret
    133a:	26 f0       	brts	.+8      	; 0x1344 <ceil+0x26>
    133c:	1b 16       	cp	r1, r27
    133e:	61 1d       	adc	r22, r1
    1340:	71 1d       	adc	r23, r1
    1342:	81 1d       	adc	r24, r1
    1344:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <__fp_mintl>
    1348:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__fp_mpack>

0000134c <__divsf3>:
    134c:	0e 94 ba 09 	call	0x1374	; 0x1374 <__divsf3x>
    1350:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_round>
    1354:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__fp_pscB>
    1358:	58 f0       	brcs	.+22     	; 0x1370 <__divsf3+0x24>
    135a:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fp_pscA>
    135e:	40 f0       	brcs	.+16     	; 0x1370 <__divsf3+0x24>
    1360:	29 f4       	brne	.+10     	; 0x136c <__divsf3+0x20>
    1362:	5f 3f       	cpi	r21, 0xFF	; 255
    1364:	29 f0       	breq	.+10     	; 0x1370 <__divsf3+0x24>
    1366:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__fp_inf>
    136a:	51 11       	cpse	r21, r1
    136c:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__fp_szero>
    1370:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__fp_nan>

00001374 <__divsf3x>:
    1374:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__fp_split3>
    1378:	68 f3       	brcs	.-38     	; 0x1354 <__divsf3+0x8>

0000137a <__divsf3_pse>:
    137a:	99 23       	and	r25, r25
    137c:	b1 f3       	breq	.-20     	; 0x136a <__divsf3+0x1e>
    137e:	55 23       	and	r21, r21
    1380:	91 f3       	breq	.-28     	; 0x1366 <__divsf3+0x1a>
    1382:	95 1b       	sub	r25, r21
    1384:	55 0b       	sbc	r21, r21
    1386:	bb 27       	eor	r27, r27
    1388:	aa 27       	eor	r26, r26
    138a:	62 17       	cp	r22, r18
    138c:	73 07       	cpc	r23, r19
    138e:	84 07       	cpc	r24, r20
    1390:	38 f0       	brcs	.+14     	; 0x13a0 <__divsf3_pse+0x26>
    1392:	9f 5f       	subi	r25, 0xFF	; 255
    1394:	5f 4f       	sbci	r21, 0xFF	; 255
    1396:	22 0f       	add	r18, r18
    1398:	33 1f       	adc	r19, r19
    139a:	44 1f       	adc	r20, r20
    139c:	aa 1f       	adc	r26, r26
    139e:	a9 f3       	breq	.-22     	; 0x138a <__divsf3_pse+0x10>
    13a0:	35 d0       	rcall	.+106    	; 0x140c <__divsf3_pse+0x92>
    13a2:	0e 2e       	mov	r0, r30
    13a4:	3a f0       	brmi	.+14     	; 0x13b4 <__divsf3_pse+0x3a>
    13a6:	e0 e8       	ldi	r30, 0x80	; 128
    13a8:	32 d0       	rcall	.+100    	; 0x140e <__divsf3_pse+0x94>
    13aa:	91 50       	subi	r25, 0x01	; 1
    13ac:	50 40       	sbci	r21, 0x00	; 0
    13ae:	e6 95       	lsr	r30
    13b0:	00 1c       	adc	r0, r0
    13b2:	ca f7       	brpl	.-14     	; 0x13a6 <__divsf3_pse+0x2c>
    13b4:	2b d0       	rcall	.+86     	; 0x140c <__divsf3_pse+0x92>
    13b6:	fe 2f       	mov	r31, r30
    13b8:	29 d0       	rcall	.+82     	; 0x140c <__divsf3_pse+0x92>
    13ba:	66 0f       	add	r22, r22
    13bc:	77 1f       	adc	r23, r23
    13be:	88 1f       	adc	r24, r24
    13c0:	bb 1f       	adc	r27, r27
    13c2:	26 17       	cp	r18, r22
    13c4:	37 07       	cpc	r19, r23
    13c6:	48 07       	cpc	r20, r24
    13c8:	ab 07       	cpc	r26, r27
    13ca:	b0 e8       	ldi	r27, 0x80	; 128
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <__divsf3_pse+0x56>
    13ce:	bb 0b       	sbc	r27, r27
    13d0:	80 2d       	mov	r24, r0
    13d2:	bf 01       	movw	r22, r30
    13d4:	ff 27       	eor	r31, r31
    13d6:	93 58       	subi	r25, 0x83	; 131
    13d8:	5f 4f       	sbci	r21, 0xFF	; 255
    13da:	3a f0       	brmi	.+14     	; 0x13ea <__divsf3_pse+0x70>
    13dc:	9e 3f       	cpi	r25, 0xFE	; 254
    13de:	51 05       	cpc	r21, r1
    13e0:	78 f0       	brcs	.+30     	; 0x1400 <__divsf3_pse+0x86>
    13e2:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__fp_inf>
    13e6:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__fp_szero>
    13ea:	5f 3f       	cpi	r21, 0xFF	; 255
    13ec:	e4 f3       	brlt	.-8      	; 0x13e6 <__divsf3_pse+0x6c>
    13ee:	98 3e       	cpi	r25, 0xE8	; 232
    13f0:	d4 f3       	brlt	.-12     	; 0x13e6 <__divsf3_pse+0x6c>
    13f2:	86 95       	lsr	r24
    13f4:	77 95       	ror	r23
    13f6:	67 95       	ror	r22
    13f8:	b7 95       	ror	r27
    13fa:	f7 95       	ror	r31
    13fc:	9f 5f       	subi	r25, 0xFF	; 255
    13fe:	c9 f7       	brne	.-14     	; 0x13f2 <__divsf3_pse+0x78>
    1400:	88 0f       	add	r24, r24
    1402:	91 1d       	adc	r25, r1
    1404:	96 95       	lsr	r25
    1406:	87 95       	ror	r24
    1408:	97 f9       	bld	r25, 7
    140a:	08 95       	ret
    140c:	e1 e0       	ldi	r30, 0x01	; 1
    140e:	66 0f       	add	r22, r22
    1410:	77 1f       	adc	r23, r23
    1412:	88 1f       	adc	r24, r24
    1414:	bb 1f       	adc	r27, r27
    1416:	62 17       	cp	r22, r18
    1418:	73 07       	cpc	r23, r19
    141a:	84 07       	cpc	r24, r20
    141c:	ba 07       	cpc	r27, r26
    141e:	20 f0       	brcs	.+8      	; 0x1428 <__divsf3_pse+0xae>
    1420:	62 1b       	sub	r22, r18
    1422:	73 0b       	sbc	r23, r19
    1424:	84 0b       	sbc	r24, r20
    1426:	ba 0b       	sbc	r27, r26
    1428:	ee 1f       	adc	r30, r30
    142a:	88 f7       	brcc	.-30     	; 0x140e <__divsf3_pse+0x94>
    142c:	e0 95       	com	r30
    142e:	08 95       	ret

00001430 <__fixsfsi>:
    1430:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixunssfsi>
    1434:	68 94       	set
    1436:	b1 11       	cpse	r27, r1
    1438:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__fp_szero>
    143c:	08 95       	ret

0000143e <__fixunssfsi>:
    143e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__fp_splitA>
    1442:	88 f0       	brcs	.+34     	; 0x1466 <__fixunssfsi+0x28>
    1444:	9f 57       	subi	r25, 0x7F	; 127
    1446:	98 f0       	brcs	.+38     	; 0x146e <__fixunssfsi+0x30>
    1448:	b9 2f       	mov	r27, r25
    144a:	99 27       	eor	r25, r25
    144c:	b7 51       	subi	r27, 0x17	; 23
    144e:	b0 f0       	brcs	.+44     	; 0x147c <__fixunssfsi+0x3e>
    1450:	e1 f0       	breq	.+56     	; 0x148a <__fixunssfsi+0x4c>
    1452:	66 0f       	add	r22, r22
    1454:	77 1f       	adc	r23, r23
    1456:	88 1f       	adc	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	1a f0       	brmi	.+6      	; 0x1462 <__fixunssfsi+0x24>
    145c:	ba 95       	dec	r27
    145e:	c9 f7       	brne	.-14     	; 0x1452 <__fixunssfsi+0x14>
    1460:	14 c0       	rjmp	.+40     	; 0x148a <__fixunssfsi+0x4c>
    1462:	b1 30       	cpi	r27, 0x01	; 1
    1464:	91 f0       	breq	.+36     	; 0x148a <__fixunssfsi+0x4c>
    1466:	0e 94 16 0b 	call	0x162c	; 0x162c <__fp_zero>
    146a:	b1 e0       	ldi	r27, 0x01	; 1
    146c:	08 95       	ret
    146e:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_zero>
    1472:	67 2f       	mov	r22, r23
    1474:	78 2f       	mov	r23, r24
    1476:	88 27       	eor	r24, r24
    1478:	b8 5f       	subi	r27, 0xF8	; 248
    147a:	39 f0       	breq	.+14     	; 0x148a <__fixunssfsi+0x4c>
    147c:	b9 3f       	cpi	r27, 0xF9	; 249
    147e:	cc f3       	brlt	.-14     	; 0x1472 <__fixunssfsi+0x34>
    1480:	86 95       	lsr	r24
    1482:	77 95       	ror	r23
    1484:	67 95       	ror	r22
    1486:	b3 95       	inc	r27
    1488:	d9 f7       	brne	.-10     	; 0x1480 <__fixunssfsi+0x42>
    148a:	3e f4       	brtc	.+14     	; 0x149a <__fixunssfsi+0x5c>
    148c:	90 95       	com	r25
    148e:	80 95       	com	r24
    1490:	70 95       	com	r23
    1492:	61 95       	neg	r22
    1494:	7f 4f       	sbci	r23, 0xFF	; 255
    1496:	8f 4f       	sbci	r24, 0xFF	; 255
    1498:	9f 4f       	sbci	r25, 0xFF	; 255
    149a:	08 95       	ret

0000149c <__floatunsisf>:
    149c:	e8 94       	clt
    149e:	09 c0       	rjmp	.+18     	; 0x14b2 <__floatsisf+0x12>

000014a0 <__floatsisf>:
    14a0:	97 fb       	bst	r25, 7
    14a2:	3e f4       	brtc	.+14     	; 0x14b2 <__floatsisf+0x12>
    14a4:	90 95       	com	r25
    14a6:	80 95       	com	r24
    14a8:	70 95       	com	r23
    14aa:	61 95       	neg	r22
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
    14ae:	8f 4f       	sbci	r24, 0xFF	; 255
    14b0:	9f 4f       	sbci	r25, 0xFF	; 255
    14b2:	99 23       	and	r25, r25
    14b4:	a9 f0       	breq	.+42     	; 0x14e0 <__floatsisf+0x40>
    14b6:	f9 2f       	mov	r31, r25
    14b8:	96 e9       	ldi	r25, 0x96	; 150
    14ba:	bb 27       	eor	r27, r27
    14bc:	93 95       	inc	r25
    14be:	f6 95       	lsr	r31
    14c0:	87 95       	ror	r24
    14c2:	77 95       	ror	r23
    14c4:	67 95       	ror	r22
    14c6:	b7 95       	ror	r27
    14c8:	f1 11       	cpse	r31, r1
    14ca:	f8 cf       	rjmp	.-16     	; 0x14bc <__floatsisf+0x1c>
    14cc:	fa f4       	brpl	.+62     	; 0x150c <__floatsisf+0x6c>
    14ce:	bb 0f       	add	r27, r27
    14d0:	11 f4       	brne	.+4      	; 0x14d6 <__floatsisf+0x36>
    14d2:	60 ff       	sbrs	r22, 0
    14d4:	1b c0       	rjmp	.+54     	; 0x150c <__floatsisf+0x6c>
    14d6:	6f 5f       	subi	r22, 0xFF	; 255
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	8f 4f       	sbci	r24, 0xFF	; 255
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	16 c0       	rjmp	.+44     	; 0x150c <__floatsisf+0x6c>
    14e0:	88 23       	and	r24, r24
    14e2:	11 f0       	breq	.+4      	; 0x14e8 <__floatsisf+0x48>
    14e4:	96 e9       	ldi	r25, 0x96	; 150
    14e6:	11 c0       	rjmp	.+34     	; 0x150a <__floatsisf+0x6a>
    14e8:	77 23       	and	r23, r23
    14ea:	21 f0       	breq	.+8      	; 0x14f4 <__floatsisf+0x54>
    14ec:	9e e8       	ldi	r25, 0x8E	; 142
    14ee:	87 2f       	mov	r24, r23
    14f0:	76 2f       	mov	r23, r22
    14f2:	05 c0       	rjmp	.+10     	; 0x14fe <__floatsisf+0x5e>
    14f4:	66 23       	and	r22, r22
    14f6:	71 f0       	breq	.+28     	; 0x1514 <__floatsisf+0x74>
    14f8:	96 e8       	ldi	r25, 0x86	; 134
    14fa:	86 2f       	mov	r24, r22
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	2a f0       	brmi	.+10     	; 0x150c <__floatsisf+0x6c>
    1502:	9a 95       	dec	r25
    1504:	66 0f       	add	r22, r22
    1506:	77 1f       	adc	r23, r23
    1508:	88 1f       	adc	r24, r24
    150a:	da f7       	brpl	.-10     	; 0x1502 <__floatsisf+0x62>
    150c:	88 0f       	add	r24, r24
    150e:	96 95       	lsr	r25
    1510:	87 95       	ror	r24
    1512:	97 f9       	bld	r25, 7
    1514:	08 95       	ret

00001516 <__fp_inf>:
    1516:	97 f9       	bld	r25, 7
    1518:	9f 67       	ori	r25, 0x7F	; 127
    151a:	80 e8       	ldi	r24, 0x80	; 128
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	08 95       	ret

00001522 <__fp_mintl>:
    1522:	88 23       	and	r24, r24
    1524:	71 f4       	brne	.+28     	; 0x1542 <__fp_mintl+0x20>
    1526:	77 23       	and	r23, r23
    1528:	21 f0       	breq	.+8      	; 0x1532 <__fp_mintl+0x10>
    152a:	98 50       	subi	r25, 0x08	; 8
    152c:	87 2b       	or	r24, r23
    152e:	76 2f       	mov	r23, r22
    1530:	07 c0       	rjmp	.+14     	; 0x1540 <__fp_mintl+0x1e>
    1532:	66 23       	and	r22, r22
    1534:	11 f4       	brne	.+4      	; 0x153a <__fp_mintl+0x18>
    1536:	99 27       	eor	r25, r25
    1538:	0d c0       	rjmp	.+26     	; 0x1554 <__fp_mintl+0x32>
    153a:	90 51       	subi	r25, 0x10	; 16
    153c:	86 2b       	or	r24, r22
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	2a f0       	brmi	.+10     	; 0x154e <__fp_mintl+0x2c>
    1544:	9a 95       	dec	r25
    1546:	66 0f       	add	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	da f7       	brpl	.-10     	; 0x1544 <__fp_mintl+0x22>
    154e:	88 0f       	add	r24, r24
    1550:	96 95       	lsr	r25
    1552:	87 95       	ror	r24
    1554:	97 f9       	bld	r25, 7
    1556:	08 95       	ret

00001558 <__fp_mpack>:
    1558:	9f 3f       	cpi	r25, 0xFF	; 255
    155a:	31 f0       	breq	.+12     	; 0x1568 <__fp_mpack_finite+0xc>

0000155c <__fp_mpack_finite>:
    155c:	91 50       	subi	r25, 0x01	; 1
    155e:	20 f4       	brcc	.+8      	; 0x1568 <__fp_mpack_finite+0xc>
    1560:	87 95       	ror	r24
    1562:	77 95       	ror	r23
    1564:	67 95       	ror	r22
    1566:	b7 95       	ror	r27
    1568:	88 0f       	add	r24, r24
    156a:	91 1d       	adc	r25, r1
    156c:	96 95       	lsr	r25
    156e:	87 95       	ror	r24
    1570:	97 f9       	bld	r25, 7
    1572:	08 95       	ret

00001574 <__fp_nan>:
    1574:	9f ef       	ldi	r25, 0xFF	; 255
    1576:	80 ec       	ldi	r24, 0xC0	; 192
    1578:	08 95       	ret

0000157a <__fp_pscA>:
    157a:	00 24       	eor	r0, r0
    157c:	0a 94       	dec	r0
    157e:	16 16       	cp	r1, r22
    1580:	17 06       	cpc	r1, r23
    1582:	18 06       	cpc	r1, r24
    1584:	09 06       	cpc	r0, r25
    1586:	08 95       	ret

00001588 <__fp_pscB>:
    1588:	00 24       	eor	r0, r0
    158a:	0a 94       	dec	r0
    158c:	12 16       	cp	r1, r18
    158e:	13 06       	cpc	r1, r19
    1590:	14 06       	cpc	r1, r20
    1592:	05 06       	cpc	r0, r21
    1594:	08 95       	ret

00001596 <__fp_round>:
    1596:	09 2e       	mov	r0, r25
    1598:	03 94       	inc	r0
    159a:	00 0c       	add	r0, r0
    159c:	11 f4       	brne	.+4      	; 0x15a2 <__fp_round+0xc>
    159e:	88 23       	and	r24, r24
    15a0:	52 f0       	brmi	.+20     	; 0x15b6 <__fp_round+0x20>
    15a2:	bb 0f       	add	r27, r27
    15a4:	40 f4       	brcc	.+16     	; 0x15b6 <__fp_round+0x20>
    15a6:	bf 2b       	or	r27, r31
    15a8:	11 f4       	brne	.+4      	; 0x15ae <__fp_round+0x18>
    15aa:	60 ff       	sbrs	r22, 0
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <__fp_round+0x20>
    15ae:	6f 5f       	subi	r22, 0xFF	; 255
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	8f 4f       	sbci	r24, 0xFF	; 255
    15b4:	9f 4f       	sbci	r25, 0xFF	; 255
    15b6:	08 95       	ret

000015b8 <__fp_split3>:
    15b8:	57 fd       	sbrc	r21, 7
    15ba:	90 58       	subi	r25, 0x80	; 128
    15bc:	44 0f       	add	r20, r20
    15be:	55 1f       	adc	r21, r21
    15c0:	59 f0       	breq	.+22     	; 0x15d8 <__fp_splitA+0x10>
    15c2:	5f 3f       	cpi	r21, 0xFF	; 255
    15c4:	71 f0       	breq	.+28     	; 0x15e2 <__fp_splitA+0x1a>
    15c6:	47 95       	ror	r20

000015c8 <__fp_splitA>:
    15c8:	88 0f       	add	r24, r24
    15ca:	97 fb       	bst	r25, 7
    15cc:	99 1f       	adc	r25, r25
    15ce:	61 f0       	breq	.+24     	; 0x15e8 <__fp_splitA+0x20>
    15d0:	9f 3f       	cpi	r25, 0xFF	; 255
    15d2:	79 f0       	breq	.+30     	; 0x15f2 <__fp_splitA+0x2a>
    15d4:	87 95       	ror	r24
    15d6:	08 95       	ret
    15d8:	12 16       	cp	r1, r18
    15da:	13 06       	cpc	r1, r19
    15dc:	14 06       	cpc	r1, r20
    15de:	55 1f       	adc	r21, r21
    15e0:	f2 cf       	rjmp	.-28     	; 0x15c6 <__fp_split3+0xe>
    15e2:	46 95       	lsr	r20
    15e4:	f1 df       	rcall	.-30     	; 0x15c8 <__fp_splitA>
    15e6:	08 c0       	rjmp	.+16     	; 0x15f8 <__fp_splitA+0x30>
    15e8:	16 16       	cp	r1, r22
    15ea:	17 06       	cpc	r1, r23
    15ec:	18 06       	cpc	r1, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	f1 cf       	rjmp	.-30     	; 0x15d4 <__fp_splitA+0xc>
    15f2:	86 95       	lsr	r24
    15f4:	71 05       	cpc	r23, r1
    15f6:	61 05       	cpc	r22, r1
    15f8:	08 94       	sec
    15fa:	08 95       	ret

000015fc <__fp_trunc>:
    15fc:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__fp_splitA>
    1600:	a0 f0       	brcs	.+40     	; 0x162a <__fp_trunc+0x2e>
    1602:	be e7       	ldi	r27, 0x7E	; 126
    1604:	b9 17       	cp	r27, r25
    1606:	88 f4       	brcc	.+34     	; 0x162a <__fp_trunc+0x2e>
    1608:	bb 27       	eor	r27, r27
    160a:	9f 38       	cpi	r25, 0x8F	; 143
    160c:	60 f4       	brcc	.+24     	; 0x1626 <__fp_trunc+0x2a>
    160e:	16 16       	cp	r1, r22
    1610:	b1 1d       	adc	r27, r1
    1612:	67 2f       	mov	r22, r23
    1614:	78 2f       	mov	r23, r24
    1616:	88 27       	eor	r24, r24
    1618:	98 5f       	subi	r25, 0xF8	; 248
    161a:	f7 cf       	rjmp	.-18     	; 0x160a <__fp_trunc+0xe>
    161c:	86 95       	lsr	r24
    161e:	77 95       	ror	r23
    1620:	67 95       	ror	r22
    1622:	b1 1d       	adc	r27, r1
    1624:	93 95       	inc	r25
    1626:	96 39       	cpi	r25, 0x96	; 150
    1628:	c8 f3       	brcs	.-14     	; 0x161c <__fp_trunc+0x20>
    162a:	08 95       	ret

0000162c <__fp_zero>:
    162c:	e8 94       	clt

0000162e <__fp_szero>:
    162e:	bb 27       	eor	r27, r27
    1630:	66 27       	eor	r22, r22
    1632:	77 27       	eor	r23, r23
    1634:	cb 01       	movw	r24, r22
    1636:	97 f9       	bld	r25, 7
    1638:	08 95       	ret

0000163a <__mulsf3>:
    163a:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3x>
    163e:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_round>
    1642:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fp_pscA>
    1646:	38 f0       	brcs	.+14     	; 0x1656 <__mulsf3+0x1c>
    1648:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__fp_pscB>
    164c:	20 f0       	brcs	.+8      	; 0x1656 <__mulsf3+0x1c>
    164e:	95 23       	and	r25, r21
    1650:	11 f0       	breq	.+4      	; 0x1656 <__mulsf3+0x1c>
    1652:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__fp_inf>
    1656:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__fp_nan>
    165a:	11 24       	eor	r1, r1
    165c:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__fp_szero>

00001660 <__mulsf3x>:
    1660:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__fp_split3>
    1664:	70 f3       	brcs	.-36     	; 0x1642 <__mulsf3+0x8>

00001666 <__mulsf3_pse>:
    1666:	95 9f       	mul	r25, r21
    1668:	c1 f3       	breq	.-16     	; 0x165a <__mulsf3+0x20>
    166a:	95 0f       	add	r25, r21
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	55 1f       	adc	r21, r21
    1670:	62 9f       	mul	r22, r18
    1672:	f0 01       	movw	r30, r0
    1674:	72 9f       	mul	r23, r18
    1676:	bb 27       	eor	r27, r27
    1678:	f0 0d       	add	r31, r0
    167a:	b1 1d       	adc	r27, r1
    167c:	63 9f       	mul	r22, r19
    167e:	aa 27       	eor	r26, r26
    1680:	f0 0d       	add	r31, r0
    1682:	b1 1d       	adc	r27, r1
    1684:	aa 1f       	adc	r26, r26
    1686:	64 9f       	mul	r22, r20
    1688:	66 27       	eor	r22, r22
    168a:	b0 0d       	add	r27, r0
    168c:	a1 1d       	adc	r26, r1
    168e:	66 1f       	adc	r22, r22
    1690:	82 9f       	mul	r24, r18
    1692:	22 27       	eor	r18, r18
    1694:	b0 0d       	add	r27, r0
    1696:	a1 1d       	adc	r26, r1
    1698:	62 1f       	adc	r22, r18
    169a:	73 9f       	mul	r23, r19
    169c:	b0 0d       	add	r27, r0
    169e:	a1 1d       	adc	r26, r1
    16a0:	62 1f       	adc	r22, r18
    16a2:	83 9f       	mul	r24, r19
    16a4:	a0 0d       	add	r26, r0
    16a6:	61 1d       	adc	r22, r1
    16a8:	22 1f       	adc	r18, r18
    16aa:	74 9f       	mul	r23, r20
    16ac:	33 27       	eor	r19, r19
    16ae:	a0 0d       	add	r26, r0
    16b0:	61 1d       	adc	r22, r1
    16b2:	23 1f       	adc	r18, r19
    16b4:	84 9f       	mul	r24, r20
    16b6:	60 0d       	add	r22, r0
    16b8:	21 1d       	adc	r18, r1
    16ba:	82 2f       	mov	r24, r18
    16bc:	76 2f       	mov	r23, r22
    16be:	6a 2f       	mov	r22, r26
    16c0:	11 24       	eor	r1, r1
    16c2:	9f 57       	subi	r25, 0x7F	; 127
    16c4:	50 40       	sbci	r21, 0x00	; 0
    16c6:	9a f0       	brmi	.+38     	; 0x16ee <__mulsf3_pse+0x88>
    16c8:	f1 f0       	breq	.+60     	; 0x1706 <__mulsf3_pse+0xa0>
    16ca:	88 23       	and	r24, r24
    16cc:	4a f0       	brmi	.+18     	; 0x16e0 <__mulsf3_pse+0x7a>
    16ce:	ee 0f       	add	r30, r30
    16d0:	ff 1f       	adc	r31, r31
    16d2:	bb 1f       	adc	r27, r27
    16d4:	66 1f       	adc	r22, r22
    16d6:	77 1f       	adc	r23, r23
    16d8:	88 1f       	adc	r24, r24
    16da:	91 50       	subi	r25, 0x01	; 1
    16dc:	50 40       	sbci	r21, 0x00	; 0
    16de:	a9 f7       	brne	.-22     	; 0x16ca <__mulsf3_pse+0x64>
    16e0:	9e 3f       	cpi	r25, 0xFE	; 254
    16e2:	51 05       	cpc	r21, r1
    16e4:	80 f0       	brcs	.+32     	; 0x1706 <__mulsf3_pse+0xa0>
    16e6:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__fp_inf>
    16ea:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__fp_szero>
    16ee:	5f 3f       	cpi	r21, 0xFF	; 255
    16f0:	e4 f3       	brlt	.-8      	; 0x16ea <__mulsf3_pse+0x84>
    16f2:	98 3e       	cpi	r25, 0xE8	; 232
    16f4:	d4 f3       	brlt	.-12     	; 0x16ea <__mulsf3_pse+0x84>
    16f6:	86 95       	lsr	r24
    16f8:	77 95       	ror	r23
    16fa:	67 95       	ror	r22
    16fc:	b7 95       	ror	r27
    16fe:	f7 95       	ror	r31
    1700:	e7 95       	ror	r30
    1702:	9f 5f       	subi	r25, 0xFF	; 255
    1704:	c1 f7       	brne	.-16     	; 0x16f6 <__mulsf3_pse+0x90>
    1706:	fe 2b       	or	r31, r30
    1708:	88 0f       	add	r24, r24
    170a:	91 1d       	adc	r25, r1
    170c:	96 95       	lsr	r25
    170e:	87 95       	ror	r24
    1710:	97 f9       	bld	r25, 7
    1712:	08 95       	ret

00001714 <_exit>:
    1714:	f8 94       	cli

00001716 <__stop_program>:
    1716:	ff cf       	rjmp	.-2      	; 0x1716 <__stop_program>
